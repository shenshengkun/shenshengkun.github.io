<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>舒宇的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenshengkun.github.io/"/>
  <updated>2019-04-19T06:38:01.377Z</updated>
  <id>https://shenshengkun.github.io/</id>
  
  <author>
    <name>Shu Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>钉钉定时发送值班人员</title>
    <link href="https://shenshengkun.github.io/2019/04/19/linux/%E9%92%89%E9%92%89%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E5%80%BC%E7%8F%AD%E4%BA%BA%E5%91%98/"/>
    <id>https://shenshengkun.github.io/2019/04/19/linux/钉钉定时发送值班人员/</id>
    <published>2019-04-19T06:20:50.000Z</published>
    <updated>2019-04-19T06:38:01.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>每天运维人员都需要去做些基础服务，就需要值班人员去轮班解决，现在需要写一个定时发送值班人员的脚本</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>需要自己在钉钉群，申请个机器人，申请过程这里不赘述了，下面是脚本</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@Ops-script dingding]# mkdir /home/monitor/dingding</span><br><span class="line">[root@Ops-script dingding]# touch groupkey  helpkey</span><br><span class="line"></span><br><span class="line">[root@Ops-script dingding]# cat send_dingding.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">groupfiles=&quot;/home/monitor/dingding/groupkey&quot;</span><br><span class="line">helpfiles=&quot;/home/monitor/dingding/helpkey&quot;</span><br><span class="line">Date=`date +%Y-%m-%d\ %H:%M:%S`</span><br><span class="line">url=&quot;https://oapi.dingtalk.com/robot/send?access_token=c2123f81820fccfadfc47bbd629d26e7613ae49f1a053edc6e81f5864c550e30&quot;</span><br><span class="line">group=(&quot;a:xx;&quot;</span><br><span class="line">       &quot;b:xx;&quot;</span><br><span class="line">       &quot;c:xx;&quot;)</span><br><span class="line">opshelp=(&quot;a:xx;&quot;</span><br><span class="line">         &quot;b:xx;&quot;</span><br><span class="line">         &quot;c:xx;&quot;)</span><br><span class="line">groupkey=`sed -n &quot;1p&quot; $groupfiles`</span><br><span class="line">helpkeys=`awk &apos;NR==1&#123;print $1&#125;&apos; $helpfiles`</span><br><span class="line">helpkey=`awk &apos;NR==1&#123;print $2&#125;&apos; $helpfiles`</span><br><span class="line"># 每日值班人</span><br><span class="line">for crew in $&#123;group[@]&#125;;do</span><br><span class="line">    if echo $crew | grep -q $groupkey ;then</span><br><span class="line">        values=`echo $crew | awk -F&apos;:&apos; &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">        onduty_mess=&quot;今日运维值班人: [ $values ]&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"># 修改缓存文件内的运维值班人员 key , 使得下次人员自动更换</span><br><span class="line">if [ $groupkey == &quot;a&quot; ];then</span><br><span class="line">    echo &quot;b&quot; &gt; $groupfiles</span><br><span class="line">elif [ $groupkey == &quot;b&quot; ];then</span><br><span class="line">    echo &quot;c&quot; &gt; $groupfiles</span><br><span class="line">elif [ $groupkey == &quot;c&quot; ];then</span><br><span class="line">    echo &quot;a&quot; &gt; $groupfiles</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改缓存文件内的运维上线人员 key , 使得下次人员自动更换</span><br><span class="line">if [ $helpkeys == 7 ];then</span><br><span class="line">    helpsum=1</span><br><span class="line">else</span><br><span class="line">    helpsum=$(($helpkeys+1))</span><br><span class="line">fi</span><br><span class="line">if [ $helpsum == 1 ];then</span><br><span class="line">    if [ $helpkey == &quot;a&quot; ];then</span><br><span class="line">        echo &quot;$helpsum b&quot; &gt; $helpfiles</span><br><span class="line">    elif [ $helpkey == &quot;b&quot; ];then</span><br><span class="line">        echo &quot;$helpsum c&quot; &gt; $helpfiles</span><br><span class="line">    elif [ $helpkey == &quot;c&quot; ];then</span><br><span class="line">        echo &quot;$helpsum a&quot; &gt; $helpfiles</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    echo &quot;$helpsum $helpkey&quot; &gt; $helpfiles</span><br><span class="line">fi</span><br><span class="line"># 每周支持上线人</span><br><span class="line">for opsdit in $&#123;opshelp[@]&#125;;do</span><br><span class="line">    if [ $helpsum == 1 ];then</span><br><span class="line">        helpkey=`awk &apos;NR==1&#123;print $2&#125;&apos; $helpfiles`</span><br><span class="line">    fi</span><br><span class="line">    if echo $opsdit | grep -q $helpkey ;then</span><br><span class="line">        helpvalues=`echo $opsdit | awk -F&apos;:&apos; &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">        help_mess=&quot;本周版本上线运维支持: [ $helpvalues ]&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">curl -XPOST -s -L -H &quot;Content-Type:application/json&quot; -H &quot;charset:utf-8&quot; $url -d &quot;</span><br><span class="line">        &#123;</span><br><span class="line">        \&quot;msgtype\&quot;: \&quot;text\&quot;, </span><br><span class="line">        \&quot;text\&quot;: &#123;</span><br><span class="line">                 \&quot;content\&quot;: \&quot;大家好~\n$onduty_mess\n$help_mess\&quot;</span><br><span class="line">                 &#125;</span><br><span class="line">    &#125;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;每天运维人员都需要去做些基础服务，就需要值班人员去轮班解决，现在需要写一个定时发送值班人员的脚本&lt;/p&gt;
&lt;h1 id=&quot;前提&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="linux" scheme="https://shenshengkun.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>docker存储驱动</title>
    <link href="https://shenshengkun.github.io/2019/04/18/%E8%99%9A%E6%8B%9F%E5%8C%96/docker%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8/"/>
    <id>https://shenshengkun.github.io/2019/04/18/虚拟化/docker存储驱动/</id>
    <published>2019-04-18T07:48:50.000Z</published>
    <updated>2019-04-18T07:54:14.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Docker最开始采用AUFS作为文件系统，也得益于AUFS分层的概念，实现了多个Container可以共享同一个image。但由于AUFS未并入Linux内核，且只支持Ubuntu，考虑到兼容性问题，在Docker 0.7版本中引入了存储驱动。</p><p>目前，Docker支持的存储驱动：aufs，devicemapper，btrfs，zfs，overlay和overlay2。</p><p>就如Docker官网上说的，没有单一的驱动适合所有的应用场景，要根据不同的场景选择合适的存储驱动，才能有效的提高Docker的性能。如何选择适合的存储驱动，要先了解存储驱动原理才能更好的判断</p><h1 id="写时复制（CoW）"><a href="#写时复制（CoW）" class="headerlink" title="写时复制（CoW）"></a>写时复制（CoW）</h1><p>所有驱动都用到的技术——写时复制（CoW）。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景。比如基于一个image启动多个Container，如果为每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用CoW可以有效的提高磁盘的利用率。</p><h1 id="用时分配（allocate-on-demand）"><a href="#用时分配（allocate-on-demand）" class="headerlink" title="用时分配（allocate-on-demand）"></a>用时分配（allocate-on-demand）</h1><p>而写时分配是用在原本没有这个文件的场景，只有在要新写入一个文件时才分配空间，这样可以提高存储资源的利用率。比如启动一个容器，并不会为这个容器预分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。</p><h1 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h1><p>AUFS（AnotherUnionFS）是一种Union FS，是文件级的存储驱动。AUFS能透明覆盖一或多个现有文件系统的层状文件系统，把多层合并成文件系统的单层表示。简单来说就是支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件系统可以一层一层地叠加修改文件。无论底下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改一个文件时，AUFS创建该文件的一个副本，使用CoW将文件从只读层复制到可写层进行修改，结果也保存在可写层。在Docker中，底下的只读层就是image，可写层就是Container。结构如下图所示：</p><p><img src="https://shenshengkun.github.io/images/存储驱动1.png" alt=""></p><h1 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h1><p>Overlay是Linux内核3.18后支持的，也是一种Union FS，和AUFS的多层不同的是Overlay只有两层：一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层。当需要修改一个文件时，使用CoW将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。在Docker中，底下的只读层就是image，可写层就是Container。结构如下图所示：</p><p><img src="https://shenshengkun.github.io/images/存储驱动2.png" alt=""></p><h1 id="Device-mapper"><a href="#Device-mapper" class="headerlink" title="Device mapper"></a>Device mapper</h1><p>Device mapper是Linux内核2.6.9后支持的，提供的一种从逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便的根据自己的需要制定实现存储资源的管理策略。前面讲的AUFS和OverlayFS都是文件级存储，而Device mapper是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照，并不有为容器分配空间。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据，这个叫用时分配。当要修改已有文件时，再使用CoW为容器快照分配块空间，将要修改的数据复制到在容器快照中新的块里再进行修改。Device mapper 驱动默认会创建一个100G的文件包含镜像和容器。每一个容器被限制在10G大小的卷内，可以自己配置调整。结构如下图所示：</p><p><img src="https://shenshengkun.github.io/images/存储驱动3.png" alt=""></p><h1 id="Btrfs"><a href="#Btrfs" class="headerlink" title="Btrfs"></a>Btrfs</h1><p>Btrfs被称为下一代写时复制文件系统，并入Linux内核，也是文件级级存储，但可以像Device mapper一直接操作底层设备。Btrfs把文件系统的一部分配置为一个完整的子文件系统，称之为subvolume 。那么采用 subvolume，一个大的文件系统可以被划分为多个子文件系统，这些子文件系统共享底层的设备空间，在需要磁盘空间时便从底层设备中分配，类似应用程序调用 malloc()分配内存一样。为了灵活利用设备空间，Btrfs 将磁盘空间划分为多个chunk 。每个chunk可以使用不同的磁盘空间分配策略。比如某些chunk只存放metadata，某些chunk只存放数据。这种模型有很多优点，比如Btrfs支持动态添加设备。用户在系统中增加新的磁盘之后，可以使用Btrfs的命令将该设备添加到文件系统中。Btrfs把一个大的文件系统当成一个资源池，配置成多个完整的子文件系统，还可以往资源池里加新的子文件系统，而基础镜像则是子文件系统的快照，每个子镜像和容器都有自己的快照，这些快照则都是subvolume的快照。</p><p><img src="https://shenshengkun.github.io/images/存储驱动4.png" alt=""></p><p>当写入一个新文件时，为在容器的快照里为其分配一个新的数据块，文件写在这个空间里，这个叫用时分配。而当要修改已有文件时，使用CoW复制分配一个新的原始数据和快照，在这个新分配的空间变更数据，变结束再更新相关的数据结构指向新子文件系统和快照，原来的原始数据和快照没有指针指向，被覆盖。</p><h1 id="ZFS"><a href="#ZFS" class="headerlink" title="ZFS"></a>ZFS</h1><p>ZFS 文件系统是一个革命性的全新的文件系统，它从根本上改变了文件系统的管理方式，ZFS 完全抛弃了“卷管理”，不再创建虚拟的卷，而是把所有设备集中到一个存储池中来进行管理，用“存储池”的概念来管理物理存储空间。过去，文件系统都是构建在物理设备之上的。为了管理这些物理设备，并为数据提供冗余，“卷管理”的概念提供了一个单设备的映像。而ZFS创建在虚拟的，被称为“zpools”的存储池之上。每个存储池由若干虚拟设备（virtual devices，vdevs）组成。这些虚拟设备可以是原始磁盘，也可能是一个RAID1镜像设备，或是非标准RAID等级的多磁盘组。于是zpool上的文件系统可以使用这些虚拟设备的总存储容量。</p><p><img src="https://shenshengkun.github.io/images/存储驱动5.png" alt=""></p><p>下面看一下在Docker里ZFS的使用。首先从zpool里分配一个ZFS文件系统给镜像的基础层，而其他镜像层则是这个ZFS文件系统快照的克隆，快照是只读的，而克隆是可写的，当容器启动时则在镜像的最顶层生成一个可写层。如下图所示：</p><p><img src="https://shenshengkun.github.io/images/存储驱动6.png" alt=""></p><p>当要写一个新文件时，使用按需分配，一个新的数据快从zpool里生成，新的数据写入这个块，而这个新空间存于容器（ZFS的克隆）里。<br>当要修改一个已存在的文件时，使用写时复制，分配一个新空间并把原始数据复制到新空间完成修改。</p><h1 id="overlay2"><a href="#overlay2" class="headerlink" title="overlay2"></a>overlay2</h1><p>OverlayFS将Linux主机上的两个单独目录分层，并将它们显示为一个目录。这些目录称为层，统一过程称为联合安装。OverlayFS指向一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层。用统一视图将整合的目录公开。</p><p>该overlay2驱动程序原生支持多达128个较低的OverlayFS层。此功能为与层相关的Docker命令（如docker build和docker commit）提供了更好的性能，并且大量减少了inode的消耗。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th>存储驱动</th><th>简介</th><th>优点</th><th>缺点</th><th>存储级别</th><th>场景</th></tr></thead><tbody><tr><td>aufs</td><td>最古老的联合文件系统，没有被内核收录，只支持ubuntu</td><td>允许容器共享可执行文件和共享内存，历史悠久，使用广泛</td><td>会导致一些严重的内核崩溃，多层，在CoW时如果文件大且在低层会慢一些</td><td>文件级存储</td><td>大并发少IO</td></tr><tr><td>devicemapper</td><td>自动创建的稀疏文件的loop挂载后，自动创建块设备</td><td>精简配置和写时复制（CoW）快照技术，只复制修改的块</td><td>不支持共享存储，多个容器读同一个文件复制多份，容器启停可能会有磁盘溢出</td><td>块级存储</td><td>IO密集场景</td></tr><tr><td>btrfs</td><td>和devicemapper一样操作底层设备</td><td>非常快，支持动态添加设备</td><td>设备之间不共享可执行内存</td><td>文件级块存储</td><td>不适合高密度容器的paas平台</td></tr><tr><td>zfs</td><td></td><td>支持多个容器共享一个缓存块，适合大内存场景</td><td>CoW使碎片化问题更严重，文件在磁盘上物理地址不连续，顺序读性能差</td><td>所有设备集中到一个共享池里面进行管理</td><td>Paas平台和高密度场景</td></tr><tr><td>overlay</td><td>联合文件系统，内核版本3.18.0开始合并到内核中，只有两层</td><td>非常快速的联合文件系统。还支持页面缓存共享，这意味着访问同一文件的多个容器可以共享单个页面缓存条目（或条目），如aufs一样高效</td><td>会导致过多的inode消耗，不管修改内容大小都会复制整个文件，修改大文件消耗时间长</td><td>文件级存储</td><td>大并发少IO</td></tr><tr><td>overlay2</td><td></td><td>内核版本4.0有附加功能，避免过多的inode消耗</td><td></td><td>文件级存储</td><td>大并发少IO</td></tr></tbody></table><h2 id="AUFS-VS-Overlay"><a href="#AUFS-VS-Overlay" class="headerlink" title="AUFS VS Overlay"></a>AUFS VS Overlay</h2><p>AUFS和Overlay都是联合文件系统，但AUFS有多层，而Overlay只有两层，所以在做写时复制操作时，如果文件比较大且存在比较低的层，则AUSF可能会慢一些。而且Overlay并入了linux kernel mainline，AUFS没有，所以可能会比AUFS快。但Overlay还太年轻，要谨慎在生产使用。而AUFS做为docker的第一个存储驱动，已经有很长的历史，比较的稳定，且在大量的生产中实践过，有较强的社区支持。目前开源的DC/OS指定使用Overlay。</p><h2 id="Overlay-VS-Device-mapper"><a href="#Overlay-VS-Device-mapper" class="headerlink" title="Overlay VS Device mapper"></a>Overlay VS Device mapper</h2><p>Overlay是文件级存储，Device mapper是块级存储，当文件特别大而修改的内容很小，Overlay不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件要消耗更多的时间，而块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件，在这种场景下，显然device mapper要快一些。因为块级的是直接访问逻辑盘，适合IO密集的场景。而对于程序内部复杂，大并发但少IO的场景，Overlay的性能相对要强一些。</p><h2 id="Device-mapper-VS-Btrfs-Driver-VS-ZFS"><a href="#Device-mapper-VS-Btrfs-Driver-VS-ZFS" class="headerlink" title="Device mapper VS Btrfs Driver VS ZFS"></a>Device mapper VS Btrfs Driver VS ZFS</h2><p>Device mapper和Btrfs都是直接对块操作，都不支持共享存储，表示当有多个容器读同一个文件时，需要生活多个复本，所以这种存储驱动不适合在高密度容器的PaaS平台上使用。而且在很多容器启停的情况下可能会导致磁盘溢出，造成主机不能工作。Device mapper不建议在生产使用。Btrfs在docker build可以很高效。</p><p>ZFS最初是为拥有大量内存的Salaris服务器设计的，所在在使用时对内存会有影响，适合内存大的环境。ZFS的COW使碎片化问题更加严重，对于顺序写生成的大文件，如果以后随机的对其中的一部分进行了更改，那么这个文件在硬盘上的物理地址就变得不再连续，未来的顺序读会变得性能比较差。ZFS支持多个容器共享一个缓存块，适合PaaS和高密度的用户场景。</p><h1 id="IO性能对比"><a href="#IO性能对比" class="headerlink" title="IO性能对比"></a>IO性能对比</h1><ul><li>测试工具：IOzone（是一个文件系统的benchmark工具，可以测试不同的操作系统中文件系统的读写性能）</li><li>测试场景：从4K到1G文件的顺序和随机IO性能</li><li>测试方法：基于不同的存储驱动启动容器，在容器内安装IOzone，执行命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./iozone -a -n 4k -g 1g -i 0 -i 1 -i 2 -f /root/test.rar -Rb ./iozone.xls</span><br></pre></td></tr></table></figure><h2 id="测试项的定义和解释"><a href="#测试项的定义和解释" class="headerlink" title="测试项的定义和解释"></a>测试项的定义和解释</h2><ul><li>Write：测试向一个新文件写入的性能。</li><li>Re-write：测试向一个已存在的文件写入的性能。</li><li>Read：测试读一个已存在的文件的性能。</li><li>Re-Read：测试读一个最近读过的文件的性能。</li><li>Random Read：测试读一个文件中的随机偏移量的性能。</li><li>Random Write：测试写一个文件中的随机偏移量的性能。</li></ul><h2 id="通过以上的性能数据可以看到："><a href="#通过以上的性能数据可以看到：" class="headerlink" title="通过以上的性能数据可以看到："></a>通过以上的性能数据可以看到：</h2><p>AUFS在读的方面性能相比Overlay要差一些，但在写的方面性能比Overlay要好。<br>device mapper在512M以上文件的读写性能都非常的差，但在512M以下的文件读写性能都比较好。<br>btrfs在512M以上的文件读写性能都非常好，但在512M以下的文件读写性能相比其他的存储驱动都比较差。<br>ZFS整体的读写性能相比其他的存储驱动都要差一些。 简单的测试了一些数据，对测试出来的数据原理还需要进一步的解析。</p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="devicemapper"><a href="#devicemapper" class="headerlink" title="devicemapper"></a>devicemapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;storage-driver&quot;: &quot;devicemapper&quot;,</span><br><span class="line">    &quot;storage-opts&quot;: [</span><br><span class="line">      &quot;dm.thinpooldev=/dev/mapper/thin-pool&quot;,</span><br><span class="line">      &quot;dm.use_deferred_deletion=true&quot;,</span><br><span class="line">      &quot;dm.use_deferred_removal=true&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="overlay2-1"><a href="#overlay2-1" class="headerlink" title="overlay2"></a>overlay2</h2><p>overlay2需要使用4.0以上版本的内核，如果使用的是RHEL或CentOS，需要3.10.0-514以上版本的内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看是否开启overlay</span><br><span class="line">lsmod |grep over</span><br><span class="line"></span><br><span class="line"># 开启overlay支持</span><br><span class="line">modprobe overlay</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">    &quot;storage-opts&quot;: [</span><br><span class="line">        &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">        #&quot;overlay2.size=1G&quot;, # xfs文件系统</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;Docker最开始采用AUFS作为文件系统，也得益于AUFS分层的概念，实现了多个Container可以共享同一个image。但由于AUFS
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://shenshengkun.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes节点资源耗尽状态的处理</title>
    <link href="https://shenshengkun.github.io/2019/04/18/k8s/Kubernetes%E8%8A%82%E7%82%B9%E8%B5%84%E6%BA%90%E8%80%97%E5%B0%BD%E7%8A%B6%E6%80%81%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://shenshengkun.github.io/2019/04/18/k8s/Kubernetes节点资源耗尽状态的处理/</id>
    <published>2019-04-18T06:20:01.000Z</published>
    <updated>2019-04-18T06:35:22.307Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现测试环境的k8s集群，总有node利用不上，pod漂移过去之后，启动不了，故仔细排查了一下缘由！</p><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master35 scripts]# ./list_pod.sh | grep imis</span><br><span class="line">imis-866d46c464-nvz4b                       0/1       ContainerCreating   0          3m        &lt;none&gt;          node149</span><br><span class="line"></span><br><span class="line">发现有的pod无法启动，刚开始describe查了下原因，看到，一直在拉镜像状态中，但是3分钟了，也不至于镜像拉不下来啊！</span><br><span class="line"></span><br><span class="line">查看了下node149的状态，发现</span><br><span class="line">Warning: “EvictionThresholdMet Attempting to reclaim nodefs”</span><br><span class="line">发现大概应该是由于磁盘原因造成的，也可以看下kubelet日志，也会报这个类似的错误</span><br></pre></td></tr></table></figure><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node149 ~]# df -h</span><br><span class="line">Filesystem                Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/cl-root        36G  30G   6G  86% /</span><br><span class="line">devtmpfs                  7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs                     7.8G     0  7.8G   0% /dev/shm</span><br><span class="line">tmpfs                     7.8G  9.3M  7.8G   1% /run</span><br><span class="line">tmpfs                     7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1                1014M  186M  829M  19% /boot</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于这是测试环境，所以docker的目录，默认在/var/lib/docker，没有单独挂载别的目录，这样的话，也没加定时任务清理磁盘，/ 磁盘就会越来越满，现在看是用了86%</span><br></pre></td></tr></table></figure><p>由于某些原因，我们的那个portal pod必须运行于该node上（通过<a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/" target="_blank" rel="noopener">nodeSelector</a>选定node的方式）。在无法扩充根分区size的情况下，为了临时恢复pod运行，我们只能进一步“压榨”node了。于是我们的思路是：通过调整node的eviction threshold值来让node恢复healthy。 </p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>每个node上的kubelet都负责定期采集资源占用数据，并与预设的 threshold值进行比对，如果超过 threshold值，kubelet就会尝试杀掉一些Pod以回收相关资源，对Node进行保护。kubelet关注的资源指标threshold大约有如下几种： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- memory.available</span><br><span class="line">- nodefs.available</span><br><span class="line">- nodefs.inodesFree</span><br><span class="line">- imagefs.available</span><br><span class="line">- imagefs.inodesFree</span><br></pre></td></tr></table></figure><p>每种threshold又分为eviction-soft和eviction-hard两组值。soft和hard的区别在于前者在到达threshold值时会给pod一段时间优雅退出，而后者则崇尚“暴力”，直接杀掉pod，没有任何优雅退出的机会。这里还要提一下nodefs和imagefs的区别： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodefs: 指node自身的存储，存储daemon的运行日志等，一般指root分区/；</span><br><span class="line">imagefs: 指docker daemon用于存储image和容器可写层(writable layer)的磁盘；</span><br></pre></td></tr></table></figure><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>我们需要为kubelet重新设定nodefs.available的threshold值。怎么做呢？</p><p><a href="https://kubernetes.io/docs/admin/kubelet/" target="_blank" rel="noopener">kubelet</a>是运行于每个kubernetes node上的daemon，它在system boot时由<a href="http://en.wikipedia.org/wiki/Systemd" target="_blank" rel="noopener">systemd</a>拉起:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@master35 ~# ps -ef|grep kubelet</span><br><span class="line">root      5718  5695  0 16:38 pts/3    00:00:00 grep --color=auto kubelet</span><br><span class="line">root     13640     1  4 10:25 ?        00:17:25 /usr/bin/kubelet --kubeconfig=/etc/kubernetes/kubelet.conf --require-kubeconfig=true --pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true --network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --cluster-dns=10.96.0.10 --cluster-domain=cluster.local --authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt --cadvisor-port=0</span><br></pre></td></tr></table></figure><p>查看一下kubelet service的状态： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master35 scripts]# systemctl status kubelet               </span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /etc/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: active (running) since Thu 2018-07-19 21:04:35 CST; 8 months 29 days ago</span><br><span class="line">     Docs: http://kubernetes.io/docs/</span><br><span class="line"> Main PID: 1921 (kubelet)</span><br><span class="line">    Tasks: 19</span><br><span class="line">   Memory: 54.9M</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line">           └─1921 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --pod-manifest-path=...</span><br><span class="line"></span><br><span class="line">Apr 14 09:26:16 master35 kubelet[1921]: W0414 09:26:16.673359    1921 reflector.go:341] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: watch o...(56737582)</span><br><span class="line">Apr 15 06:36:48 master35 kubelet[1921]: W0415 06:36:48.938194    1921 reflector.go:341] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: watch o...(56940044)</span><br></pre></td></tr></table></figure><p>我们定义一个新的Environment var，比如就叫：KUBELET_EVICTION_POLICY_ARGS 在/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Environment=&quot;KUBELET_EVICTION_POLICY_ARGS=--eviction-hard=nodefs.available&lt;5%&quot;</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_EXTRA_ARGS $KUBELET_EVICTION_POLICY_ARGS</span><br></pre></td></tr></table></figure><p>这样控制，node的磁盘策略为&lt;5%的硬盘就可以用，不像之前默认的15%就用不了了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近发现测试环境的k8s集群，总有node利用不上，pod漂移过去之后，启动不了，故仔细排查了一下缘由！&lt;/p&gt;
&lt;h1 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
      <category term="k8s" scheme="https://shenshengkun.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>wordpress快速安装</title>
    <link href="https://shenshengkun.github.io/2019/04/16/%E4%B8%AD%E9%97%B4%E4%BB%B6/wordpress%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    <id>https://shenshengkun.github.io/2019/04/16/中间件/wordpress快速安装/</id>
    <published>2019-04-16T08:18:50.000Z</published>
    <updated>2019-04-16T08:34:51.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yum安装lnmp环境"><a href="#yum安装lnmp环境" class="headerlink" title="yum安装lnmp环境"></a>yum安装lnmp环境</h1><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置阿里云 yum 仓库</span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">$ yum clean all</span><br><span class="line">$ yum makecache</span><br><span class="line"></span><br><span class="line"># 配置时间同步</span><br><span class="line">$ vim /etc/crontab</span><br><span class="line">00 00 * * * root /sbin/ntpdate ntp.aliyun.com &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><h2 id="配置-nginx-repo"><a href="#配置-nginx-repo" class="headerlink" title="配置 nginx repo"></a>配置 nginx repo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/nginx.repo</span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure><h2 id="yum安装lnmp"><a href="#yum安装lnmp" class="headerlink" title="yum安装lnmp"></a>yum安装lnmp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install nginx mariadb-server php php-bcmath php-fpm php-gd php-json php-mbstring php-mcrypt php-mysqlnd php-opcache php-pdo php-pdo_dblib php-pgsql php-recode php-snmp php-soap php-xml php-pecl-zip</span><br></pre></td></tr></table></figure><h2 id="启动php和mariadb"><a href="#启动php和mariadb" class="headerlink" title="启动php和mariadb"></a>启动php和mariadb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动 PHP-FPM</span><br><span class="line">$ systemctl enable php-fpm</span><br><span class="line">$ systemctl start php-fpm</span><br><span class="line"># 启动 mariadb</span><br><span class="line">$ systemctl enable mariadb.service</span><br><span class="line">$ systemctl start mariadb.service</span><br></pre></td></tr></table></figure><h2 id="创建-wordpress-数据库"><a href="#创建-wordpress-数据库" class="headerlink" title="创建 wordpress 数据库"></a>创建 wordpress 数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库，默认密码为空</span><br><span class="line">mysql -uroot -p</span><br><span class="line"># 创建wordpress数据库名为 wp</span><br><span class="line">create database wp;</span><br><span class="line"># 创建数据库用户，用户名: blog 密码：123456</span><br><span class="line">grant all privileges on wp.* to &apos;blog&apos;@&apos;127.0.0.1&apos; identified by &apos;123456&apos;;</span><br><span class="line"># 刷新授权</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="配置nginx虚拟主机"><a href="#配置nginx虚拟主机" class="headerlink" title="配置nginx虚拟主机"></a>配置nginx虚拟主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf.d/blog.conf</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name 10.100.4.169;</span><br><span class="line">  index index.html index.php;</span><br><span class="line">  # 访问日志目录</span><br><span class="line">  access_log /var/log/nginx/blog_access.log main;</span><br><span class="line">  # 网站根目录</span><br><span class="line">  root /data/www;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root /data/www;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置wordpress"><a href="#配置wordpress" class="headerlink" title="配置wordpress"></a>配置wordpress</h1><h2 id="下载最新版wordpress"><a href="#下载最新版wordpress" class="headerlink" title="下载最新版wordpress"></a>下载最新版wordpress</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置wordpress连接数据库"><a href="#配置wordpress连接数据库" class="headerlink" title="配置wordpress连接数据库"></a>配置wordpress连接数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ tar xf latest-zh_CN.tar.gz</span><br><span class="line">$ mv wordpress/ /data/www</span><br><span class="line">$ cd /data/www/</span><br><span class="line">$ cp wp-config-sample.php wp-config.php</span><br><span class="line">$ vim wp-config.php</span><br><span class="line">// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** //</span><br><span class="line">/** WordPress数据库的名称 */</span><br><span class="line">define(&apos;DB_NAME&apos;, &apos;wp&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(&apos;DB_USER&apos;, &apos;blog&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(&apos;DB_PASSWORD&apos;, &apos;123456&apos;);</span><br><span class="line"></span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(&apos;DB_HOST&apos;, &apos;127.0.0.1&apos;);</span><br><span class="line"></span><br><span class="line">/** 创建数据表时默认的文字编码 */</span><br><span class="line">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</span><br><span class="line"></span><br><span class="line">/** 数据库整理类型。如不确定请勿更改 */</span><br><span class="line">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</span><br></pre></td></tr></table></figure><h2 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable nginx</span><br><span class="line">$ systemctl start nginx</span><br><span class="line">$ ps -ef|grep nginx</span><br></pre></td></tr></table></figure><h2 id="访问wordpress"><a href="#访问wordpress" class="headerlink" title="访问wordpress"></a>访问wordpress</h2><p>nginx 启动后我们就可以在浏览器通过 IP 地址访问 WordPress 了，首先会让我们给博客起个名字，名设置管理员的账号密码，点击安装 WordPress 就完成了。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yum安装lnmp环境&quot;&gt;&lt;a href=&quot;#yum安装lnmp环境&quot; class=&quot;headerlink&quot; title=&quot;yum安装lnmp环境&quot;&gt;&lt;/a&gt;yum安装lnmp环境&lt;/h1&gt;&lt;h2 id=&quot;安装前准备&quot;&gt;&lt;a href=&quot;#安装前准备&quot; class
      
    
    </summary>
    
      <category term="中间件" scheme="https://shenshengkun.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>多级缓存</title>
    <link href="https://shenshengkun.github.io/2019/04/15/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://shenshengkun.github.io/2019/04/15/中间件/多级缓存/</id>
    <published>2019-04-15T05:59:50.000Z</published>
    <updated>2019-04-15T06:37:04.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每一级缓存的意义"><a href="#每一级缓存的意义" class="headerlink" title="每一级缓存的意义"></a>每一级缓存的意义</h1><p><strong>时效性高的数据：采取DB和redis缓存双写方案</strong></p><p><strong>时效性不高的数据：采取nginx本地缓存+redis分布式缓存+tomcat堆缓存的多级缓存架构</strong></p><p>a: nginx本地缓存，抗的是热数据的高并发访问。利用nginx本地缓存，将热数据锁定在nginx的本地缓存内，那么对这些热数据的大量访问，就直接走nginx就可以，不需要走后续的各种网络开销了。</p><p>b: redis分布式大规模缓存，抗的是很高的离散访问，支撑海量的数据，高并发的访问，高可用的服务。最完整的数据和缓存。</p><p>c:  tomcat jvm堆内存缓存，主要是抗redis大规模灾难的，如果redis出现了大规模的宕机，导致nginx大量流量直接涌入数据生产服务，那么最后的tomcat堆内存缓存至少可以再抗一下，不至于让数据库直接裸奔， 同时tomcat jvm堆内存缓存，也可以抗住redis没有cache住的最后那少量的部分缓存。</p><p><img src="https://shenshengkun.github.io/images/duojihuancun1.png" alt=""></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><p>通过master的水平扩容，来横向扩展读写吞吐量，还有支撑更多的海量数据</p><p>redis cluster 高可用性：redis cluster 提供主备切换。slave做master的热备，一旦master故障。slave提升为master，对外提供服务，保证集群的高可用性。并且，当master恢复后，会作为 slave加入到集群中。</p><h2 id="redis-cluster水平扩容"><a href="#redis-cluster水平扩容" class="headerlink" title="redis cluster水平扩容"></a>redis cluster水平扩容</h2><p>master的水平扩容，来横向扩展读写吞吐量，还有支撑更多的海量数据</p><h2 id="slave-自动迁移"><a href="#slave-自动迁移" class="headerlink" title="slave 自动迁移"></a>slave 自动迁移</h2><p>为redis cluster 添加冗余slave</p><h2 id="redis性能（需根据机器配置测试）"><a href="#redis性能（需根据机器配置测试）" class="headerlink" title="redis性能（需根据机器配置测试）"></a>redis性能（需根据机器配置测试）</h2><p>  redis单机，读吞吐是5w/s，写吞吐2w/s</p><p>  扩展redis更多master，那么如果有5台master，不就读吞吐可以达到总量25w/s QPS，写可以达到10w/s QPS</p><p>  redis单机，内存，6G-8G，内存不易过大fork类操作的时候很耗时，会导致请求延时的问题。扩容到5台master，能支撑的总的缓存数据量就是30G</p><h1 id="Cache-Aside模式"><a href="#Cache-Aside模式" class="headerlink" title="Cache Aside模式"></a>Cache Aside模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）读的时候，先读缓存，缓存没有的话，那么就读数据库，然后取出数据后放入缓存，同时返回响应</span><br><span class="line">（2）更新的时候，先删除缓存，然后再更新数据库</span><br></pre></td></tr></table></figure><h1 id="DB和缓存双写不一致问题以及解决方案"><a href="#DB和缓存双写不一致问题以及解决方案" class="headerlink" title="DB和缓存双写不一致问题以及解决方案"></a>DB和缓存双写不一致问题以及解决方案</h1><p> <strong>缓存不一致场景一：</strong> </p><p><img src="https://shenshengkun.github.io/images/duojihuancun2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  解决思路：</span><br><span class="line"></span><br><span class="line">先删除缓存，再修改数据库，如果删除缓存成功了，如果修改数据库失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致</span><br><span class="line">因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中</span><br></pre></td></tr></table></figure><p> <strong>缓存不一致场景二：</strong> </p><p><img src="https://shenshengkun.github.io/images/duojihuancun3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 解决思路：</span><br><span class="line"> a：更新数据的时候，根据数据的唯一标识，将操作路由之后，发送到一个jvm内部的队列中</span><br><span class="line"> b:读取数据的时候，如果发现数据不在缓存中，那么将重新读取数据+更新缓存的操作，根据唯一标识路由之后，也发送同一个jvm内部的队列中</span><br><span class="line"> c:一个队列对应一个工作线程</span><br><span class="line"> d:每个工作线程串行拿到对应的操作，然后一条一条的执行</span><br><span class="line">这样的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还没完成更新</span><br><span class="line">此时如果一个读请求过来，读到了空的缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成</span><br><span class="line"> e: 多个更新缓存请求处理：这里有一个优化点，一个队列中，其实多个更新缓存请求串在一起是没意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的请求了，那么就不用再放个更新请求操作进去了，直接等待前面的更新操作请求完成即可</span><br><span class="line">待那个队列对应的工作线程完成了上一个操作的数据库的修改之后，才会去执行下一个操作，也就是缓存更新的操作，此时会从数据库中读取最新的值，然后写入缓存中</span><br><span class="line">如果请求还在等待时间范围内，不断轮询发现可以取到值了，那么就直接返回; 如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的旧值</span><br><span class="line"> f:多个读请求，进行读请求过滤：对一个商品的库存的数据库更新操作已经在内存队列中了</span><br><span class="line">然后对这个商品的库存的读取操作，要求读取数据库的库存数据，然后更新到缓存中，多个读</span><br><span class="line">这多个读，其实只要有一个读请求操作压到队列里就可以了</span><br><span class="line">其他的读操作，全部都wait那个读请求的操作，刷新缓存，就可以读到缓存中的最新数据了</span><br><span class="line">如果读请求发现redis缓存中没有数据，就会发送读请求给库存服务，但是此时缓存中为空，可能是因为写请求先删除了缓存，也可能是数据库里压根儿没这条数据</span><br><span class="line">如果是数据库中压根儿没这条数据的场景，那么就不应该将读请求操作给压入队列中，而是直接返回空就可以了</span><br></pre></td></tr></table></figure><h1 id="大value缓存的全量更新效率低下问题"><a href="#大value缓存的全量更新效率低下问题" class="headerlink" title="大value缓存的全量更新效率低下问题"></a>大value缓存的全量更新效率低下问题</h1><p>缓存数据的维度化拆分 </p><h1 id="缓存数据生产服务工作流程"><a href="#缓存数据生产服务工作流程" class="headerlink" title="缓存数据生产服务工作流程"></a>缓存数据生产服务工作流程</h1><p><img src="https://shenshengkun.github.io/images/duojihuancun4.png" alt=""></p><p>（1）监听多个kafka topic，每个kafka topic对应一个服务（简化一下，监听一个kafka topic）</p><p>（2）如果一个服务发生了数据变更，那么就发送一个消息到kafka topic中</p><p>（3）缓存数据生产服务监听到了消息以后，就发送请求到对应的服务中调用接口以及拉取数据，此时是从mysql中查询的</p><p>（4）缓存数据生产服务拉取到了数据之后，会将数据在本地缓存中写入一份，就是ehcache中</p><p>​          同时会将数据在redis中写入一份</p><h1 id="缓存并发重建冲突解决方案"><a href="#缓存并发重建冲突解决方案" class="headerlink" title="缓存并发重建冲突解决方案"></a>缓存并发重建冲突解决方案</h1><p> 重建缓存：比如数据在所有的缓存中都不存在了（LRU算法弄掉了），就需要重新查询数据写入缓存，重建缓存 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">缓存重建存在的问题一：</span><br><span class="line">缓存数据生产服务在多个机器节点上部署了多个实例</span><br><span class="line"></span><br><span class="line">        若没有缓存数据。12:00的时候发来一个读请求  12:01发来一个读请求（此时12:00的读请求由于网络延迟还未执行完）。12:01请求比12:00的请求执行速度快。更新了生产服务的数据并将数据写入缓存。写完后。12:00的请求将数据写入了缓存。那么此时生产服务的最新数据是12：01的，但是缓存中是服务数据是12:00的。数据不一致。</span><br><span class="line"></span><br><span class="line">解决思路：对请求的数据ID 进行hash，让对同一个数据的请求落在同一个服务实例上</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">缓存重建存在的问题二：</span><br><span class="line"></span><br><span class="line">生产服务发送的变更消息到kafka。由于问题一解决方案中的hash算法与kafka分区策略不一致。数据变更的消息所到的缓存服务实例，跟请求分发到的那个缓存服务实例也许就不在一台机器上了</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">（1）变更缓存重建以及空缓存请求重建，更新redis之前，都需要先获取对应商品id的分布式锁</span><br><span class="line">（2）拿到分布式锁之后，需要根据时间版本去比较一下，如果自己的版本新于redis中的版本，那么就更新，否则就不更新</span><br><span class="line">（3）如果拿不到分布式锁，那么就等待，不断轮询等待，直到自己获取到分布式的锁</span><br></pre></td></tr></table></figure><h1 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">缓存雪崩产生场景：</span><br><span class="line"></span><br><span class="line">1、redis集群彻底崩溃</span><br><span class="line">2、缓存服务大量对redis的请求hang住，占用资源</span><br><span class="line">3、缓存服务大量的请求打到源头服务去查询mysql，直接打死mysql</span><br><span class="line">4、源头服务因为mysql被打死也崩溃，对源服务的请求也hang住，占用资源</span><br><span class="line">5、缓存服务大量的资源全部耗费在访问redis和源服务无果，最后自己被拖死，无法提供服务</span><br><span class="line">6、nginx无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供</span><br><span class="line">解决思路</span><br><span class="line">       1、对redis访问做资源隔离</span><br><span class="line">       2、若redis集群崩溃，对redis进行熔断</span><br><span class="line">       3、对源服务的访问做限流</span><br><span class="line">       4、限流失败后采用stubbed fallback降级机制</span><br></pre></td></tr></table></figure><h1 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h1><p>每次如果从生产查询到的数据是空，就说明这个数据根本就不存在</p><p>那么如果这个数据不存在的话，我们不要不往redis和ehcache等缓存中写入数据，我们呢，给写入一个空的数据，比如说空的productInfo的json串</p><p>因为我们有一个异步监听数据变更的机制在里面，也就是说，如果数据变更的话，某个数据本来是没有的，可能会导致缓存穿透，所以我们给了个空数据</p><p>但是现在这个数据有了，我们接收到这个变更的消息过后，就可以将数据再次从生产服务中查询出来</p><p>然后设置到各级缓存中去了</p><h1 id="缓存失效问题"><a href="#缓存失效问题" class="headerlink" title="缓存失效问题"></a>缓存失效问题</h1><p>设置随机的缓存失效时间 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;每一级缓存的意义&quot;&gt;&lt;a href=&quot;#每一级缓存的意义&quot; class=&quot;headerlink&quot; title=&quot;每一级缓存的意义&quot;&gt;&lt;/a&gt;每一级缓存的意义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;时效性高的数据：采取DB和redis缓存双写方案&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="中间件" scheme="https://shenshengkun.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>fabric分布式部署</title>
    <link href="https://shenshengkun.github.io/2019/04/08/%E5%8C%BA%E5%9D%97%E9%93%BE/fabric%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/"/>
    <id>https://shenshengkun.github.io/2019/04/08/区块链/fabric分布式部署/</id>
    <published>2019-04-08T07:20:44.000Z</published>
    <updated>2019-04-11T08:36:27.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka模式简介"><a href="#Kafka模式简介" class="headerlink" title="Kafka模式简介"></a>Kafka模式简介</h1><p>Hyperledger Fabric采用kafka方式实现排序（orderer）服务的集群，kafka模块被认为是半中心化结构。顺便提一下，去中心化的BFT（拜占庭容错）排序（orderer）服务集群方式目前还在开发，还没有规定发布时间，将在1.x周期内发布，可以关注跟踪FAB-33的更新。 </p><p> Kafka模式由排序（orderer）服务、kafka集群和zookeeper集群组成。每个排序(orderer)服务相互之间不通信，只与kafka集群通信，kafka集群与zookeeper相互连接。        Fabric网络中的各节点（Peer）收到客户端发送的交易请求时，把交易信息发送给与其连接的排序（orderer）服务，交由排序（orderer）服务集群进行排序处理。 </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><table><thead><tr><th style="text-align:center">orderer1.example.com,kafka1,zookeeper1</th><th style="text-align:center">192.168.3.98</th></tr></thead><tbody><tr><td style="text-align:center"><strong>orderer1.example.com,kafka1,zookeeper1</strong></td><td style="text-align:center"><strong>192.168.3.97</strong></td></tr><tr><td style="text-align:center"><strong>orderer1.example.com,kafka1,zookeeper1</strong></td><td style="text-align:center"><strong>192.168.3.94</strong></td></tr><tr><td style="text-align:center"><strong>peer0.org1.example.com</strong></td><td style="text-align:center"><strong>192.168.10.174</strong></td></tr><tr><td style="text-align:center"><strong>peer1.org1.example.com</strong></td><td style="text-align:center"><strong>192.168.10.173</strong></td></tr><tr><td style="text-align:center"><strong>peer0.org2.example.com</strong></td><td style="text-align:center"><strong>192.168.3.93</strong></td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在六台机器上安装依赖工具docker、go、fabric源码</p><p>docker就不多说了，17,03以上就可以，go可以yum安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">安装fabric源码:</span><br><span class="line">git clone https://github.com/hyperledger/fabric.git</span><br><span class="line">cd fabric</span><br><span class="line">git checkout v1.4.0</span><br><span class="line"></span><br><span class="line">拉镜像：</span><br><span class="line"></span><br><span class="line"># mkdir -p /etc/docker</span><br><span class="line"># tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://8w1wqmsz.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"># systemctl daemon-reload</span><br><span class="line"># systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># docker pull hyperledger/fabric-peer:latest</span><br><span class="line"># docker pull hyperledger/fabric-orderer:latest</span><br><span class="line"># docker pull hyperledger/fabric-tools:latest</span><br><span class="line"># docker pull hyperledger/fabric-ccenv:latest</span><br><span class="line"># docker pull hyperledger/fabric-baseos:latest</span><br><span class="line"># docker pull hyperledger/fabric-kafka:latest</span><br><span class="line"># docker pull hyperledger/fabric-zookeeper:latest</span><br><span class="line"># docker pull hyperledger/fabric-couchdb:latest</span><br><span class="line"># docker pull hyperledger/fabric-ca:latest</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="创建创世快"><a href="#创建创世快" class="headerlink" title="创建创世快"></a>创建创世快</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"># cd $GOPATH/src/github.com/hyperledger/fabric</span><br><span class="line"># mkdir kafkapeer</span><br><span class="line"># cd kafkapeer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># cat configtx.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   Section: Organizations</span><br><span class="line">#</span><br><span class="line">#   - This section defines the different organizational identities which will</span><br><span class="line">#   be referenced later in the configuration.</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Organizations:</span><br><span class="line"></span><br><span class="line">    # SampleOrg defines an MSP using the sampleconfig.  It should never be used</span><br><span class="line">    # in production but may be used as a template for other definitions</span><br><span class="line">    - &amp;OrdererOrg</span><br><span class="line">        # DefaultOrg defines the organization which is used in the sampleconfig</span><br><span class="line">        # of the fabric.git development environment</span><br><span class="line">        Name: OrdererOrg</span><br><span class="line"></span><br><span class="line">        # ID to load the MSP definition as</span><br><span class="line">        ID: OrdererMSP</span><br><span class="line"></span><br><span class="line">        # MSPDir is the filesystem path which contains the MSP configuration</span><br><span class="line">        MSPDir: crypto-config/ordererOrganizations/example.com/msp</span><br><span class="line"></span><br><span class="line">        # Policies defines the set of policies at this level of the config tree</span><br><span class="line">        # For organization policies, their canonical path is usually</span><br><span class="line">        #   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span><br><span class="line">        Policies:</span><br><span class="line">            Readers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;OrdererMSP.member&apos;)&quot;</span><br><span class="line">            Writers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;OrdererMSP.member&apos;)&quot;</span><br><span class="line">            Admins:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;OrdererMSP.admin&apos;)&quot;</span><br><span class="line"></span><br><span class="line">    - &amp;Org1</span><br><span class="line">        # DefaultOrg defines the organization which is used in the sampleconfig</span><br><span class="line">        # of the fabric.git development environment</span><br><span class="line">        Name: Org1MSP</span><br><span class="line"></span><br><span class="line">        # ID to load the MSP definition as</span><br><span class="line">        ID: Org1MSP</span><br><span class="line"></span><br><span class="line">        MSPDir: crypto-config/peerOrganizations/org1.example.com/msp</span><br><span class="line"></span><br><span class="line">        # Policies defines the set of policies at this level of the config tree</span><br><span class="line">        # For organization policies, their canonical path is usually</span><br><span class="line">        #   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span><br><span class="line">        Policies:</span><br><span class="line">            Readers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org1MSP.admin&apos;, &apos;Org1MSP.peer&apos;, &apos;Org1MSP.client&apos;)&quot;</span><br><span class="line">            Writers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org1MSP.admin&apos;, &apos;Org1MSP.client&apos;)&quot;</span><br><span class="line">            Admins:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org1MSP.admin&apos;)&quot;</span><br><span class="line"></span><br><span class="line">        AnchorPeers:</span><br><span class="line">            # AnchorPeers defines the location of peers which can be used</span><br><span class="line">            # for cross org gossip communication.  Note, this value is only</span><br><span class="line">            # encoded in the genesis block in the Application section context</span><br><span class="line">            - Host: peer0.org1.example.com</span><br><span class="line">              Port: 7051</span><br><span class="line"></span><br><span class="line">    - &amp;Org2</span><br><span class="line">        # DefaultOrg defines the organization which is used in the sampleconfig</span><br><span class="line">        # of the fabric.git development environment</span><br><span class="line">        Name: Org2MSP</span><br><span class="line"></span><br><span class="line">        # ID to load the MSP definition as</span><br><span class="line">        ID: Org2MSP</span><br><span class="line"></span><br><span class="line">        MSPDir: crypto-config/peerOrganizations/org2.example.com/msp</span><br><span class="line"></span><br><span class="line">        # Policies defines the set of policies at this level of the config tree</span><br><span class="line">        # For organization policies, their canonical path is usually</span><br><span class="line">        #   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span><br><span class="line">        Policies:</span><br><span class="line">            Readers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org2MSP.admin&apos;, &apos;Org2MSP.peer&apos;, &apos;Org2MSP.client&apos;)&quot;</span><br><span class="line">            Writers:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org2MSP.admin&apos;, &apos;Org2MSP.client&apos;)&quot;</span><br><span class="line">            Admins:</span><br><span class="line">                Type: Signature</span><br><span class="line">                Rule: &quot;OR(&apos;Org2MSP.admin&apos;)&quot;</span><br><span class="line"></span><br><span class="line">        AnchorPeers:</span><br><span class="line">            # AnchorPeers defines the location of peers which can be used</span><br><span class="line">            # for cross org gossip communication.  Note, this value is only</span><br><span class="line">            # encoded in the genesis block in the Application section context</span><br><span class="line">            - Host: peer0.org2.example.com</span><br><span class="line">              Port: 7051</span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   SECTION: Capabilities</span><br><span class="line">#</span><br><span class="line">#   - This section defines the capabilities of fabric network. This is a new</span><br><span class="line">#   concept as of v1.1.0 and should not be utilized in mixed networks with</span><br><span class="line">#   v1.0.x peers and orderers.  Capabilities define features which must be</span><br><span class="line">#   present in a fabric binary for that binary to safely participate in the</span><br><span class="line">#   fabric network.  For instance, if a new MSP type is added, newer binaries</span><br><span class="line">#   might recognize and validate the signatures from this type, while older</span><br><span class="line">#   binaries without this support would be unable to validate those</span><br><span class="line">#   transactions.  This could lead to different versions of the fabric binaries</span><br><span class="line">#   having different world states.  Instead, defining a capability for a channel</span><br><span class="line">#   informs those binaries without this capability that they must cease</span><br><span class="line">#   processing transactions until they have been upgraded.  For v1.0.x if any</span><br><span class="line">#   capabilities are defined (including a map with all capabilities turned off)</span><br><span class="line">#   then the v1.0.x peer will deliberately crash.</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Capabilities:</span><br><span class="line">    # Channel capabilities apply to both the orderers and the peers and must be</span><br><span class="line">    # supported by both.  Set the value of the capability to true to require it.</span><br><span class="line">    Global: &amp;ChannelCapabilities</span><br><span class="line">        # V1.1 for Global is a catchall flag for behavior which has been</span><br><span class="line">        # determined to be desired for all orderers and peers running v1.0.x,</span><br><span class="line">        # but the modification of which would cause incompatibilities.  Users</span><br><span class="line">        # should leave this flag set to true.</span><br><span class="line">        V1_1: true</span><br><span class="line"></span><br><span class="line">    # Orderer capabilities apply only to the orderers, and may be safely</span><br><span class="line">    # manipulated without concern for upgrading peers.  Set the value of the</span><br><span class="line">    # capability to true to require it.</span><br><span class="line">    Orderer: &amp;OrdererCapabilities</span><br><span class="line">        # V1.1 for Order is a catchall flag for behavior which has been</span><br><span class="line">        # determined to be desired for all orderers running v1.0.x, but the</span><br><span class="line">        # modification of which  would cause incompatibilities.  Users should</span><br><span class="line">        # leave this flag set to true.</span><br><span class="line">        V1_1: true</span><br><span class="line"></span><br><span class="line">    # Application capabilities apply only to the peer network, and may be safely</span><br><span class="line">    # manipulated without concern for upgrading orderers.  Set the value of the</span><br><span class="line">    # capability to true to require it.</span><br><span class="line">    Application: &amp;ApplicationCapabilities</span><br><span class="line">        # V1.1 for Application is a catchall flag for behavior which has been</span><br><span class="line">        # determined to be desired for all peers running v1.0.x, but the</span><br><span class="line">        # modification of which would cause incompatibilities.  Users should</span><br><span class="line">        # leave this flag set to true.</span><br><span class="line">        V1_2: true</span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   SECTION: Application</span><br><span class="line">#</span><br><span class="line">#   - This section defines the values to encode into a config transaction or</span><br><span class="line">#   genesis block for application related parameters</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Application: &amp;ApplicationDefaults</span><br><span class="line"></span><br><span class="line">    # Organizations is the list of orgs which are defined as participants on</span><br><span class="line">    # the application side of the network</span><br><span class="line">    Organizations:</span><br><span class="line"></span><br><span class="line">    # Policies defines the set of policies at this level of the config tree</span><br><span class="line">    # For Application policies, their canonical path is</span><br><span class="line">    #   /Channel/Application/&lt;PolicyName&gt;</span><br><span class="line">    Policies:</span><br><span class="line">        Readers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Readers&quot;</span><br><span class="line">        Writers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Writers&quot;</span><br><span class="line">        Admins:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;MAJORITY Admins&quot;</span><br><span class="line"></span><br><span class="line">    # Capabilities describes the application level capabilities, see the</span><br><span class="line">    # dedicated Capabilities section elsewhere in this file for a full</span><br><span class="line">    # description</span><br><span class="line">    Capabilities:</span><br><span class="line">        &lt;&lt;: *ApplicationCapabilities</span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   SECTION: Orderer</span><br><span class="line">#</span><br><span class="line">#   - This section defines the values to encode into a config transaction or</span><br><span class="line">#   genesis block for orderer related parameters</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Orderer: &amp;OrdererDefaults</span><br><span class="line"></span><br><span class="line">    # Orderer Type: The orderer implementation to start</span><br><span class="line">    # Available types are &quot;solo&quot; and &quot;kafka&quot;</span><br><span class="line">    OrdererType: kafka</span><br><span class="line"></span><br><span class="line">    Addresses:</span><br><span class="line">        - orderer0.example.com:7050</span><br><span class="line">        - orderer1.example.com:7050</span><br><span class="line">        - orderer2.example.com:7050</span><br><span class="line"></span><br><span class="line">    # Batch Timeout: The amount of time to wait before creating a batch</span><br><span class="line">    BatchTimeout: 2s</span><br><span class="line"></span><br><span class="line">    # Batch Size: Controls the number of messages batched into a block</span><br><span class="line">    BatchSize:</span><br><span class="line"></span><br><span class="line">        # Max Message Count: The maximum number of messages to permit in a batch</span><br><span class="line">        MaxMessageCount: 10</span><br><span class="line"></span><br><span class="line">        # Absolute Max Bytes: The absolute maximum number of bytes allowed for</span><br><span class="line">        # the serialized messages in a batch.</span><br><span class="line">        AbsoluteMaxBytes: 98 MB</span><br><span class="line"></span><br><span class="line">        # Preferred Max Bytes: The preferred maximum number of bytes allowed for</span><br><span class="line">        # the serialized messages in a batch. A message larger than the preferred</span><br><span class="line">        # max bytes will result in a batch larger than preferred max bytes.</span><br><span class="line">        PreferredMaxBytes: 512 KB</span><br><span class="line"></span><br><span class="line">    Kafka:</span><br><span class="line">        # Brokers: A list of Kafka brokers to which the orderer connects. Edit</span><br><span class="line">        # this list to identify the brokers of the ordering service.</span><br><span class="line">        # NOTE: Use IP:port notation.</span><br><span class="line">        Brokers:</span><br><span class="line">            - kafka0:9092</span><br><span class="line">            - kafka1:9092</span><br><span class="line">            - kafka2:9092</span><br><span class="line">            - kafka3:9092</span><br><span class="line"></span><br><span class="line">    # Organizations is the list of orgs which are defined as participants on</span><br><span class="line">    # the orderer side of the network</span><br><span class="line">    Organizations:</span><br><span class="line"></span><br><span class="line">    # Policies defines the set of policies at this level of the config tree</span><br><span class="line">    # For Orderer policies, their canonical path is</span><br><span class="line">    #   /Channel/Orderer/&lt;PolicyName&gt;</span><br><span class="line">    Policies:</span><br><span class="line">        Readers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Readers&quot;</span><br><span class="line">        Writers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Writers&quot;</span><br><span class="line">        Admins:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;MAJORITY Admins&quot;</span><br><span class="line">        # BlockValidation specifies what signatures must be included in the block</span><br><span class="line">        # from the orderer for the peer to validate it.</span><br><span class="line">        BlockValidation:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Writers&quot;</span><br><span class="line"></span><br><span class="line">    # Capabilities describes the orderer level capabilities, see the</span><br><span class="line">    # dedicated Capabilities section elsewhere in this file for a full</span><br><span class="line">    # description</span><br><span class="line">    Capabilities:</span><br><span class="line">        &lt;&lt;: *OrdererCapabilities</span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   CHANNEL</span><br><span class="line">#</span><br><span class="line">#   This section defines the values to encode into a config transaction or</span><br><span class="line">#   genesis block for channel related parameters.</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Channel: &amp;ChannelDefaults</span><br><span class="line">    # Policies defines the set of policies at this level of the config tree</span><br><span class="line">    # For Channel policies, their canonical path is</span><br><span class="line">    #   /Channel/&lt;PolicyName&gt;</span><br><span class="line">    Policies:</span><br><span class="line">        # Who may invoke the &apos;Deliver&apos; API</span><br><span class="line">        Readers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Readers&quot;</span><br><span class="line">        # Who may invoke the &apos;Broadcast&apos; API</span><br><span class="line">        Writers:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;ANY Writers&quot;</span><br><span class="line">        # By default, who may modify elements at this config level</span><br><span class="line">        Admins:</span><br><span class="line">            Type: ImplicitMeta</span><br><span class="line">            Rule: &quot;MAJORITY Admins&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # Capabilities describes the channel level capabilities, see the</span><br><span class="line">    # dedicated Capabilities section elsewhere in this file for a full</span><br><span class="line">    # description</span><br><span class="line">    Capabilities:</span><br><span class="line">        &lt;&lt;: *ChannelCapabilities</span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line">#   Profile</span><br><span class="line">#</span><br><span class="line">#   - Different configuration profiles may be encoded here to be specified</span><br><span class="line">#   as parameters to the configtxgen tool</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">Profiles:</span><br><span class="line"></span><br><span class="line">    TwoOrgsOrdererGenesis:</span><br><span class="line">        &lt;&lt;: *ChannelDefaults</span><br><span class="line">        Orderer:</span><br><span class="line">            &lt;&lt;: *OrdererDefaults</span><br><span class="line">            Organizations:</span><br><span class="line">                - *OrdererOrg</span><br><span class="line">        Consortiums:</span><br><span class="line">            SampleConsortium:</span><br><span class="line">                Organizations:</span><br><span class="line">                    - *Org1</span><br><span class="line">                    - *Org2</span><br><span class="line"></span><br><span class="line">    TwoOrgsChannel:</span><br><span class="line">        Consortium: SampleConsortium</span><br><span class="line">        Application:</span><br><span class="line">            &lt;&lt;: *ApplicationDefaults</span><br><span class="line">            Organizations:</span><br><span class="line">                - *Org1</span><br><span class="line">                - *Org2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin目录从fabric源码里面拷过来，这样方便生成块</span><br><span class="line"># mkdir channel-artifacts</span><br><span class="line"># ./bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block</span><br><span class="line"># ./bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/mychannel.tx -channelID mychannel</span><br></pre></td></tr></table></figure><p>完事之后，把kafka目录，拷到所有机器上</p><h2 id="部署kafka、zk"><a href="#部署kafka、zk" class="headerlink" title="部署kafka、zk"></a>部署kafka、zk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">zk的yaml文件：</span><br><span class="line"># cat docker-compose-zookeeper.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zookeeper0:</span><br><span class="line">    container_name: zookeeper0</span><br><span class="line">    hostname: zookeeper0</span><br><span class="line">    image: hyperledger/fabric-zookeeper</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - ZOO_MY_ID=1</span><br><span class="line">      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888</span><br><span class="line">    ports:</span><br><span class="line">      - 2181:2181</span><br><span class="line">      - 2888:2888</span><br><span class="line">      - 3888:3888</span><br><span class="line">    dns:</span><br><span class="line">      - &quot;192.168.3.94&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">kafka的yaml文件：</span><br><span class="line"># cat docker-compose-kafka.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  kafka0:</span><br><span class="line">    container_name: kafka0</span><br><span class="line">    hostname: kafka0</span><br><span class="line">    image: hyperledger/fabric-kafka</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B</span><br><span class="line">      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B</span><br><span class="line">      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false</span><br><span class="line">    environment:</span><br><span class="line">      - KAFKA_BROKER_ID=1</span><br><span class="line">      - KAFKA_MIN_INSYNC_REPLICAS=2</span><br><span class="line">      - KAFKA_DEFAULT_REPLICATION_FACTOR=3</span><br><span class="line">      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181</span><br><span class="line">    ports:</span><br><span class="line">      - 9092:9092</span><br><span class="line">    dns:</span><br><span class="line">      - &quot;192.168.3.94&quot;</span><br></pre></td></tr></table></figure><h2 id="部署orderer"><a href="#部署orderer" class="headerlink" title="部署orderer"></a>部署orderer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">因为咱们的fabric证书，没生成tls，所以下面的配置文件需要把tls去掉，zk，kafka都各自按照上述步骤配置在三台不同机器上，orderer也一样</span><br><span class="line"></span><br><span class="line">cat docker-compose-orderer.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Copyright IBM Corp. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># SPDX-License-Identifier: Apache-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  orderer0.example.com:</span><br><span class="line">    container_name: orderer0.example.com</span><br><span class="line">    image: hyperledger/fabric-orderer</span><br><span class="line">    environment:</span><br><span class="line">      - ORDERER_GENERAL_LOGLEVEL=debug</span><br><span class="line">      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span><br><span class="line">      - ORDERER_GENERAL_GENESISMETHOD=file</span><br><span class="line">      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span><br><span class="line">      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span><br><span class="line">      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span><br><span class="line">      # enabled TLS</span><br><span class="line">      - ORDERER_GENERAL_TLS_ENABLED=true</span><br><span class="line">      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span><br><span class="line">      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span><br><span class="line">      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span><br><span class="line">      - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s </span><br><span class="line">      - ORDERER_KAFKA_RETRY_LONGTOTAL=100s</span><br><span class="line">      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s</span><br><span class="line">      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s</span><br><span class="line">      - ORDERER_KAFKA_VERBOSE=true</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric</span><br><span class="line">    command: orderer</span><br><span class="line">    volumes:</span><br><span class="line">      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span><br><span class="line">      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp</span><br><span class="line">      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls</span><br><span class="line">    ports:</span><br><span class="line">      - 7050:7050</span><br><span class="line">    dns:</span><br><span class="line">     - &quot;192.168.3.94&quot;</span><br></pre></td></tr></table></figure><h2 id="部署peer"><a href="#部署peer" class="headerlink" title="部署peer"></a>部署peer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># cat docker-compose-peer.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># All elements in this file should depend on the docker-compose-base.yaml</span><br><span class="line"># Provided fabric peer node</span><br><span class="line"></span><br><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  peer1.org1.example.com:</span><br><span class="line">    container_name: peer1.org1.example.com</span><br><span class="line">    hostname: peer1.org1.example.com</span><br><span class="line">    image: hyperledger/fabric-peer</span><br><span class="line">    environment:</span><br><span class="line">       - CORE_PEER_ID=peer1.org1.example.com</span><br><span class="line">       - CORE_PEER_ADDRESS=peer1.org1.example.com:7051</span><br><span class="line">       - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052</span><br><span class="line">       - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051</span><br><span class="line">       - CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">       # the following setting starts chaincode containers on the same</span><br><span class="line">       # bridge network as the peers</span><br><span class="line">       # https://docs.docker.com/compose/networking/</span><br><span class="line">       #- CORE_LOGGING_LEVEL=ERROR</span><br><span class="line">       - CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">       - CORE_PEER_GOSSIP_USELEADERELECTION=true</span><br><span class="line">       - CORE_PEER_GOSSIP_ORGLEADER=false</span><br><span class="line">       - CORE_PEER_PROFILE_ENABLED=true</span><br><span class="line">       - CORE_PEER_TLS_ENABLED=true</span><br><span class="line">       - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span><br><span class="line">       - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span><br><span class="line">       - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br><span class="line">    command: peer node start</span><br><span class="line">    volumes:</span><br><span class="line">       - /var/run/:/host/var/run/</span><br><span class="line">       - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp</span><br><span class="line">       - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls</span><br><span class="line">    ports:</span><br><span class="line">      - 7051:7051</span><br><span class="line">      - 7052:7052</span><br><span class="line">      - 7053:7053</span><br><span class="line">    dns:</span><br><span class="line">      - &quot;192.168.3.94&quot;</span><br><span class="line"></span><br><span class="line">  cli:</span><br><span class="line">    container_name: cli</span><br><span class="line">    image: hyperledger/fabric-tools</span><br><span class="line">    tty: true</span><br><span class="line">    environment:</span><br><span class="line">      - GOPATH=/opt/gopath</span><br><span class="line">      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span><br><span class="line">      # - CORE_LOGGING_LEVEL=ERROR</span><br><span class="line">      - CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">      - CORE_PEER_ID=cli</span><br><span class="line">      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051</span><br><span class="line">      - CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">      - CORE_PEER_TLS_ENABLED=true</span><br><span class="line">      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt</span><br><span class="line">      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key</span><br><span class="line">      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt</span><br><span class="line">      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer</span><br><span class="line">    volumes:</span><br><span class="line">        - /var/run/:/host/var/run/</span><br><span class="line">        - ./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/kafkapeer/chaincode/go</span><br><span class="line">        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span><br><span class="line">        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span><br><span class="line">    dns:</span><br><span class="line">      - &quot;192.168.3.94&quot;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-zookeeper.yaml up -d</span><br><span class="line">docker-compose -f docker-compose-kafka.yaml up -d</span><br><span class="line">docker-compose -f docker-compose-orderer.yaml up -d</span><br><span class="line">docker-compose -f docker-compose-peer.yaml up -d</span><br></pre></td></tr></table></figure><h2 id="创建channel"><a href="#创建channel" class="headerlink" title="创建channel"></a>创建channel</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入cli：</span><br><span class="line">peer channel create -o orderer0.example.com:7050 -c mychannel -f ./channel-artifacts/mychannel.tx</span><br><span class="line">peer channel join -b mychannel.block</span><br></pre></td></tr></table></figure><p>之后切换变量，批量加就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kafka模式简介&quot;&gt;&lt;a href=&quot;#Kafka模式简介&quot; class=&quot;headerlink&quot; title=&quot;Kafka模式简介&quot;&gt;&lt;/a&gt;Kafka模式简介&lt;/h1&gt;&lt;p&gt;Hyperledger Fabric采用kafka方式实现排序（orderer）服务
      
    
    </summary>
    
      <category term="区块链" scheme="https://shenshengkun.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>tornado-电话报警</title>
    <link href="https://shenshengkun.github.io/2019/03/19/python/tornado-%E7%94%B5%E8%AF%9D%E6%8A%A5%E8%AD%A6/"/>
    <id>https://shenshengkun.github.io/2019/03/19/python/tornado-电话报警/</id>
    <published>2019-03-19T05:37:01.000Z</published>
    <updated>2019-03-21T01:29:02.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>某些时候邮件，钉钉的报警我们在家里，或者周末是很少去观看的，这时候如果服务器出了问题，运维人员是没法第一时间排查到，所以短信和电话报警就很有必要去做。</p><p>已有阿里云的语音短信报警接口，故做了个端口电话报警。</p><h1 id="电话报警脚本"><a href="#电话报警脚本" class="headerlink" title="电话报警脚本"></a>电话报警脚本</h1><p>[root@aa phone_send]# cat send_model.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">phonenumber = &quot;xxxxxxx,xxxxxxx&quot;</span><br><span class="line">portdic = &#123;</span><br><span class="line">    &quot;9876&quot;:&quot;服务类型MQ,端口9876&quot;,</span><br><span class="line">    &quot;2181&quot;:&quot;服务类型ZK,端口2181&quot;,</span><br><span class="line">    &quot;3306&quot;:&quot;服务类型数据库,端口3306&quot;,</span><br><span class="line">    &quot;27017&quot;:&quot;服务类型数据库,端口27017&quot;,</span><br><span class="line">    &quot;1908&quot;:&quot;服务类型spada,薛亮应用&quot;,</span><br><span class="line">    &quot;53&quot;:&quot;服务类型dns,端口53&quot;,</span><br><span class="line">    &quot;9200&quot;:&quot;服务类型es,端口9200&quot;,</span><br><span class="line">    &quot;6379&quot;:&quot;服务类型redis,端口6379&quot;,</span><br><span class="line">    &quot;80&quot;:&quot;服务类型nginx,端口80&quot;</span><br><span class="line">&#125;</span><br><span class="line">statusdic = &#123;</span><br><span class="line">    &quot;PROBLEM&quot;:&quot;服务发生故障&quot;,</span><br><span class="line">    &quot;OK&quot;:&quot;故障恢复&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        status = self.get_argument(&apos;status&apos;)</span><br><span class="line">        endpoint = self.get_argument(&apos;endpoint&apos;)</span><br><span class="line">        metric = self.get_argument(&apos;metric&apos;)</span><br><span class="line">        tags = self.get_argument(&apos;tags&apos;)</span><br><span class="line">        statusok = statusdic.get(status)</span><br><span class="line">        port = tags.split(&quot;:&quot;)[1]</span><br><span class="line">        p_endpoint = endpoint.split(&quot;.&quot;)</span><br><span class="line">        del(p_endpoint[0])</span><br><span class="line">        portmes = portdic.get(port)</span><br><span class="line">        if portmes == None:</span><br><span class="line">            portmes = &quot;端口&quot; + port</span><br><span class="line">        # 短信</span><br><span class="line">        requests.get(&quot;http://域名/send_sms/%s,%s,%s,%s/%s&quot;%(statusok,endpoint,metric,portmes,phonenumber))</span><br><span class="line">        # 电话</span><br><span class="line">        requests.get(&quot;http://域名/send_phone/%s%s%s%s/%s&quot;%(statusok,p_endpoint,metric,portmes,phonenumber))</span><br><span class="line">        message = status + endpoint + metric + tags</span><br><span class="line">        print(status,endpoint,metric,tags,port)</span><br><span class="line">application = tornado.web.Application([(r&quot;/message&quot;, MainHandler), ])</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    application.listen(8868)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 send_model.py</span><br></pre></td></tr></table></figure><h1 id="callback接口"><a href="#callback接口" class="headerlink" title="callback接口"></a>callback接口</h1><p><a href="http://ip:8868/message" target="_blank" rel="noopener">http://ip:8868/message</a></p><h1 id="openfalcon监控做模板"><a href="#openfalcon监控做模板" class="headerlink" title="openfalcon监控做模板"></a>openfalcon监控做模板</h1><p><img src="https://shenshengkun.github.io/images/open_falcon-tornado.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;某些时候邮件，钉钉的报警我们在家里，或者周末是很少去观看的，这时候如果服务器出了问题，运维人员是没法第一时间排查到，所以短信和电话报警就很有
      
    
    </summary>
    
      <category term="python" scheme="https://shenshengkun.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>tornado-hello</title>
    <link href="https://shenshengkun.github.io/2019/03/19/python/tornado-hello/"/>
    <id>https://shenshengkun.github.io/2019/03/19/python/tornado-hello/</id>
    <published>2019-03-19T02:23:01.000Z</published>
    <updated>2019-03-19T02:27:08.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="http://www.tornadoweb.org/" target="_blank" rel="noopener">Tornado</a>是一个Python Web框架和异步网络库，最初是在<a href="http://friendfeed.com/" target="_blank" rel="noopener">FriendFeed上</a>开发的。通过使用非阻塞网络I / O，Tornado可以扩展到数万个开放连接，使其成为<a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling" target="_blank" rel="noopener">长轮询</a>， <a href="http://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSockets</a>和其他需要与每个用户建立长期连接的应用程序的理想选择 。 </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tornado</span><br></pre></td></tr></table></figure><h1 id="简单的web"><a href="#简单的web" class="headerlink" title="简单的web"></a>简单的web</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;Hello, world&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (r&quot;/index&quot;, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p><a href="http://ip:8888/index" target="_blank" rel="noopener">http://ip:8888/index</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.tornadoweb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;To
      
    
    </summary>
    
      <category term="python" scheme="https://shenshengkun.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>fabric-ca部署</title>
    <link href="https://shenshengkun.github.io/2019/03/05/%E5%8C%BA%E5%9D%97%E9%93%BE/fabric-ca/"/>
    <id>https://shenshengkun.github.io/2019/03/05/区块链/fabric-ca/</id>
    <published>2019-03-05T02:10:01.000Z</published>
    <updated>2019-04-08T07:13:00.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署一个fabric-ca架构图"><a href="#部署一个fabric-ca架构图" class="headerlink" title="部署一个fabric-ca架构图"></a>部署一个fabric-ca架构图</h1><p><img src="https://shenshengkun.github.io/images/fabric-ca.jpg" alt=""></p><h2 id="创建一个由两个组织org1-example-com和org2-example-com组成的的联盟"><a href="#创建一个由两个组织org1-example-com和org2-example-com组成的的联盟" class="headerlink" title="创建一个由两个组织org1.example.com和org2.example.com组成的的联盟"></a>创建一个由两个组织<code>org1.example.com</code>和<code>org2.example.com</code>组成的的联盟</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">还有一个组织example.com用来部署orderer。</span><br><span class="line"></span><br><span class="line">组织example.com部署了一个solo模式的orderer。（多个orderer的部署方式，以后探讨）</span><br><span class="line">orderer.example.com</span><br><span class="line"></span><br><span class="line">组织org1.example.com部署了两个peer:</span><br><span class="line">peer0.org1.example.com</span><br><span class="line">peer1.org1.example.com</span><br><span class="line"></span><br><span class="line">组织org2.example.com部署了一个peer:</span><br><span class="line">peer0.org2.example.com</span><br><span class="line"></span><br><span class="line">每个组织都要有一个Admin用户，每个组件(peer/orderer)也需要一个账号，因此需要通过FabricCA创建7个用户：</span><br><span class="line">example.com:       Admin@example.com       orderer.example.com</span><br><span class="line">org1.example.com:  Admin@org1.example.com  peer0.org1.example.com  peer1.org1.example.com  </span><br><span class="line">org2.example.com:  Admin@org2.example.com  peer0.org2.example.com</span><br><span class="line"></span><br><span class="line">这里只创建了Admin用户和每个组件的账号，普通用户的创建方式相同，只是普通用户的证书不需要添加到目标组件的admincerts目录中。</span><br><span class="line"></span><br><span class="line">或者说一个用户的证书如果被添加到了对应组织或组件的msp/admincerts目录中，那么这个用户就称为对应的管理员。</span><br></pre></td></tr></table></figure><h2 id="启动fabric-ca"><a href="#启动fabric-ca" class="headerlink" title="启动fabric-ca"></a>启动fabric-ca</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fabirc-ca的编译：</span><br><span class="line"></span><br><span class="line">$ go get -u github.com/hyperledger/fabric-ca</span><br><span class="line">$ cd $GOPATH/src/github.com/hyperledger/fabric-ca</span><br><span class="line">$ make fabric-ca-server</span><br><span class="line">$ make fabric-ca-client</span><br><span class="line">$ ls bin/</span><br><span class="line">fabric-ca-client  fabric-ca-server</span><br><span class="line">这里将fabric-ca部署在/opt/app/fabric-ca/server目录中：</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/app/fabric-ca/server</span><br><span class="line">cp -rf $GOPATH/src/github.com/hyperledger/fabric-ca/bin/*  /opt/app/fabric-ca/server</span><br><span class="line">ln -s /opt/app/fabric-ca/server/fabric-ca-client  /usr/bin/fabric-ca-client</span><br><span class="line">直接启动ca，fabric-ca admin的名称为admin，密码为pass。(这里只是演示，生产中使用，你需要根据实际的情况配置)</span><br><span class="line"></span><br><span class="line">cd /opt/app/fabric-ca/server</span><br><span class="line">./fabric-ca-server start -b  admin:pass &amp;</span><br><span class="line">如果有删除联盟和删除用户的需求，需要用下面的方式启动：</span><br><span class="line"></span><br><span class="line">cd /opt/app/fabric-ca/server</span><br><span class="line">./fabric-ca-server start -b admin:pass --cfg.affiliations.allowremove  --cfg.identities.allowremove &amp;</span><br></pre></td></tr></table></figure><h2 id="生成fabric-ca-admin的凭证"><a href="#生成fabric-ca-admin的凭证" class="headerlink" title="生成fabric-ca admin的凭证"></a>生成fabric-ca admin的凭证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/fabric-deploy</span><br><span class="line">cd ~/fabric-deploy</span><br><span class="line">mkdir fabric-ca-files </span><br><span class="line">生成fabric-ca admin的凭证，用-H参数指定client目录：</span><br><span class="line"></span><br><span class="line">mkdir -p `pwd`/fabric-ca-files/admin</span><br><span class="line">fabric-ca-client enroll -u http://admin:pass@localhost:7054 -H `pwd`/fabric-ca-files/admin</span><br><span class="line">也可以用环境变量FABRIC_CA_CLIENT_HOME指定了client的工作目录，生成的用户凭证将存放在这个目录中。</span><br><span class="line"></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=`pwd`/fabric-ca-files/admin</span><br><span class="line">mkdir -p $FABRIC_CA_CLIENT_HOME</span><br><span class="line">fabric-ca-client enroll -u http://admin:pass@localhost:7054</span><br></pre></td></tr></table></figure><h2 id="创建联盟"><a href="#创建联盟" class="headerlink" title="创建联盟"></a>创建联盟</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">上面的启动方式默认会创建两个组织：</span><br><span class="line"></span><br><span class="line">$ fabric-ca-client  -H `pwd`/fabric-ca-files/admin  affiliation list</span><br><span class="line">2018/05/07 02:36:46 [INFO] [::1]:56148 GET /affiliations 200 0 &quot;OK&quot;</span><br><span class="line">affiliation: .</span><br><span class="line">   affiliation: org2</span><br><span class="line">      affiliation: org2.department1</span><br><span class="line">   affiliation: org1</span><br><span class="line">      affiliation: org1.department1</span><br><span class="line">      affiliation: org1.department2</span><br><span class="line"></span><br><span class="line">为了查看信息的时候，看到的输出比较简洁，用下面的命令将其删除：</span><br><span class="line">fabric-ca-client -H `pwd`/fabric-ca-files/admin  affiliation remove --force  org1</span><br><span class="line">fabric-ca-client -H `pwd`/fabric-ca-files/admin  affiliation remove --force  org2</span><br><span class="line"></span><br><span class="line">执行下面命令创建联盟：</span><br><span class="line">fabric-ca-client  -H `pwd`/fabric-ca-files/admin  affiliation add com </span><br><span class="line">fabric-ca-client  -H `pwd`/fabric-ca-files/admin  affiliation add com.example</span><br><span class="line">fabric-ca-client  -H `pwd`/fabric-ca-files/admin  affiliation add com.example.org1</span><br><span class="line">fabric-ca-client  -H `pwd`/fabric-ca-files/admin  affiliation add com.example.org2</span><br><span class="line"></span><br><span class="line">注意：联盟是有层级的。</span><br><span class="line"></span><br><span class="line">创建联盟如下：</span><br><span class="line">$ fabric-ca-client -H `pwd`/fabric-ca-files/admin  affiliation list</span><br><span class="line">2018/04/28 15:19:34 [INFO] 127.0.0.1:38160 GET /affiliations 201 0 &quot;OK&quot;</span><br><span class="line">affiliation: com</span><br><span class="line">   affiliation: com.example</span><br><span class="line">      affiliation: com.example.org1</span><br><span class="line">      affiliation: com.example.org2</span><br></pre></td></tr></table></figure><h2 id="为每个组织准备msp"><a href="#为每个组织准备msp" class="headerlink" title="为每个组织准备msp"></a>为每个组织准备msp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">就是从Fabric-CA中，读取出用来签署用户的根证书等。</span><br><span class="line"></span><br><span class="line">为example.com准备msp，将ca证书等存放example.com组织的目录中:</span><br><span class="line">mkdir -p ./fabric-ca-files/example.com/msp</span><br><span class="line">fabric-ca-client getcacert -M `pwd`/fabric-ca-files/example.com/msp    //-M需要指定绝对路径</span><br><span class="line"></span><br><span class="line">命令执行结束后，会在fabric-ca-files/example.com/msp得到文件：</span><br><span class="line">$ tree fabric-ca-files/example.com/msp/</span><br><span class="line">example.com/msp/</span><br><span class="line">|-- cacerts</span><br><span class="line">|   `-- localhost-7054.pem</span><br><span class="line">|-- intermediatecerts</span><br><span class="line">|   `-- localhost-7054.pem</span><br><span class="line">|-- keystore</span><br><span class="line">`-- signcerts</span><br><span class="line"></span><br><span class="line">注意通过getcacert得到msp目录中只有CA证书，而且这里没有使用中间CA，fabric-ca-files/example.com/msp/intermediatecerts/localhost-7054.pem是一个空文件。</span><br><span class="line"></span><br><span class="line">同样的方式为org1.example.com获取msp:</span><br><span class="line">mkdir -p fabric-ca-files/org1.example.com/msp</span><br><span class="line">fabric-ca-client getcacert -M `pwd`/fabric-ca-files/org1.example.com/msp</span><br><span class="line"></span><br><span class="line">为org2.example.com准备msp:</span><br><span class="line">mkdir -p ./fabric-ca-files/org2.example.com/msp</span><br><span class="line">fabric-ca-client getcacert -M `pwd`/fabric-ca-files/org2.example.com/msp</span><br><span class="line"></span><br><span class="line">这里是用getcacert为每个组织准备需要的ca文件，在生成创始块的时候会用到。</span><br><span class="line">在1.1.0版本的fabric-ca中，只会生成用户在操作区块链的时候用到的证书和密钥，不会生成用来加密grpc通信的证书。</span><br><span class="line"></span><br><span class="line">这里复用之前用cryptogen生成的tls证书，需要将验证tls证书的ca添加到msp目录中，如下：</span><br><span class="line">cp -rf certs/ordererOrganizations/example.com/msp/tlscacerts  fabric-ca-files/example.com/msp/</span><br><span class="line">cp -rf certs/peerOrganizations/org1.example.com/msp/tlscacerts/ fabric-ca-files/org1.example.com/msp/</span><br><span class="line">cp -rf certs/peerOrganizations/org2.example.com/msp/tlscacerts/ fabric-ca-files/org2.example.com/msp/</span><br><span class="line"></span><br><span class="line">如果在你的环境中，各个组件域名的证书，是由第三方CA签署的，就将第三方CA的根证书添加到msp/tlscacerts目录中。</span><br><span class="line"></span><br><span class="line">组织的msp目录中，包含都是CA根证书，分别是TLS加密的根证书，和用于身份验证的根证书。另外还需要admin用户的证书，后面的操作中会添加。</span><br></pre></td></tr></table></figure><h2 id="注册example-com的管理员Admin-example-com"><a href="#注册example-com的管理员Admin-example-com" class="headerlink" title="注册example.com的管理员Admin@example.com"></a>注册example.com的管理员<a href="mailto:Admin@example.com" target="_blank" rel="noopener">Admin@example.com</a></h2><p>可以直接用命令行（命令比较长，这里用<code>\\</code>截断了）： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register --id.name Admin@example.com --id.type client --id.affiliation &quot;com.example.org1&quot;  \</span><br><span class="line">    --id.attrs &apos;&quot;hf.Registrar.Roles=client,orderer,peer,user&quot;,&quot;hf.Registrar.DelegateRoles=client,orderer,peer,user&quot;,\</span><br><span class="line">                 hf.Registrar.Attributes=*,hf.GenCRL=true,hf.Revoker=true,hf.AffiliationMgr=true,hf.IntermediateCA=true,role=admin:ecert&apos;</span><br></pre></td></tr></table></figure><p>也可以将命令行参数写在fabric-ca admin的配置文件<code>fabric-ca-files/admin/fabric-ca-client-config.yaml</code>中。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls fabric-ca-files/admin/admin/</span><br><span class="line">fabric-ca-client-config.yaml  msp</span><br></pre></td></tr></table></figure><p>为了演示清楚，这里使用修改配置文件的方式，将<code>fabric-ca-files/admin/fabric-ca-client-config.yaml</code>其中的<code>id</code>部分修改为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: Admin@example.com</span><br><span class="line">  type: client</span><br><span class="line">  affiliation: com.example</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: hf.Registrar.Roles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.DelegateRoles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.Attributes</span><br><span class="line">      value: &quot;*&quot;</span><br><span class="line">    - name: hf.GenCRL</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.Revoker</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.AffiliationMgr</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.IntermediateCA</span><br><span class="line">      value: true</span><br><span class="line">    - name: role</span><br><span class="line">      value: admin</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注意最后一行role属性，是我们<code>自定义</code>的属性，对于自定义的属性，要设置certs，在配置文件中需要<code>单独设置ecert属性为true或者false</code>。如果在命令行中，添加后缀<code>:ecert</code>表示true，例如: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register --id.affiliation &quot;com.example.org1&quot; --id.attrs &quot;role=admin:ecert&quot;</span><br></pre></td></tr></table></figure><p>直接执行下面的命令，即可完成用户<a href="mailto:`Admin@example.com" target="_blank" rel="noopener">`Admin@example.com</a>`注册，注意这时候的注册使用fabricCA的admin账号完成的： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password</span><br></pre></td></tr></table></figure><p>如果不用<code>--id.secret</code>指定密码，会自动生成密码。</p><p>其它配置的含义是用户名为<a href="mailto:`Admin@example.com" target="_blank" rel="noopener">`Admin@example.com</a><code>，类型是</code>client<code>，它能够管理</code>com.example.*`下的用户，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--id.name  Admin@example.com                           //用户名</span><br><span class="line">--id.type client                                       //类型为client</span><br><span class="line">--id.affiliation &quot;com.example&quot;                         //权利访问</span><br><span class="line">hf.Registrar.Roles=client,orderer,peer,user            //能够管理的用户类型</span><br><span class="line">hf.Registrar.DelegateRoles=client,orderer,peer,user    //可以授权给子用户管理的用户类型</span><br><span class="line">hf.Registrar.Attributes=*                              //可以为子用户设置所有属性</span><br><span class="line">hf.GenCRL=true                                         //可以生成撤销证书列表</span><br><span class="line">hf.Revoker=true                                        //可以撤销用户</span><br><span class="line">hf.AffiliationMgr=true                                 //能够管理联盟</span><br><span class="line">hf.IntermediateCA=true                                 //可以作为中间CA</span><br><span class="line">role=admin:ecert                                       //自定义属性</span><br></pre></td></tr></table></figure><p>完成注册之后，还需生成<a href="mailto:Admin@example.com" target="_blank" rel="noopener">Admin@example.com</a>凭证： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ./fabric-ca-files/example.com/admin</span><br><span class="line">$ fabric-ca-client enroll -u http://Admin@example.com:password@localhost:7054  -H `pwd`/fabric-ca-files/example.com/admin</span><br><span class="line">$ ls ./fabric-ca-files/example.com/admin</span><br><span class="line">fabric-ca-client-config.yaml  msp/</span><br></pre></td></tr></table></figure><p>这时候可以用<a href="mailto:Admin@example.com" target="_blank" rel="noopener">Admin@example.com</a>的身份查看联盟： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/example.com/admin</span><br><span class="line">2018/04/28 15:35:10 [INFO] 127.0.0.1:38172 GET /affiliations 201 0 &quot;OK&quot;</span><br><span class="line">affiliation: com</span><br><span class="line">   affiliation: com.example</span><br><span class="line">      affiliation: com.example.org1</span><br><span class="line">      affiliation: com.example.org2</span><br></pre></td></tr></table></figure><p>最后将<a href="mailto:Admin@example.com" target="_blank" rel="noopener">Admin@example.com</a>的证书复制到example.com/msp/admincerts/中： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/example.com/msp/admincerts/</span><br><span class="line">cp fabric-ca-files/example.com/admin/msp/signcerts/cert.pem  fabric-ca-files/example.com/msp/admincerts/</span><br></pre></td></tr></table></figure><h2 id="注册org1-example-com的管理员Admin-org1-example-com"><a href="#注册org1-example-com的管理员Admin-org1-example-com" class="headerlink" title="注册org1.example.com的管理员Admin@org1.example.com"></a>注册org1.example.com的管理员<a href="mailto:Admin@org1.example.com" target="_blank" rel="noopener">Admin@org1.example.com</a></h2><p>为org1.example.com的管理员<a href="mailto:Admin@org1.example.com" target="_blank" rel="noopener">Admin@org1.example.com</a>准备一个目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/fabric-deploy</span><br><span class="line">mkdir -p ./fabric-ca-files/org1.example.com/admin</span><br></pre></td></tr></table></figure><p>将<code>fabric-ca-files/admin/fabric-ca-client-config.yaml</code>其中的<code>id</code>部分修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: Admin@org1.example.com</span><br><span class="line">  type: client</span><br><span class="line">  affiliation: com.example.org1</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: hf.Registrar.Roles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.DelegateRoles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.Attributes</span><br><span class="line">      value: &quot;*&quot;</span><br><span class="line">    - name: hf.GenCRL</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.Revoker</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.AffiliationMgr</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.IntermediateCA</span><br><span class="line">      value: true</span><br><span class="line">    - name: role</span><br><span class="line">      value: admin</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password</span><br></pre></td></tr></table></figure><p>生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fabric-ca-client enroll -u http://Admin@org1.example.com:password@localhost:7054  -H `pwd`/fabric-ca-files/org1.example.com/admin</span><br><span class="line">$ ls ./fabric-ca-files/org1.example.com/admin</span><br><span class="line">fabric-ca-client-config.yaml  msp/</span><br></pre></td></tr></table></figure><p>查看联盟：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/org1.example.com/admin</span><br><span class="line">2018/05/04 15:42:53 [INFO] 127.0.0.1:51298 GET /affiliations 201 0 &quot;OK&quot;</span><br><span class="line">affiliation: com</span><br><span class="line">   affiliation: com.example</span><br><span class="line">      affiliation: com.example.org1</span><br></pre></td></tr></table></figure><p>注意与<a href="mailto:`Admin@example.com" target="_blank" rel="noopener">`Admin@example.com</a>`的区别，这里只能看到组织com.example.org1</p><p>将<a href="mailto:Admin@org1.example.com" target="_blank" rel="noopener">Admin@org1.example.com</a>的证书复制到<code>org1.example.com</code>的<code>msp/admincerts</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org1.example.com/msp/admincerts/</span><br><span class="line">cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem  fabric-ca-files/org1.example.com/msp/admincerts/</span><br></pre></td></tr></table></figure><p>在<a href="mailto:`Admin@org1.example.com" target="_blank" rel="noopener">`Admin@org1.example.com</a>目录`中也需要创建msp/admincerts目录，通过peer命令操作fabric的时候会要求admincerts存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org1.example.com/admin/msp/admincerts/     # 注意是org1.example.com/admin目录</span><br><span class="line">cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem  fabric-ca-files/org1.example.com/admin/msp/admincerts/</span><br></pre></td></tr></table></figure><p>另外，这里没有使用中间CA，将intermediatecerts中的空文件删除，否则peer会提示Warning：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm fabric-ca-files/org1.example.com/admin/msp/intermediatecerts/*</span><br></pre></td></tr></table></figure><h2 id="注册org2-example-com的管理员Admin-org2-example-com"><a href="#注册org2-example-com的管理员Admin-org2-example-com" class="headerlink" title="注册org2.example.com的管理员Admin@org2.example.com"></a>注册org2.example.com的管理员<a href="mailto:Admin@org2.example.com" target="_blank" rel="noopener">Admin@org2.example.com</a></h2><p>为org2.example.com的管理员<a href="mailto:Admin@org2.example.com" target="_blank" rel="noopener">Admin@org2.example.com</a>准备一个目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/fabric-deploy</span><br><span class="line">mkdir -p ./fabric-ca-files/org2.example.com/admin</span><br></pre></td></tr></table></figure><p>将<code>fabric-ca-files/admin/fabric-ca-client-config.yaml</code>其中的<code>id</code>部分修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: Admin@org2.example.com</span><br><span class="line">  type: client</span><br><span class="line">  affiliation: com.example.org2</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: hf.Registrar.Roles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.DelegateRoles</span><br><span class="line">      value: client,orderer,peer,user</span><br><span class="line">    - name: hf.Registrar.Attributes</span><br><span class="line">      value: &quot;*&quot;</span><br><span class="line">    - name: hf.GenCRL</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.Revoker</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.AffiliationMgr</span><br><span class="line">      value: true</span><br><span class="line">    - name: hf.IntermediateCA</span><br><span class="line">      value: true</span><br><span class="line">    - name: role</span><br><span class="line">      value: admin</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password</span><br></pre></td></tr></table></figure><p>生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fabric-ca-client enroll -u http://Admin@org2.example.com:password@localhost:7054  -H `pwd`/fabric-ca-files/org2.example.com/admin</span><br><span class="line">$ ls ./fabric-ca-files/org2.example.com/admin</span><br><span class="line">fabric-ca-client-config.yaml  msp/</span><br></pre></td></tr></table></figure><p>查看联盟：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/org2.example.com/admin</span><br><span class="line">2018/05/02 16:49:00 [INFO] 127.0.0.1:50828 GET /affiliations 201 0 &quot;OK&quot;</span><br><span class="line">affiliation: com</span><br><span class="line">   affiliation: com.example</span><br><span class="line">      affiliation: com.example.org2</span><br></pre></td></tr></table></figure><p><a href="mailto:Admin@org2.example.com" target="_blank" rel="noopener">Admin@org2.example.com</a>只能看到组织<code>com.example.org2</code>。</p><p>将<a href="mailto:Admin@org2.example.com" target="_blank" rel="noopener">Admin@org2.example.com</a>的证书复制到org2.example.com的msp/admincerts中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org2.example.com/msp/admincerts/</span><br><span class="line">cp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem  fabric-ca-files/org2.example.com/msp/admincerts/</span><br></pre></td></tr></table></figure><p>在<a href="mailto:Admin@org2.example.com" target="_blank" rel="noopener">Admin@org2.example.com</a>中也需要创建msp/admincerts目录，通过peer命令操作fabric的时候会要求admincerts存在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org2.example.com/admin/msp/admincerts/</span><br><span class="line">cp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem  fabric-ca-files/org2.example.com/admin/msp/admincerts/</span><br></pre></td></tr></table></figure><p>另外，这里没有使用中间CA，将intermediatecerts中的空文件删除，否则peer会提示Warning：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm fabric-ca-files/org2.example.com/admin/msp/intermediatecerts/*</span><br></pre></td></tr></table></figure><h2 id="各个组织分别使用自己的Admin账户创建其它账号"><a href="#各个组织分别使用自己的Admin账户创建其它账号" class="headerlink" title="各个组织分别使用自己的Admin账户创建其它账号"></a>各个组织分别使用自己的Admin账户创建其它账号</h2><p>example.com、org1.example.com、org2.example.com三个组织这时候可以分别使用自己的Admin账号创建子账号。 </p><h3 id="orderer-example-com"><a href="#orderer-example-com" class="headerlink" title="orderer.example.com"></a>orderer.example.com</h3><p>使用<a href="mailto:`Admin@example.com" target="_blank" rel="noopener">`Admin@example.com</a><code>注册账号orderer.example.com。注意这时候指定的目录是fabric-ca-files/</code>example.com`/admin/。</p><p>修改fabric-ca-files/example.com/admin/fabric-ca-client-config.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: orderer.example.com</span><br><span class="line">  type: orderer</span><br><span class="line">  affiliation: com.example</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: role</span><br><span class="line">      value: orderer</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册以及生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/example.com/admin --id.secret=password</span><br><span class="line">mkdir ./fabric-ca-files/example.com/orderer</span><br><span class="line">fabric-ca-client enroll -u http://orderer.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/example.com/orderer</span><br></pre></td></tr></table></figure><p>将<a href="mailto:`Admin@example.com" target="_blank" rel="noopener">`Admin@example.com</a>`的证书复制到fabric-ca-files/example.com/orderer/msp/admincerts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/example.com/orderer/msp/admincerts</span><br><span class="line">cp fabric-ca-files/example.com/admin/msp/signcerts/cert.pem fabric-ca-files/example.com/orderer/msp/admincerts/</span><br></pre></td></tr></table></figure><h3 id="peer0-org1-example-com"><a href="#peer0-org1-example-com" class="headerlink" title="peer0.org1.example.com"></a>peer0.org1.example.com</h3><p>使用<a href="mailto:`Admin@org1.example.com" target="_blank" rel="noopener">`Admin@org1.example.com</a><code>注册账号peer0.org1.example.com。这时候指定的目录是fabric-ca-files/</code>org1.example.com`/admin/。</p><p>修改fabric-ca-files/org1.example.com/admin/fabric-ca-client-config.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: peer0.org1.example.com</span><br><span class="line">  type: peer</span><br><span class="line">  affiliation: com.example.org1</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: role</span><br><span class="line">      value: peer</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册以及生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/org1.example.com/admin --id.secret=password</span><br><span class="line">mkdir ./fabric-ca-files/org1.example.com/peer0</span><br><span class="line">fabric-ca-client enroll -u http://peer0.org1.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org1.example.com/peer0</span><br></pre></td></tr></table></figure><p>将<a href="mailto:`Admin@org1.example.com" target="_blank" rel="noopener">`Admin@org1.example.com</a>`的证书复制到fabric-ca-files/org1.example.com/peer0/msp/admincerts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org1.example.com/peer0/msp/admincerts</span><br><span class="line">cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/peer0/msp/admincerts/</span><br></pre></td></tr></table></figure><h3 id="peer1-org1-example-com"><a href="#peer1-org1-example-com" class="headerlink" title="peer1.org1.example.com"></a>peer1.org1.example.com</h3><p>使用<a href="mailto:`Admin@org1.example.com" target="_blank" rel="noopener">`Admin@org1.example.com</a><code>注册账号peer1.org1.example.com。这时候指定的目录是fabric-ca-files/</code>org1.example.com`/admin/。</p><p>修改fabric-ca-files/org1.example.com/admin/fabric-ca-client-config.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: peer1.org1.example.com</span><br><span class="line">  type: peer</span><br><span class="line">  affiliation: com.example.org1</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: role</span><br><span class="line">      value: peer</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册以及生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/org1.example.com/admin --id.secret=password</span><br><span class="line">mkdir ./fabric-ca-files/org1.example.com/peer1</span><br><span class="line">fabric-ca-client enroll -u http://peer1.org1.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org1.example.com/peer1</span><br></pre></td></tr></table></figure><p>将<a href="mailto:`Admin@org1.example.com" target="_blank" rel="noopener">`Admin@org1.example.com</a>`的证书复制到fabric-ca-files/org1.example.com/peer1/msp/admincerts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org1.example.com/peer1/msp/admincerts</span><br><span class="line">cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/peer1/msp/admincerts/</span><br></pre></td></tr></table></figure><h3 id="peer0-org2-example-com"><a href="#peer0-org2-example-com" class="headerlink" title="peer0.org2.example.com"></a>peer0.org2.example.com</h3><p>使用<a href="mailto:`Admin@org2.example.com" target="_blank" rel="noopener">`Admin@org2.example.com</a><code>注册账号peer0.org2.example.com。这时候指定的目录是fabric-ca-files/</code>org2.example.com`/admin/。</p><p>修改fabric-ca-files/org2.example.com/admin/fabric-ca-client-config.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id:</span><br><span class="line">  name: peer0.org2.example.com</span><br><span class="line">  type: peer</span><br><span class="line">  affiliation: com.example.org2</span><br><span class="line">  maxenrollments: 0</span><br><span class="line">  attributes:</span><br><span class="line">    - name: role</span><br><span class="line">      value: peer</span><br><span class="line">      ecert: true</span><br></pre></td></tr></table></figure><p>注册以及生成凭证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -H `pwd`/fabric-ca-files/org2.example.com/admin --id.secret=password</span><br><span class="line">mkdir ./fabric-ca-files/org2.example.com/peer0</span><br><span class="line">fabric-ca-client enroll -u http://peer0.org2.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org2.example.com/peer0</span><br></pre></td></tr></table></figure><p>将<a href="mailto:`Admin@org2.example.com" target="_blank" rel="noopener">`Admin@org2.example.com</a>`的证书复制到fabric-ca-files/org2.example.com/peer0/msp/admincerts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir fabric-ca-files/org2.example.com/peer0/msp/admincerts</span><br><span class="line">cp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org2.example.com/peer0/msp/admincerts/</span><br></pre></td></tr></table></figure><p>注意：</p><p>之前发现直接这么生成的证书，会少东西，需要在每个组织的msp目录下面配置下config.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost msp]# pwd</span><br><span class="line">/data/fabric/fabric-ca-files/gzyb.vaccine.com/msp</span><br><span class="line">[root@localhost msp]# cat config.yaml </span><br><span class="line">NodeOUs:</span><br><span class="line">  Enable: true</span><br><span class="line">  ClientOUIdentifier:</span><br><span class="line">    Certificate: cacerts/localhost-7054.pem</span><br><span class="line">    OrganizationalUnitIdentifier: client</span><br><span class="line">  PeerOUIdentifier:</span><br><span class="line">    Certificate: cacerts/localhost-7054.pem</span><br><span class="line">    OrganizationalUnitIdentifier: peer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;部署一个fabric-ca架构图&quot;&gt;&lt;a href=&quot;#部署一个fabric-ca架构图&quot; class=&quot;headerlink&quot; title=&quot;部署一个fabric-ca架构图&quot;&gt;&lt;/a&gt;部署一个fabric-ca架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
      <category term="区块链" scheme="https://shenshengkun.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>Prometheus监控</title>
    <link href="https://shenshengkun.github.io/2019/01/29/k8s/prometheus/"/>
    <id>https://shenshengkun.github.io/2019/01/29/k8s/prometheus/</id>
    <published>2019-01-29T07:33:01.000Z</published>
    <updated>2019-04-24T01:41:43.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Kubernetes上快速部署Prometheus"><a href="#在Kubernetes上快速部署Prometheus" class="headerlink" title="在Kubernetes上快速部署Prometheus"></a>在Kubernetes上快速部署Prometheus</h1><h2 id="创建一个新的命名空间"><a href="#创建一个新的命名空间" class="headerlink" title="创建一个新的命名空间"></a>创建一个新的命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@prometheus]# cat monitor_namespace.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">   name: monitor</span><br><span class="line">   labels:</span><br><span class="line">     name: monitor</span><br><span class="line">[root@prometheus]#kubectl create -f monitor_namespace.yaml</span><br></pre></td></tr></table></figure><h2 id="rbac文件"><a href="#rbac文件" class="headerlink" title="rbac文件"></a>rbac文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@prometheus]# cat rbac-setup.yaml </span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">- nonResourceURLs: [&quot;/metrics&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;]</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitor</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitor</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[root@prometheus]#kubectl create -f rbac-setup.yaml</span><br></pre></td></tr></table></figure><h2 id="prometheus-deploy文件"><a href="#prometheus-deploy文件" class="headerlink" title="prometheus-deploy文件"></a>prometheus-deploy文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line">[root@prometheus]# cat configmap.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: monitor</span><br><span class="line">data:</span><br><span class="line">  #被引用到/etc/prometheus/prometheus.yml</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      #每15s采集一次数据和15s做一次告警检测</span><br><span class="line">      scrape_interval:     15s</span><br><span class="line">      evaluation_interval: 15s</span><br><span class="line">    #指定加载的告警规则文件</span><br><span class="line">    rule_files:</span><br><span class="line">    - /etc/prometheus/rules.yml</span><br><span class="line">    #将报警送至何地进行报警</span><br><span class="line">    alerting:</span><br><span class="line">      alertmanagers:</span><br><span class="line">        - static_configs:</span><br><span class="line">          - targets: [&quot;192.168.50.60:9093&quot;]</span><br><span class="line">    #指定prometheus要监控的目标</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: &apos;k8s-node&apos;</span><br><span class="line">      scrape_interval: 10s</span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: </span><br><span class="line">        - &apos;192.168.50.61:31672&apos;</span><br><span class="line">    </span><br><span class="line">    #自定义获取监控数据,每个 job_name 都是独立的</span><br><span class="line">    - job_name: &apos;tomcat-pods&apos;</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape, __meta_kubernetes_service_annotation_prometheus_io_jvm_scrape]</span><br><span class="line">        regex: true;true</span><br><span class="line">        action: keep</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_app_metrics_patn]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_service_annotation_prometheus_io_app_metrics_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: (.+);(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_pod_name</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_host_ip]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_host_ip</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-apiservers&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-nodes&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-cadvisor&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-service-endpoints&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: true</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __scheme__</span><br><span class="line">        regex: (https?)</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: $1:$2</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-services&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: service</span><br><span class="line">      metrics_path: /probe</span><br><span class="line">      params:</span><br><span class="line">        module: [http_2xx]</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: true</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: blackbox-exporter.example.com:9115</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line">    - job_name: &apos;kubernetes-ingresses&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: ingress</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: true</span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]</span><br><span class="line">        regex: (.+);(.+);(.+)</span><br><span class="line">        replacement: $&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: blackbox-exporter.example.com:9115</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_ingress_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_name]</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line">    - job_name: &apos;kubernetes-pods&apos;</span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: pod</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: true</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: $1:$2</span><br><span class="line">        target_label: __address__</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_pod_name</span><br><span class="line">  # 监控规则文件,被引用到/etc/prometheus/rules.yml</span><br><span class="line">  rules.yml: |</span><br><span class="line">    groups:</span><br><span class="line">    - name: test-rule</span><br><span class="line">      rules:</span><br><span class="line"></span><br><span class="line">      ############# Node监控 #############</span><br><span class="line">      - alert: k8s-node状态异常</span><br><span class="line">        expr: up&#123;job=&quot;k8s-node&quot;&#125; != 1</span><br><span class="line">        for: 3m</span><br><span class="line">        labels:</span><br><span class="line">          team: k8s-node</span><br><span class="line">        annotations:</span><br><span class="line">          summary: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点状态异常&quot;</span><br><span class="line">          description: &quot;可能是重启了&quot;</span><br><span class="line">      - alert: k8s-node节点CPU使用率</span><br><span class="line">        expr: (1 - avg(irate(node_cpu_seconds_total&#123;job=&quot;k8s-node&quot;,mode=&quot;idle&quot;&#125;[1m])) by (instance)) * 100  &gt; 95</span><br><span class="line">        for: 1m</span><br><span class="line">        labels:</span><br><span class="line">          team: k8s-node</span><br><span class="line">        annotations:</span><br><span class="line">          summary: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点CPU使用率超过95%&quot;</span><br><span class="line">          description: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点当前CPU使用率为: &#123;&#123; $value &#125;&#125;&quot;</span><br><span class="line">      - alert: k8s-node节点磁盘使用率</span><br><span class="line">        expr: (node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125; - node_filesystem_avail_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125;) / node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125; * 100 &gt; 85</span><br><span class="line">        for: 1m</span><br><span class="line">        labels:</span><br><span class="line">          team: k8s-node</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;Node服务器[[ &#123;&#123;$labels.instance&#125;&#125; ]] 的 &#123;&#123;mountpoint&#125;&#125; 磁盘空间使用率超过85%&quot;</span><br><span class="line">          summary: &quot;磁盘 &#123;&#123;$labels.device&#125;&#125; 当前使用率为: &#123;&#123; $value &#125;&#125;&quot;</span><br><span class="line">      - alert: k8s-node节点内存使用率</span><br><span class="line">        expr: (node_memory_MemTotal_bytes&#123;job=&quot;k8s-node&quot;&#125; - (node_memory_Buffers_bytes&#123;job=&quot;k8s-node&quot;&#125; + node_memory_Cached_bytes&#123;job=&quot;k8s-node&quot;&#125; + node_memory_MemFree_bytes&#123;job=&quot;k8s-node&quot;&#125;)) / node_memory_MemTotal_bytes&#123;job=&quot;k8s-node&quot;&#125; * 100</span><br><span class="line">        for: 1m</span><br><span class="line">        labels:</span><br><span class="line">          team: k8s-node</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;Node服务器[[ &#123;&#123;$labels.instance&#125;&#125; ]]  内存使用率超过95%&quot;</span><br><span class="line">          summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 当前内存使用率为: &#123;&#123; $value &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">      ############ Pod 监控 ############</span><br><span class="line">      - alert: 监控k8s的pod状态异常</span><br><span class="line">        expr: up&#123;kubernetes_namespace=&quot;monitor&quot;&#125; != 1</span><br><span class="line">        for: 3m</span><br><span class="line">        labels:</span><br><span class="line">          team: &quot;kube-state-metrics&quot;</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;&#123;&#123;$labels.kubernetes_namespace&#125;&#125; 内的 pod 状态有变动&quot;</span><br><span class="line">          summary: &quot;此 Pod 用于获取 k8s 监控数据, 绑定在一个节点上&quot;</span><br><span class="line">      - alert: 应用的 pod 状态有变动</span><br><span class="line">        expr: kube_pod_container_status_ready&#123;namespace=&quot;product&quot;&#125; != 1</span><br><span class="line">        for: 3m</span><br><span class="line">        labels:</span><br><span class="line">          status: &quot;product 命名空间内的 pod &#123;&#123;$labels.pod&#125;&#125;有变动&quot;</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;Deployment &#123;&#123;$labels.container&#125;&#125; 内的 pod 状态有变动&quot;</span><br><span class="line">          summary: &quot;可能是重启或者在升级版本,如果频繁重启,请跟踪排查问题&quot;</span><br><span class="line">      - alert: 以下应用的 pod 重启次数已经超过15,请查看原因</span><br><span class="line">        expr: kube_pod_container_status_restarts_total&#123;namespace=&quot;product&quot;&#125; &gt; 15</span><br><span class="line">        for: 3m</span><br><span class="line">        labels:</span><br><span class="line">          status: &quot;product 命名空间内的 pod &#123;&#123;$labels.pod&#125;&#125; 重启次数太多&quot;</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;Deployment &#123;&#123;$labels.container&#125;&#125; 内的 pod 重启次数太多&quot;</span><br><span class="line">          summary: &quot;重启次数太多,可能是因为 pod 内应用有问题&quot;</span><br><span class="line">      ########### Java 监控 ############</span><br><span class="line">      - alert: jvm线程数过高</span><br><span class="line">        expr: jvm_threads_current&#123;job=&quot;tomcat-pods&quot;&#125;&gt;2000</span><br><span class="line">        for: 1m</span><br><span class="line">        labels:</span><br><span class="line">          status: &quot;空间内 jvm 的变动情况&quot;</span><br><span class="line">        annotations:</span><br><span class="line">          description: &quot;&#123;&#123;$labels.kubernetes_pod_name&#125;&#125;: Jvm线程数过高&quot;</span><br><span class="line">          summary: &apos;&#123;&#123; $labels.kubernetes_pod_name &#125;&#125; : 当前你线程值为: &#123;&#123; $value &#125;&#125;&apos;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">[root@prometheus]# cat prometheus.deploy.yml </span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1beta2</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus-deployment</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitor</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:v2.6.0</span><br><span class="line">        name: prometheus</span><br><span class="line">        command:</span><br><span class="line">        - &quot;/bin/prometheus&quot;</span><br><span class="line">        args:</span><br><span class="line">        - &quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span><br><span class="line">        - &quot;--storage.tsdb.path=/home/prometheus&quot;</span><br><span class="line">        - &quot;--storage.tsdb.retention=168h&quot;</span><br><span class="line">        - &quot;--web.enable-lifecycle&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &quot;/home/prometheus&quot;</span><br><span class="line">          name: data</span><br><span class="line">        - mountPath: &quot;/etc/prometheus&quot;</span><br><span class="line">          name: config-volume</span><br><span class="line">        - mountPath: &quot;/etc/localtime&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">          name: localtime</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 2048Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 3180Mi</span><br><span class="line">      serviceAccountName: prometheus    </span><br><span class="line">      nodeSelector:</span><br><span class="line">        nodetype: prometheus</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &quot;/opt/prometheus/data&quot;</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: prometheus-config</span><br><span class="line">      - name: localtime</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &quot;/etc/localtime&quot;</span><br><span class="line">          type: File</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> [root@prometheus]# cat prometheus.svc.yml </span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitor</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9090</span><br><span class="line">    targetPort: 9090</span><br><span class="line">    nodePort: 30003</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">[root@prometheus]#kubectl create -f configmap.yaml</span><br><span class="line">[root@prometheus]#kubectl create -f prometheus.deploy.yml</span><br><span class="line">[root@prometheus]#kubectl create -f prometheus.svc.yml</span><br><span class="line"></span><br><span class="line">注：需要在本地创建/opt/prometheus/data作为prometheus数据路径，另需要给data目录赋予777权限</span><br></pre></td></tr></table></figure><h3 id="热重读配置文件"><a href="#热重读配置文件" class="headerlink" title="热重读配置文件"></a>热重读配置文件</h3><p>congfigmap有热重启功能，这样每次改完配置文件都不需要重启prometheus的pod来重读配置了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- &quot;--web.enable-lifecycle&quot;在prometheus.deploy.yml的配置文件里面加上这段话就可以了</span><br><span class="line"></span><br><span class="line">[root@prometheus]# cat reload-prometheus.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">kubectl apply -f configmap.yaml</span><br><span class="line">sleep 60</span><br><span class="line">curl -XPOST http://192.168.50.60:30003/-/reload</span><br><span class="line"></span><br><span class="line">可以写个脚本，每次修改完配置文件的配置之后，执行一下脚本就可以同步生效了！</span><br></pre></td></tr></table></figure><h2 id="安装kube-state-metrics"><a href="#安装kube-state-metrics" class="headerlink" title="安装kube-state-metrics"></a>安装kube-state-metrics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@prometheus]# git clone https://github.com/kubernetes/kube-state-metrics.git</span><br><span class="line">之后把默认的命名空间改成monitor，进入kube-state-metrics目录</span><br><span class="line">[root@prometheus]#kubectl create -f ./</span><br></pre></td></tr></table></figure><h1 id="安装grafana"><a href="#安装grafana" class="headerlink" title="安装grafana"></a>安装grafana</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">创建grafana的数据目录</span><br><span class="line">mkdir /opt/grafana/data</span><br><span class="line">启动脚本</span><br><span class="line">[root@grafana]# cat start_grafana.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">docker stop `docker ps -a |awk &apos;/grafana/&#123;print $1&#125;&apos;`</span><br><span class="line">docker rm `docker ps -a |awk &apos;/grafana/&#123;print $1&#125;&apos;`</span><br><span class="line">docker run -d \</span><br><span class="line">   --name=grafana \</span><br><span class="line">   --restart=always \</span><br><span class="line">   -p 3000:3000 \</span><br><span class="line">   -m 4096m \</span><br><span class="line">   -v /opt/grafana/data:/var/lib/grafana \</span><br><span class="line">   -v /opt/grafana/log:/var/log/grafana \</span><br><span class="line">   grafana/grafana:5.4.3</span><br></pre></td></tr></table></figure><p>1、安装完之后，需要添加source，source直接点prometheus，链接就是<a href="http://192.168.50.60:30003之前创建的prometheus界面" target="_blank" rel="noopener">http://192.168.50.60:30003之前创建的prometheus界面</a></p><p>2、添加模板dashboad（列出几个常用的）</p><p>点import导入，有俩种方式，直接填官网模板，或者导入json</p><p><a href="https://grafana.com/dashboards/9276" target="_blank" rel="noopener">https://grafana.com/dashboards/9276</a>  node的cpu、内存等</p><p><a href="https://grafana.com/dashboards/3146" target="_blank" rel="noopener">https://grafana.com/dashboards/3146</a>  pod</p><p><a href="https://grafana.com/dashboards/8588" target="_blank" rel="noopener">https://grafana.com/dashboards/8588</a>  deployment</p><h1 id="安装alertmanager"><a href="#安装alertmanager" class="headerlink" title="安装alertmanager"></a>安装alertmanager</h1><h2 id="创建配置文件、目录"><a href="#创建配置文件、目录" class="headerlink" title="创建配置文件、目录"></a>创建配置文件、目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">创建alert数据目录</span><br><span class="line">mkdir /opt/alert/data</span><br><span class="line"></span><br><span class="line">注意：需要alertmanager.yml配置，此配置钉钉和邮件可同时放松</span><br><span class="line">[root@docker60 alert]# cat alertmanager.yml </span><br><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line"></span><br><span class="line">route:</span><br><span class="line">  group_by: [&apos;alertname&apos;]</span><br><span class="line">  group_wait: 10s</span><br><span class="line">  group_interval: 10s</span><br><span class="line">  repeat_interval: 6m</span><br><span class="line">  receiver: default</span><br><span class="line">receivers:</span><br><span class="line">- name: &apos;default&apos;</span><br><span class="line">  email_configs:</span><br><span class="line">  - to: &quot;&quot;</span><br><span class="line">    send_resolved: true</span><br><span class="line">    from: &quot;&quot;</span><br><span class="line">    smarthost:  &quot;smtp.xxx.com:25&quot;</span><br><span class="line">    auth_username: &quot;&quot;</span><br><span class="line">    auth_password: &quot;&quot;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &apos;http://192.168.50.60:8060/dingtalk/ops_dingding/send&apos;</span><br><span class="line">    send_resolved: true</span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &apos;critical&apos;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &apos;warning&apos;</span><br><span class="line">    equal: [&apos;alertname&apos;]</span><br></pre></td></tr></table></figure><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@alert]# cat start_alert.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">docker stop `docker ps -a |awk &apos;/alertmanager/&#123;print $1&#125;&apos;`</span><br><span class="line">docker rm `docker ps -a |awk &apos;/alertmanager/&#123;print $1&#125;&apos;`</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">  --name alertmanager \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -p 9093:9093 \</span><br><span class="line">  -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">  -v /opt/alert/alertmanager.yml:/etc/alertmanager/alertmanager.yml \</span><br><span class="line">  -v /opt/alert/data:/alertmanager \</span><br><span class="line">  prom/alertmanager:v0.15.3</span><br></pre></td></tr></table></figure><h2 id="安装dingding插件"><a href="#安装dingding插件" class="headerlink" title="安装dingding插件"></a>安装dingding插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、安装go （这里就不叙述了）</span><br><span class="line">2、假设go的路径是/usr/local/go</span><br><span class="line">mkdir -pv /usr/local/go/src/github.com/timonwong</span><br><span class="line">3、下载dingding插件</span><br><span class="line">git clone https://github.com/timonwong/prometheus-webhook-dingtalk.git</span><br><span class="line">4、添加dingding机器人</span><br><span class="line">在dingding群里面添加即可</span><br><span class="line">5、启动dingding</span><br><span class="line">[root@alert]# cat start_dingding.sh </span><br><span class="line">cd /usr/local/go/src/github.com/timonwong/prometheus-webhook-dingtalk</span><br><span class="line">kill -9 `ps -ef | grep prometheus-webhook-dingtalk | grep -v grep | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">nohup ./prometheus-webhook-dingtalk --ding.profile=&quot;ops_dingding=https://oapi.dingtalk.com/robot/send?access_token=xxxx&quot;   2&gt;&amp;1 1&gt;dingding.log &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在Kubernetes上快速部署Prometheus&quot;&gt;&lt;a href=&quot;#在Kubernetes上快速部署Prometheus&quot; class=&quot;headerlink&quot; title=&quot;在Kubernetes上快速部署Prometheus&quot;&gt;&lt;/a&gt;在Kuberne
      
    
    </summary>
    
      <category term="k8s" scheme="https://shenshengkun.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>jira-安装及破解</title>
    <link href="https://shenshengkun.github.io/2018/11/21/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/jira-%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/"/>
    <id>https://shenshengkun.github.io/2018/11/21/版本管理工具/jira-安装及破解/</id>
    <published>2018-11-20T23:28:40.000Z</published>
    <updated>2019-03-19T05:55:19.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装jira"><a href="#安装jira" class="headerlink" title="安装jira"></a>安装jira</h1><p>JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。 </p><p><img src="https://shenshengkun.github.io/images/jira1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">下载包：</span><br><span class="line"></span><br><span class="line">wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-7.13.0-x64.bin</span><br><span class="line">[root@YZSJHL82-204 ~]# chmod +x atlassian-jira-software-7.13.0-x64.bin</span><br><span class="line">[root@YZSJHL82-204 ~]# ./atlassian-jira-software-7.13.0-x64.bin</span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line">十月 23, 2018 4:38:25 下午 java.util.prefs.FileSystemPreferences$1 run</span><br><span class="line">信息: Created user preferences directory.</span><br><span class="line">十月 23, 2018 4:38:25 下午 java.util.prefs.FileSystemPreferences$2 run</span><br><span class="line">信息: Created system preferences directory in java.home.</span><br><span class="line">This will install JIRA Software 7.4.1 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o               #按o安装</span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing JIRA installation [3]</span><br><span class="line">2               #2为自定义安装</span><br><span class="line">Where should JIRA Software be installed?</span><br><span class="line">[/opt/atlassian/jira]</span><br><span class="line">/usr/local/atlassina/jira       #自定义安装目录</span><br><span class="line">Default location for JIRA Software data</span><br><span class="line">[/var/atlassian/application-data/jira]</span><br><span class="line">/usr/local/atlassina/jira_data          #自定义数据目录</span><br><span class="line">Configure which ports JIRA Software will use.</span><br><span class="line">JIRA requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is where you will access JIRA</span><br><span class="line">through your browser. The Control port is used to startup and shutdown JIRA.</span><br><span class="line">Use default ports (HTTP: 8080, Control: 8005) - Recommended [1, Enter], Set custom value for HTTP and Control ports [2]</span><br><span class="line">2               #2为自定义端口</span><br><span class="line">HTTP Port Number</span><br><span class="line">[8080]          #8080为默认端口</span><br><span class="line">8050            #http连接端口</span><br><span class="line">Control Port Number</span><br><span class="line">[8005]</span><br><span class="line">8040            #控制端口</span><br><span class="line">JIRA can be run in the background.</span><br><span class="line">You may choose to run JIRA as a service, which means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install JIRA as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y               #是否开机自启</span><br><span class="line">Details on where JIRA Software will be installed and the settings that will be used.</span><br><span class="line">Installation Directory: /usr/local/atlassina/jira </span><br><span class="line">Home Directory: /usr/local/atlassina/jira_data </span><br><span class="line">HTTP Port: 8050 </span><br><span class="line">RMI Port: 8040 </span><br><span class="line">Install as service: Yes </span><br><span class="line">Install [i, Enter], Exit [e]</span><br><span class="line">i               #确认已选配置</span><br><span class="line">Extracting files ...</span><br><span class="line">Please wait a few moments while JIRA Software is configured.</span><br><span class="line">Installation of JIRA Software 7.4.1 is complete</span><br><span class="line">Start JIRA Software 7.4.1 now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y               #启动</span><br><span class="line">Please wait a few moments while JIRA Software starts up.</span><br><span class="line">Launching JIRA Software ...</span><br><span class="line">Installation of JIRA Software 7.4.1 is complete</span><br><span class="line">Your installation of JIRA Software 7.4.1 is now ready and can be accessed</span><br><span class="line">via your browser.</span><br><span class="line">JIRA Software 7.4.1 can be accessed at http://localhost:8050</span><br><span class="line">Finishing installation ...</span><br></pre></td></tr></table></figure><p><img src="https://shenshengkun.github.io/images/jira2.png" alt=""></p><p>浏览器访问jira，地址为：<a href="http://IP:8050" target="_blank" rel="noopener">http://IP:8050</a> 请自行修改IP和端口。如果可以访问，说明安装成功。</p><p><img src="https://shenshengkun.github.io/images/jira3.png" alt=""></p><h1 id="配置数据库及密码"><a href="#配置数据库及密码" class="headerlink" title="配置数据库及密码"></a>配置数据库及密码</h1><p><img src="https://shenshengkun.github.io/images/jira4.png" alt=""><br>在mySQL上创建用户及库做授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database jira_new;</span><br><span class="line">grant all privileges on *.* to jira@&apos;10.4.82.204&apos; identified by &apos;jira&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>在授权完用户我们不可以马上填写信息，需要添加MySQL的一个jra包，否则下一步会提示找不到mysql的驱动</p><p>wget <a href="https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.zip</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">停止jira</span><br><span class="line">[root@YZSJHL82-204 ~]# /etc/init.d/jira stop</span><br><span class="line">上传软件包</span><br><span class="line">[root@YZSJHL82-204 ~]# cp mysql-connector-java-5.1.46-bin.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br><span class="line">启动jira</span><br><span class="line">[root@YZSJHL82-204 ~]# /etc/init.d/jira start</span><br><span class="line">注意防火墙</span><br></pre></td></tr></table></figure></p><p>安装完数据库插件即可下一步:</p><p><img src="https://shenshengkun.github.io/images/jira5.png" alt=""></p><h1 id="设置jira主题"><a href="#设置jira主题" class="headerlink" title="设置jira主题"></a>设置jira主题</h1><p><img src="https://shenshengkun.github.io/images/jira6.png" alt=""> </p><p>因为第一次安装，我们需要去jira官网注册用户，获取授权码 (免费30天，安装后更换破解即可) </p><p><img src="https://shenshengkun.github.io/images/jira7.png" alt=""></p><p>保存好服务器ID，进入atlassian官网获取试用许可证，下边附上注册地址： </p><p>注册官网：<a href="https://my.atlassian.com" target="_blank" rel="noopener">https://my.atlassian.com</a> </p><p>或使用以下地址： </p><p><a href="https://id.atlassian.com/signup?application=mac&amp;continue=https://my.atlassian.com" target="_blank" rel="noopener">https://id.atlassian.com/signup?application=mac&amp;continue=https://my.atlassian.com</a> </p><p>登陆账号后，选择New Evaluation License</p><p><img src="https://shenshengkun.github.io/images/jira8.png" alt=""> </p><h1 id="设置管理员用户"><a href="#设置管理员用户" class="headerlink" title="设置管理员用户:"></a>设置管理员用户:</h1><p><img src="https://shenshengkun.github.io/images/jira9.png" alt=""><br>官网注册的账号只可以免费试用30天，所以当我们安装完需要尽快进行破解<br><img src="https://shenshengkun.github.io/images/jira10.jpg" alt=""></p><p><img src="https://shenshengkun.github.io/images/jira11.png" alt=""></p><h1 id="破解jira"><a href="#破解jira" class="headerlink" title="破解jira"></a>破解jira</h1><p><a href="https://download.csdn.net/download/lbwahoo/10030807" target="_blank" rel="noopener">https://download.csdn.net/download/lbwahoo/10030807</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">停止jira</span><br><span class="line">[root@YZSJHL82-204 ~]# /etc/init.d/jira stop</span><br><span class="line">进入安装目录下的atlassian-jira/WEB-INF/lib/目录下，用破解包atlassian-extras-3.2.jar替换原来的包。并将mysql连接驱动复制到此目录下。</span><br><span class="line">[root@YZSJHL82-204 ~]# cp atlassian-extras-3.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br><span class="line">启动jira</span><br><span class="line">[root@YZSJHL82-204 ~]# /etc/init.d/jira start</span><br><span class="line">注意防火墙</span><br></pre></td></tr></table></figure></p><p><img src="https://shenshengkun.github.io/images/jira12.png" alt=""></p><h1 id="配置数据库连接地址"><a href="#配置数据库连接地址" class="headerlink" title="配置数据库连接地址"></a>配置数据库连接地址</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/atlassian/application-data/jira/dbconfig.xml</span><br><span class="line">#此路径为默认路径</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装jira&quot;&gt;&lt;a href=&quot;#安装jira&quot; class=&quot;headerlink&quot; title=&quot;安装jira&quot;&gt;&lt;/a&gt;安装jira&lt;/h1&gt;&lt;p&gt;JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批
      
    
    </summary>
    
      <category term="版本管理工具" scheme="https://shenshengkun.github.io/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>python删除mongo表</title>
    <link href="https://shenshengkun.github.io/2018/10/29/python/python%E5%88%A0%E9%99%A4mongo%E8%A1%A8/"/>
    <id>https://shenshengkun.github.io/2018/10/29/python/python删除mongo表/</id>
    <published>2018-10-28T23:23:01.000Z</published>
    <updated>2019-04-26T03:48:48.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyMongo"><a href="#PyMongo" class="headerlink" title="PyMongo"></a>PyMongo</h1><p>Python 要连接 MongoDB 需要 MongoDB 驱动，这里我们使用 PyMongo 驱动来连接。 </p><h2 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h2><p>pip 是一个通用的 Python 包管理工具，提供了对 Python 包的查找、下载、安装、卸载的功能。</p><p>安装 pymongo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip3 install pymongo</span><br></pre></td></tr></table></figure><p>也可以指定安装的版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip3 install pymongo==3.5.1</span><br></pre></td></tr></table></figure><p>更新 pymongo 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip3 install --upgrade pymongo</span><br></pre></td></tr></table></figure><h2 id="easy-install-安装"><a href="#easy-install-安装" class="headerlink" title="easy_install 安装"></a>easy_install 安装</h2><p>旧版的 Python 可以使用 easy_install 来安装，easy_install 也是 Python 包管理工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m easy_install pymongo</span><br></pre></td></tr></table></figure><p>更新 pymongo 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m easy_install -U pymongo</span><br></pre></td></tr></table></figure><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>创建数据库需要使用 MongoClient 对象，并且指定连接的 URL 地址和要创建的数据库名。</p><p>如下实例中，我们创建的数据库 aa :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"> </span><br><span class="line">import pymongo</span><br><span class="line"> </span><br><span class="line">myclient = pymongo.MongoClient(&quot;mongodb://localhost:27017/&quot;)</span><br><span class="line">mydb = myclient[&quot;aa&quot;]</span><br></pre></td></tr></table></figure><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from pymongo import MongoClient</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">def delete(year,month,day):</span><br><span class="line">  try:</span><br><span class="line">    client = MongoClient(&apos;mongodb://192.168.50.223:27017,192.168.50.224:27017,192.168.50.225:27017&apos;)</span><br><span class="line">    db_auth = client.admin</span><br><span class="line">    db_auth.authenticate(&quot;root&quot;, &quot;passwd&quot;)</span><br><span class="line">    db = client.gag_bill</span><br><span class="line">    old_count = db.billInfo.count()</span><br><span class="line">    print (&quot;old_count = %d&quot; % (old_count))</span><br><span class="line">    db.billInfo.remove(&#123;&quot;cTimeStamp&quot;:&#123;&quot;$lte&quot;:datetime(year,month,day,0,0,0,000)&#125;&#125;)</span><br><span class="line">    new_count = db.billInfo.count()</span><br><span class="line">    client.close()</span><br><span class="line">    print (&quot;del_data = %d&quot; %(old_count-new_count))</span><br><span class="line">    print (&quot;new_count = %d&quot; % (new_count))</span><br><span class="line">  except Exception as e:</span><br><span class="line">    print (e)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">  starttime = datetime.now()</span><br><span class="line">  print (&quot;start_time = %s&quot; % (starttime))</span><br><span class="line">  year = starttime.year</span><br><span class="line">  month = starttime.month</span><br><span class="line">  day = starttime.day-4</span><br><span class="line">  delete(year,month,day)</span><br><span class="line">  endtime = datetime.now()</span><br><span class="line">  print (&quot;end_time = %s&quot; % (endtime))</span><br><span class="line">  runtime = (endtime - starttime).seconds</span><br><span class="line">  print (&quot;run_time = %d seconds&quot; % (runtime))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PyMongo&quot;&gt;&lt;a href=&quot;#PyMongo&quot; class=&quot;headerlink&quot; title=&quot;PyMongo&quot;&gt;&lt;/a&gt;PyMongo&lt;/h1&gt;&lt;p&gt;Python 要连接 MongoDB 需要 MongoDB 驱动，这里我们使用 PyMongo 驱动
      
    
    </summary>
    
      <category term="python" scheme="https://shenshengkun.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>mongo副本集配置及一些常用命令</title>
    <link href="https://shenshengkun.github.io/2018/09/19/%E4%B8%AD%E9%97%B4%E4%BB%B6/mongo%E5%89%AF%E6%9C%AC%E9%9B%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://shenshengkun.github.io/2018/09/19/中间件/mongo副本集配置及一些常用命令/</id>
    <published>2018-09-19T01:49:10.000Z</published>
    <updated>2019-04-26T03:42:34.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在每台机器都配置下mongo配置文件"><a href="#在每台机器都配置下mongo配置文件" class="headerlink" title="在每台机器都配置下mongo配置文件"></a>在每台机器都配置下mongo配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@mangodb1 conf]# cat mongod.conf </span><br><span class="line">dbpath= /data/mongodb/data/</span><br><span class="line">logpath=/data/mongodb/logs/mongod.log</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">maxConns=2000</span><br><span class="line">bind_ip=127.0.0.1,10.92.160.5（IP或者主机名）</span><br><span class="line">directoryperdb=true</span><br><span class="line">#auth=true</span><br><span class="line">pidfilepath=/data/mongodb/logs/mongod.pid</span><br><span class="line">replSet = rep</span><br><span class="line">#keyFile = /data/mongodb/conf/mongokey</span><br></pre></td></tr></table></figure><h1 id="配置mongo副本集"><a href="#配置mongo副本集" class="headerlink" title="配置mongo副本集"></a>配置mongo副本集</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = &#123; _id:&quot;rep&quot;,members:[&#123;_id:0,host:&quot;10.92.160.5:27017&quot;&#125;,&#123;_id:1,host:&quot;10.92.160.6:27017&quot;&#125;,&#123;_id:2,host:&quot;10.92.160.7:27017&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">rs.initiate(config);</span><br><span class="line">rs.status(); （查看集群状态的）</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show dbs 看库</span><br><span class="line">use 库</span><br><span class="line">db.setSlaveOk()</span><br><span class="line">show tables 看表</span><br></pre></td></tr></table></figure><h2 id="创建admin用户"><a href="#创建admin用户" class="headerlink" title="创建admin用户"></a>创建admin用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.addUser(&quot;root&quot;,&quot;123456&quot;)</span><br></pre></td></tr></table></figure><h2 id="导出表加个-c"><a href="#导出表加个-c" class="headerlink" title="导出表加个-c"></a>导出表加个-c</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/mongodb/bin/mongoexport -uroot -p123456 --authenticationDatabase  admin -d gag_shop -c organizationManagerAuthorities -o organizationManagerAuthorities.json</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/mongodb/bin/mongoimport -uroot -p123456 --authenticationDatabase  admin  -d open   /root/userInterfaceAuthority.json</span><br></pre></td></tr></table></figure><h2 id="查表某个字段信息"><a href="#查表某个字段信息" class="headerlink" title="查表某个字段信息"></a>查表某个字段信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.表名字.findOne(&#123;&#125;)</span><br><span class="line">db.terminalMonitorInfo.findOne(&#123;&quot;_id&quot; : &quot;086273F59379&quot;&#125;)</span><br></pre></td></tr></table></figure><h2 id="清除日志"><a href="#清除日志" class="headerlink" title="清除日志"></a>清除日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand( &#123; dropDatabase: 1 &#125; )   清楚日志，需谨慎，必须得进指定的库里面</span><br><span class="line">或者</span><br><span class="line">echo &quot;db.runCommand(&#123;dropDatabase:1&#125;)&quot; | /home/mongodb/bin/mongo -uprivate -pPrivate 127.0.0.1:27017/gag_log</span><br></pre></td></tr></table></figure><h2 id="导出命令"><a href="#导出命令" class="headerlink" title="导出命令"></a>导出命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/server/mongodb/bin/mongoexport -uroot -pNTA3NAa579  --authenticationDatabase  admin -d gag_base -c sysAuthority -q &quot;&#123;&quot;_id&quot; : /new_pro/&#125;&quot; -o new_pro.txt  导出命令</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在每台机器都配置下mongo配置文件&quot;&gt;&lt;a href=&quot;#在每台机器都配置下mongo配置文件&quot; class=&quot;headerlink&quot; title=&quot;在每台机器都配置下mongo配置文件&quot;&gt;&lt;/a&gt;在每台机器都配置下mongo配置文件&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="中间件" scheme="https://shenshengkun.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>kubectl在shell中的自动补全</title>
    <link href="https://shenshengkun.github.io/2018/05/11/k8s/kubectl%E5%9C%A8shell%E4%B8%AD%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
    <id>https://shenshengkun.github.io/2018/05/11/k8s/kubectl在shell中的自动补全/</id>
    <published>2018-05-11T05:10:01.000Z</published>
    <updated>2019-04-19T01:37:38.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在zsh上设置"><a href="#在zsh上设置" class="headerlink" title="在zsh上设置"></a>在zsh上设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion zsh)</span><br></pre></td></tr></table></figure><p>可以导入到.zshrc中实现自动加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl completion zsh &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>键入-n以后，按tab，自动弹出可用的ns：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  admin kubectl -n</span><br><span class="line">default        demo-echo      demo-webshell  kong           kube-public    kube-system</span><br></pre></td></tr></table></figure><h1 id="在linux上设置"><a href="#在linux上设置" class="headerlink" title="在linux上设置"></a>在linux上设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">echo &apos;source &lt;(kubectl completion bash)&apos; &gt;&gt;~/.bashrc</span><br><span class="line">kubectl completion bash &gt;/etc/bash_completion.d/kubectl</span><br></pre></td></tr></table></figure><h1 id="在mas上设置-bash"><a href="#在mas上设置-bash" class="headerlink" title="在mas上设置-bash"></a>在mas上设置-bash</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-completion@2</span><br><span class="line">export BASH_COMPLETION_COMPAT_DIR=/usr/local/etc/bash_completion.d</span><br><span class="line">[[ -r /usr/local/etc/profile.d/bash_completion.sh ]] &amp;&amp; . /usr/local/etc/profile.d/bash_completion.sh</span><br><span class="line">echo &apos;source &lt;(kubectl completion bash)&apos; &gt;&gt;~/.bashrc</span><br><span class="line">kubectl completion bash &gt;/usr/local/etc/bash_completion.d/kubectl</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在zsh上设置&quot;&gt;&lt;a href=&quot;#在zsh上设置&quot; class=&quot;headerlink&quot; title=&quot;在zsh上设置&quot;&gt;&lt;/a&gt;在zsh上设置&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="k8s" scheme="https://shenshengkun.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s基本命令</title>
    <link href="https://shenshengkun.github.io/2018/05/10/k8s/k8s%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://shenshengkun.github.io/2018/05/10/k8s/k8s基本命令/</id>
    <published>2018-05-10T02:10:01.000Z</published>
    <updated>2018-11-28T07:12:16.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pods"><a href="#pods" class="headerlink" title="pods"></a>pods</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n pro</span><br><span class="line">$ kubectl get pods --all-namespaces -n pro</span><br><span class="line">$ kubectl get pod aa -o wide -n pro</span><br><span class="line">$ kubectl get pod aa -o yaml -n pro</span><br><span class="line">$ kubectl describe pod aa -n pro</span><br></pre></td></tr></table></figure><h2 id="POD升级和历史"><a href="#POD升级和历史" class="headerlink" title="POD升级和历史"></a>POD升级和历史</h2><p>列出部署历史记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout history deployment/DEPLOYMENT_NAME</span><br></pre></td></tr></table></figure></p><p>跳转到特定修订版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout undo deployment/DEPLOYMENT_NAME --to-revision=N</span><br></pre></td></tr></table></figure></p><h1 id="service"><a href="#service" class="headerlink" title="service"></a>service</h1><p>查看服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get services</span><br></pre></td></tr></table></figure></p><p>将POD作为服务公开（创建端点）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment/aa --port=2000 --type=NodePort</span><br></pre></td></tr></table></figure></p><h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><p>$ kubectl exec -ti $1 bash -n product</p><h1 id="log"><a href="#log" class="headerlink" title="log"></a>log</h1><p>$ kubectl logs -f $1 -n product </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pods&quot;&gt;&lt;a href=&quot;#pods&quot; class=&quot;headerlink&quot; title=&quot;pods&quot;&gt;&lt;/a&gt;pods&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="k8s" scheme="https://shenshengkun.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>rancher升级</title>
    <link href="https://shenshengkun.github.io/2018/03/10/%E8%99%9A%E6%8B%9F%E5%8C%96/rancher%E5%8D%87%E7%BA%A7/"/>
    <id>https://shenshengkun.github.io/2018/03/10/虚拟化/rancher升级/</id>
    <published>2018-03-10T09:56:50.000Z</published>
    <updated>2019-04-18T10:00:29.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="停掉-rancher"><a href="#停掉-rancher" class="headerlink" title="停掉 rancher"></a>停掉 rancher</h1><p>先把之前的rancher-server停掉，然后在/etc/hosts上加上ip还有主机名的解析，否则升级完主机不识别 </p><h1 id="下载1-6-8镜像"><a href="#下载1-6-8镜像" class="headerlink" title="下载1.6.8镜像"></a>下载1.6.8镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_server:1.6.8</span><br><span class="line"></span><br><span class="line">在官网下载就有，我这个是自己的私有仓库</span><br></pre></td></tr></table></figure><h1 id="运行rancherserver"><a href="#运行rancherserver" class="headerlink" title="运行rancherserver"></a>运行rancherserver</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /data/rancherdata:/var/lib/mysql --restart=always -p 48080:8080 privatecloud.docker.domain/privatecloud3.0/rancher_server:1.6.8</span><br></pre></td></tr></table></figure><h1 id="获取rancher的代理镜像"><a href="#获取rancher的代理镜像" class="headerlink" title="获取rancher的代理镜像"></a>获取rancher的代理镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker login privatecloud.docker.domain </span><br><span class="line"></span><br><span class="line">从镜像库拉取镜像</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_agent:v1.2.6</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_network-manager:v0.7.8</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_net:v0.11.9</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_dns:v0.15.3</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_metadata:v0.9.4</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_healthcheck:v0.3.3</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_scheduler:v0.8.2</span><br><span class="line">docker pull privatecloud.docker.domain/privatecloud3.0/rancher_net:holder</span><br><span class="line">重命名镜像：</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_agent:v1.2.6 rancher/agent:v1.2.6</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_network-manager:v0.7.8 rancher/network-manager:v0.7.8</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_net:v0.11.9 rancher/net:v0.11.9</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_dns:v0.15.3 rancher/dns:v0.15.3</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_metadata:v0.9.4 rancher/metadata:v0.9.4</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_healthcheck:v0.3.3 rancher/healthcheck:v0.3.3</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_scheduler:v0.8.2 rancher/scheduler:v0.8.2</span><br><span class="line">docker tag privatecloud.docker.domain/privatecloud3.0/rancher_net:holder rancher/net:holder</span><br></pre></td></tr></table></figure><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入http://rancherserverip:48080/</span><br><span class="line">然后点升级即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;停掉-rancher&quot;&gt;&lt;a href=&quot;#停掉-rancher&quot; class=&quot;headerlink&quot; title=&quot;停掉 rancher&quot;&gt;&lt;/a&gt;停掉 rancher&lt;/h1&gt;&lt;p&gt;先把之前的rancher-server停掉，然后在/etc/hosts上加上
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://shenshengkun.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>gitlab-ci自动部署（二）</title>
    <link href="https://shenshengkun.github.io/2017/05/21/gitlab/gitlab-ci(%E4%BA%8C)/"/>
    <id>https://shenshengkun.github.io/2017/05/21/gitlab/gitlab-ci(二)/</id>
    <published>2017-05-21T01:10:30.000Z</published>
    <updated>2018-11-08T06:42:03.702Z</updated>
    
    <content type="html"><![CDATA[<p>下面来说说CI/CD是怎么实现的：</p><h1 id="登录gitlab-runner机器"><a href="#登录gitlab-runner机器" class="headerlink" title="登录gitlab-runner机器"></a>登录gitlab-runner机器</h1><p>切换runner普通用户</p><blockquote><p>[root@localhost ~]# su - gitlab-runner</p></blockquote><h1 id="编写-gitlab-ci-yml文件"><a href="#编写-gitlab-ci-yml文件" class="headerlink" title="编写.gitlab-ci.yml文件"></a>编写.gitlab-ci.yml文件</h1><p>随便创建一个目录，叫什么无所谓</p><blockquote><p>[gitlab-runner@localhost ~]$ mkdir git</p></blockquote><p>将gitlab上想要发布的项目克隆到这个目录里</p><blockquote><p>[gitlab-runner@localhost git]$ git clone <a href="mailto:git@gitlab.xxx.com" target="_blank" rel="noopener">git@gitlab.xxx.com</a>:xxx/xxx.git</p></blockquote><p>因为我们的项目是大工程，里面带着很多子工程，所以就需要通过yml文件，将项目分离出去</p><p>比方说我们想发布bb项目，但是bb项目属于aa这个大项目的子项目，所以就进aa大工程目录下</p><p>在项目目录里面创建一个.gitlab-ci.yml文件，如下<br><img src="https://shenshengkun.github.io/images/2.png" alt=""></p><blockquote><p>[gitlab-runner@localhost ~]$ cat .gitlab-ci.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">job 1:</span><br><span class="line">  stage: test</span><br><span class="line">  script: </span><br><span class="line">    - git subtree push -q --prefix=bb git@gitlab.xx.com:bb1/bb.git dev</span><br><span class="line">  only:</span><br><span class="line">    - dev</span><br><span class="line">  tags:</span><br><span class="line">    - shell</span><br></pre></td></tr></table></figure></p></blockquote><p>这样就可以将bb项目分离出去，相当于创建了一个新的项目</p><p>进入bb目录，也编写.gitlab-ci.yml文件，这个就是我们需要编译的脚本，中间可以穿插maven、node和shell的一系列命令</p><blockquote><p>[gitlab-runner@localhost bb]$ cat .gitlab-ci.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">job 1:</span><br><span class="line">  stage: build</span><br><span class="line">  script: </span><br><span class="line">    - rm -rf /opt/M2_REPO/com/bb/*</span><br><span class="line">    - mvn clean package -P test -Dmaven.test.skip</span><br><span class="line">    - bash -x /opt/bb/shell/bb.sh</span><br><span class="line">  only:</span><br><span class="line">    - dev</span><br><span class="line">  tags:</span><br><span class="line">    - shell</span><br></pre></td></tr></table></figure></p></blockquote><p>编写完yml文件后都需要提交下</p><p>git add .</p><p>git commit -m “add gitlab-ci.yml”</p><p>git push origin dev</p><p>另外包括传包，启动等命令都可以在yml文件里面体现，这样只要dev分支有commit的改变了，gitlab-ci就会自动创建job来自动发布<br><img src="https://shenshengkun.github.io/images/3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面来说说CI/CD是怎么实现的：&lt;/p&gt;
&lt;h1 id=&quot;登录gitlab-runner机器&quot;&gt;&lt;a href=&quot;#登录gitlab-runner机器&quot; class=&quot;headerlink&quot; title=&quot;登录gitlab-runner机器&quot;&gt;&lt;/a&gt;登录gitlab-r
      
    
    </summary>
    
      <category term="gitlab" scheme="https://shenshengkun.github.io/categories/gitlab/"/>
    
    
  </entry>
  
  <entry>
    <title>gitlab-ci自动部署（一）</title>
    <link href="https://shenshengkun.github.io/2017/05/20/gitlab/gitlab-ci(%E4%B8%80)/"/>
    <id>https://shenshengkun.github.io/2017/05/20/gitlab/gitlab-ci(一)/</id>
    <published>2017-05-20T01:05:08.000Z</published>
    <updated>2018-11-08T06:26:44.106Z</updated>
    
    <content type="html"><![CDATA[<p>目前GitLab已经有了CI功能，即持续集成的功能。可以实现代码提交后自动测试、编译、发布、部署等自动化工作</p><p>下面是我总结的实现内容：</p><h1 id="安装runner"><a href="#安装runner" class="headerlink" title="安装runner"></a>安装runner</h1><p>在root下执行</p><h3 id="下载gitlab-runner"><a href="#下载gitlab-runner" class="headerlink" title="下载gitlab-runner"></a>下载gitlab-runner</h3><blockquote><p>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/gitlab-runner-10.5.0-1.x86_64.rpm" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/gitlab-runner-10.5.0-1.x86_64.rpm</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm</p></blockquote><h3 id="配置Runner"><a href="#配置Runner" class="headerlink" title="配置Runner"></a>配置Runner</h3><p>默认情况，Runner是通过gitlab-runner的这个用户来执行一系列操作，其工作目录也是在gitlab-runner的用户目录下面。如果使用默认gitlab-runner用户操作一些文件时经常会遇到权限问题，就需要给gitlab-runner赋权。我们通过以下方式修改。</p><p>#在root下执行</p><p>#删除服务</p><blockquote><p>gitlab-runner uninstall</p></blockquote><p>#添加服务</p><blockquote><p>gitlab-runner install –working-directory /home/builds –user gitlab-ci</p></blockquote><p>#重启服务</p><blockquote><p>gitlab-runner restart</p></blockquote><p>#查看状态</p><blockquote><p>gitlab-runner status 输出：gitlab-runner: Service is running!</p></blockquote><p>#查看是否生效</p><blockquote><p>ps -ef | grep gitlab-runner</p></blockquote><h1 id="注册Runner"><a href="#注册Runner" class="headerlink" title="注册Runner"></a>注册Runner</h1><p>先打开GitLab上需要自动部署的项目界面，找到该项目的Settings –&gt; CI/CD –&gt; Runners settings 在gitlab上可以看到自己的token信息，用来注册runner</p><p>#在root下执行<br>gitlab-runner register (会出现注册信息，填url，token，runner的名字)</p><p>成功之后会如下图：<br><img src="https://shenshengkun.github.io/images/1.png" alt=""></p><p>至此安装部分就完成了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前GitLab已经有了CI功能，即持续集成的功能。可以实现代码提交后自动测试、编译、发布、部署等自动化工作&lt;/p&gt;
&lt;p&gt;下面是我总结的实现内容：&lt;/p&gt;
&lt;h1 id=&quot;安装runner&quot;&gt;&lt;a href=&quot;#安装runner&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="gitlab" scheme="https://shenshengkun.github.io/categories/gitlab/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7搭建shadowsock实现vpn翻墙</title>
    <link href="https://shenshengkun.github.io/2017/04/22/vpn/centos7%E6%90%AD%E5%BB%BAshadowsock%E5%AE%9E%E7%8E%B0vpn%E7%BF%BB%E5%A2%99/"/>
    <id>https://shenshengkun.github.io/2017/04/22/vpn/centos7搭建shadowsock实现vpn翻墙/</id>
    <published>2017-04-22T12:10:20.000Z</published>
    <updated>2018-11-08T02:59:07.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用root用户登录，运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https://cyh.abcdocker.com/vpn/shadowsocks.sh</span><br><span class="line">  chmod +x shadowsocks.sh</span><br><span class="line">  ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure></p><p>安装完成后，脚本提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h1 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h1><p>使用root用户登录，运行以下命令：</p><blockquote><p>./shadowsocks.sh uninstall</p></blockquote><p>配置文件路径：/etc/shadowsocks.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:your_server_port,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;your_password&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多用户多端口配置文件"><a href="#多用户多端口配置文件" class="headerlink" title="多用户多端口配置文件"></a>多用户多端口配置文件</h1><p>配置文件路径：/etc/shadowsocks.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">         &quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">         &quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">         &quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">         &quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">         &quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：/etc/init.d/shadowsocks start</span><br><span class="line">停止：/etc/init.d/shadowsocks stop</span><br><span class="line">重启：/etc/init.d/shadowsocks restart</span><br><span class="line">状态：/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;使用root用户登录，运行以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="vpn" scheme="https://shenshengkun.github.io/categories/vpn/"/>
    
    
  </entry>
  
  <entry>
    <title>pptp</title>
    <link href="https://shenshengkun.github.io/2017/04/20/vpn/pptp/"/>
    <id>https://shenshengkun.github.io/2017/04/20/vpn/pptp/</id>
    <published>2017-04-20T05:10:01.000Z</published>
    <updated>2018-11-07T05:58:16.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装pptpd"><a href="#安装pptpd" class="headerlink" title="安装pptpd"></a>安装pptpd</h1><p>$ yum install pptpd </p><h1 id="配置本地及远程IP地址"><a href="#配置本地及远程IP地址" class="headerlink" title="配置本地及远程IP地址"></a>配置本地及远程IP地址</h1><p>$ vi /etc/pptpd.conf<br>  localip 192.168.100.1<br>  remoteip 192.168.100.2-245 </p><h1 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h1><p>$ vi /etc/ppp/options.pptpd<br>  ms-dns 223.5.5.5<br>  ms-dns 223.6.6.6 </p><h1 id="修改MTU"><a href="#修改MTU" class="headerlink" title="修改MTU"></a>修改MTU</h1><p>$ vi / etc / ppp / ip-up<br>  /sbin/ifconfig $ 1 mtu 1500 </p><h1 id="用户和密码配置"><a href="#用户和密码配置" class="headerlink" title="用户和密码配置"></a>用户和密码配置</h1><p>$ vi /etc/ppp/chap-secrets<br> client server secret IP address 注释掉 </p><p> testin_user1 pptpd testin_user1 * </p><h1 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h1><p>$ vi /etc/sysctl.conf </p><p>  net.ipv4.ip_forward = 1＃开启IP转发</p><p>$ iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o eth1 -j MASQUERADE＃允许外网连接</p><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>$ service pptpd start </p><p>$ service iptables start</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装pptpd&quot;&gt;&lt;a href=&quot;#安装pptpd&quot; class=&quot;headerlink&quot; title=&quot;安装pptpd&quot;&gt;&lt;/a&gt;安装pptpd&lt;/h1&gt;&lt;p&gt;$ yum install pptpd &lt;/p&gt;
&lt;h1 id=&quot;配置本地及远程IP地址&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="vpn" scheme="https://shenshengkun.github.io/categories/vpn/"/>
    
    
  </entry>
  
</feed>
