<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[k8s的pod名称不宜过长]]></title>
    <url>%2Fposts%2Fdv8pan45.html</url>
    <content type="text"><![CDATA[pod名称命名规范12pod名字受DNS Label Names 63位长度限制。prometheus在生成metric的label时也有64个字符的限制，如果超过了，会导致有些pod label被截断，监控有问题，调metics的一些自动扩容策略也会有问题。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s二次调度]]></title>
    <url>%2Fposts%2Fdm0kma1c.html</url>
    <content type="text"><![CDATA[介绍在之前文章中，kube-schedule原理，当中我们说到了k8s原始的调度，有一些不合理性，当时也介绍了一些优先级调度以及自定义调度，下面主要说下这个开源的二次调度工具Descheduler。 策略RemoveDuplicates策略该策略确保只有一个Pod与同一节点上运行的副本集（RS），Replication Controller（RC），deployment或者job关联。 123456789apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;RemoveDuplicates&quot;: enabled: true params: removeDuplicates: excludeOwnerKinds: - &quot;ReplicaSet&quot; LowNodeUtilization策略该策略发现未充分利用的节点，并且如果可能的话，从其他节点驱逐pod，希望在这些未充分利用的节点上安排被驱逐的pod的重新创建。此策略的参数配置在 nodeResourceUtilizationThresholds。 节点的利用率低是由可配置的阈值决定的 thresholds。thresholds 可以按百分比为cpu，内存和pod数量配置阈值 。如果节点的使用率低于所有（cpu，内存和pod数）的阈值，则该节点被视为未充分利用。目前，pods的请求资源需求被考虑用于计算节点资源利用率。 还有另一个可配置的阈值，targetThresholds 用于计算可以驱逐pod的潜在节点。任何节点，所述阈值之间，thresholds 并且 targetThresholds 被视为适当地利用，并且不考虑驱逐。阈值 targetThresholds 也可以按百分比配置为cpu，内存和pod数量。 123456789101112131415apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;LowNodeUtilization&quot;: enabled: true params: nodeResourceUtilizationThresholds: thresholds: &quot;cpu&quot; : 20 &quot;memory&quot;: 20 &quot;pods&quot;: 20 targetThresholds: &quot;cpu&quot; : 50 &quot;memory&quot;: 50 &quot;pods&quot;: 50 RemovePodsViolatingInterPodAntiAffinity策略 该策略可确保从节点中删除违反Interpod反亲和关系的pod。例如，如果某个节点上有podA，并且podB和podC（在同一节点上运行）具有禁止它们在同一节点上运行的反亲和规则，则podA将被从该节点逐出，以便podB和podC正常运行。当 podB 和 podC 已经运行在节点上后，反亲和性规则被创建就会发送这样的问题。目前，没有与该策略关联的参数。要禁用此策略，策略应如下所示： 12345apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;RemovePodsViolatingInterPodAntiAffinity&quot;: enabled: false RemovePodsViolatingNodeAffinity策略启用后，该策略requiredDuringSchedulingRequiredDuringExecution将用作kubelet 的临时实现并逐出该kubelet，不再考虑节点亲和力。 例如，在nodeA上调度了podA，该podA满足了调度时的节点亲缘性规则requiredDuringSchedulingIgnoredDuringExecution。随着时间的流逝，nodeA停止满足该规则。当执行该策略并且有另一个可用的节点满足该节点相似性规则时，podA被从nodeA中逐出。 12345678apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;RemovePodsViolatingNodeAffinity&quot;: enabled: true params: nodeAffinityType: - &quot;requiredDuringSchedulingIgnoredDuringExecution&quot; RemovePodsViolatingNodeTaints 策略 该策略可以确保从节点中删除违反 NoSchedule 污点的 Pod。例如，有一个名为 podA 的 Pod，通过配置容忍 key=value:NoSchedule 允许被调度到有该污点配置的节点上，如果节点的污点随后被更新或者删除了，则污点将不再被 Pod 的容忍满足，然后将被驱逐 12345apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;RemovePodsViolatingNodeTaints&quot;: enabled: true RemovePodsHavingTooManyRestarts 此策略确保从节点中删除重启次数过多的Pod 。 123456789apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;RemovePodsHavingTooManyRestarts&quot;: enabled: true params: podsHavingTooManyRestarts: podRestartThreshold: 100 includingInitContainers: true PodLifeTime此策略逐出比.strategies.PodLifeTime.params.maxPodLifeTimeSeconds该策略文件更旧的pod。 1234567apiVersion: &quot;descheduler/v1alpha1&quot;kind: &quot;DeschedulerPolicy&quot;strategies: &quot;PodLifeTime&quot;: enabled: true params: maxPodLifeTimeSeconds: 86400 版本兼容性 Descheduler Supported Kubernetes Version v0.18 v1.18 v0.10 v1.17 v0.4-v0.9 v1.9+ v0.1-v0.3 v1.7-v1.8 例子注意：由于生产集群一般都是1.17以前的版本，故本实例是Descheduler0.9版本。 创建角色与账户 12345678910111213141516171819202122232425262728293031323334353637[root@master01 kubernetes]# cat rbac.yaml ---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata: name: descheduler-cluster-role namespace: kube-systemrules:- apiGroups: [&quot;&quot;] resources: [&quot;nodes&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]- apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;, &quot;delete&quot;]- apiGroups: [&quot;&quot;] resources: [&quot;pods/eviction&quot;] verbs: [&quot;create&quot;]---apiVersion: v1kind: ServiceAccountmetadata: name: descheduler-sa namespace: kube-system---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: descehduler-cluster-role-binding namespace: kube-systemroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: descheduler-cluster-rolesubjects: - name: descheduler-sa kind: ServiceAccount namespace: kube-system 创建configmap 1234567891011121314151617181920212223[root@master01 kubernetes]# cat configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: descheduler-policy-configmap namespace: kube-systemdata: policy.yaml: | apiVersion: &quot;descheduler/v1alpha1&quot; kind: &quot;DeschedulerPolicy&quot; strategies: &quot;RemoveDuplicates&quot;: enabled: true &quot;RemovePodsViolatingInterPodAntiAffinity&quot;: enabled: true &quot;LowNodeUtilization&quot;: enabled: true params: nodeResourceUtilizationThresholds: thresholds: &quot;pods&quot;: 5 targetThresholds: &quot;pods&quot;: 10 任务 123456789101112131415161718192021222324252627282930313233apiVersion: batch/v1kind: Jobmetadata: name: descheduler-job namespace: kube-systemspec: parallelism: 1 completions: 1 template: metadata: name: descheduler-pod annotations: scheduler.alpha.kubernetes.io/critical-pod: &quot;&quot; spec: containers: - name: descheduler image: aveshagarwal/descheduler:0.9.0 volumeMounts: - mountPath: /policy-dir name: policy-volume command: - &quot;/bin/descheduler&quot; args: - &quot;--policy-config-file&quot; - &quot;/policy-dir/policy.yaml&quot; - &quot;--v&quot; - &quot;3&quot; restartPolicy: &quot;Never&quot; serviceAccountName: descheduler-sa volumes: - name: policy-volume configMap: name: descheduler-policy-configmap 参考链接1https://github.com/kubernetes-sigs/descheduler]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控harbor]]></title>
    <url>%2Fposts%2F39b40b31.html</url>
    <content type="text"><![CDATA[介绍随着k8s集群上面服务越来越多，大家更加关心的问题反而是服务能不能更稳定，这时候监控作用就体现出来了，下面主要说一下harbor是怎么用prometheus来监控的。 部署 github上的harbor_exporter的轮子都不行，最近馆长同学在写一个 harbor_exporter，也会一直在更新，代码在 https://github.com/zhangguanzhang/harbor_exporter 打镜像12cd harbor_exporter/docker build -t shenshengkun/harbor-exporter:v0.1 -f Dockerfile . 如果不想自己打镜像，也可以直接拉我已经打好的，现在已上传到dockerhub上。 1shenshengkun/harbor-exporter:v0.1 docker安装harbor_exporter1docker run -d -p 9107:9107 -e HARBOR_PASSWORD=Harbor12345 shenshengkun/harbor-exporter:v0.1 --harbor-server=http://x.x.x.x/api --insecure github上未提供k8s方式，下面简单写下怎么用k8s部署harbor_exporter，有会helm的也可以自己写个部署下。 k8s上安装harbor_exporter1234567891011121314151617181920212223242526272829303132333435363738394041424344454647apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: harbor namespace: monitor labels: app: harborspec: revisionHistoryLimit: 10 template: metadata: labels: app: harbor spec: nodeSelector: apptype: memnode containers: - name: harbor image: shenshengkun/harbor-exporter:v0.1 imagePullPolicy: IfNotPresent args: - &quot;--harbor-server=http://10.48.2.179/api&quot; - &quot;--harbor-pass=Harbor12345&quot; - &quot;--insecure&quot; ports: - containerPort: 9107 name: harbor resources: limits: cpu: 1000m memory: 1024Mi requests: cpu: 500m memory: 512Mi securityContext: runAsUser: 0---apiVersion: v1kind: Servicemetadata: name: harbor namespace: monitorspec: ports: - port: 9107 selector: app: harbor 部署完了之后，在prometheus加个job就可以，也可以自己设置自动读取。 由于github上面还没有grafana的json模板，故我简单的写了一个。模板获取方式，关注微信公众号SY技术小站，在后台回复 “harbor-json”，就可以了。 效果 参考链接1https://github.com/zhangguanzhang/harbor_exporter]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s对接云实现自动扩容pod]]></title>
    <url>%2Fposts%2Fdpka1a1v.html</url>
    <content type="text"><![CDATA[介绍在之前的文章我介绍了下 Custom Metric 怎么实现自动扩容的。k8s基于自定义指标实现自动扩容 实际上Kubernetes定义了三种不同的监控数据接口，分别是Resource Metric，Custom Metric以及External Metric。 一般来说Resource Metric是通过metrics-server采集； Custom Metric是通过prometheus来实现自定义扩容。 External Metric就是针对云场景的了，比方说通过获取slb最大连接数来实现自动扩容。 下面我来说下具体怎么实现的。 部署安装alibaba-cloud-metrics-adapter，以下是yaml文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293apiVersion: apps/v1kind: Deploymentmetadata: labels: app: alibaba-cloud-metrics-adapter name: alibaba-cloud-metrics-adapter namespace: kube-systemspec: replicas: 1 selector: matchLabels: app: alibaba-cloud-metrics-adapter template: metadata: labels: app: alibaba-cloud-metrics-adapter name: alibaba-cloud-metrics-adapter spec: serviceAccountName: admin containers: - name: alibaba-cloud-metrics-adapter image: registry.cn-beijing.aliyuncs.com/acs/alibaba-cloud-metrics-adapter-amd64:v0.2.0-alpha-e8f8c17f imagePullPolicy: IfNotPresent ports: - containerPort: 443 name: https - containerPort: 8080 name: http volumeMounts: - mountPath: /tmp name: temp-vol - name: tz-config mountPath: /etc/localtime readOnly: true volumes: - name: temp-vol emptyDir: &#123;&#125; - name: tz-config hostPath: path: /etc/localtime---apiVersion: v1kind: Servicemetadata: name: alibaba-cloud-metrics-adapter namespace: kube-systemspec: ports: - name: https port: 443 targetPort: 443 - name: http port: 80 targetPort: 8080 selector: app: alibaba-cloud-metrics-adapter---apiVersion: apiregistration.k8s.io/v1beta1kind: APIServicemetadata: name: v1beta1.external.metrics.k8s.iospec: service: name: alibaba-cloud-metrics-adapter namespace: kube-system group: external.metrics.k8s.io version: v1beta1 insecureSkipTLSVerify: true groupPriorityMinimum: 100 versionPriority: 100---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: external-metrics-server-resourcesrules:- apiGroups: - external.metrics.k8s.io resources: [&quot;*&quot;] verbs: [&quot;*&quot;]---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: external-metrics-resource-readerroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: external-metrics-server-resourcessubjects:- kind: ServiceAccount name: horizontal-pod-autoscaler namespace: kube-system 可以使用下面的命令来检测是否生效了： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# kubectl get --raw=&quot;/apis/external.metrics.k8s.io/v1beta1&quot; | jq&#123; &quot;kind&quot;: &quot;APIResourceList&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;groupVersion&quot;: &quot;external.metrics.k8s.io/v1beta1&quot;, &quot;resources&quot;: [ &#123; &quot;name&quot;: &quot;sls_ingress_qps&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;slb_l4_connection_utilization&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;slb_l7_qps&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;ahas_sentinel_total_qps&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;ahas_sentinel_avg_rt&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;k8s_workload_cpu_util&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;k8s_workload_memory_request&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;k8s_workload_memory_cache&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;ExternalMetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, 。。。。。。。。。 简单说下各个指标的含义，方便之后去选择哪个指标去自动扩容。 slb_l4_traffic_rx 每秒流入 slb_l4_packet_tx 每秒流入的数据包数 slb_l4_active_connection 活动连接 slb_l4_max_connection 最大连接数 slb_l7_qps QPS slb_l7_status_2xx 2xx个请求（每秒） slb_l7_upstream_4xx 上游服务4xx请求（每秒） sls_ingress_qps 特定入口路由的QPS sls_ingress_inflow 入口流入带宽 k8s_workload_memory_usage 内存使用情况 k8s_workload_memory_rss rss 扩容例子 根据slb_l4_active_connection这个指标，实现自动扩容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1kind: Deploymentmetadata: name: nginx-deployment-basic labels: app: nginxspec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.7.9 # replace it with your exactly &lt;image_name:tags&gt; ports: - containerPort: 80---apiVersion: v1kind: Servicemetadata: name: nginx namespace: defaultspec: externalTrafficPolicy: Local ports: - port: 80 protocol: TCP targetPort: 80 selector: app: nginx sessionAffinity: None type: LoadBalancer---apiVersion: autoscaling/v2beta2kind: HorizontalPodAutoscalermetadata: name: slb-hpaspec: scaleTargetRef: apiVersion: apps/v1beta2 kind: Deployment name: nginx-deployment-basic minReplicas: 5 maxReplicas: 10 metrics: - type: External external: metric: name: slb_l4_active_connection selector: matchLabels: # slb.instance.id: &quot;lb-2ze2locy5fk8at1cfx47y&quot; slb.instance.id: &quot;&quot; # slb.instance.port: &quot;80&quot; slb.instance.port: &quot;&quot; target: type: Value value: 100 这样就实现了通过External Metric自动扩容。 参考链接1https://github.com/AliyunContainerService/alibaba-cloud-metrics-adapter]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[比官方K8S Dashboard好用的几个工具]]></title>
    <url>%2Fposts%2Fopl9nv3r.html</url>
    <content type="text"><![CDATA[介绍推荐三款小工具，具体使用哪个，大家可以自己斟酌，各有各的优点。 kubeman一个很有意思的小工具叫 kubeman，它试图使从Kubernetes集群中查找信息变得更加容易，并且可以调查与Kubernetes和Istio相关的问题。 windows和mac安装windows和mac安装很简单，下载相应的二进制，然后直接运行就好了 。 要是windows想执行linux的k8s集群，把.kube目录拷贝到/user/administrator下面就可以。 linux安装1234567891011121314下载kubeman.0.5.0.appimagechmod a+x *.appimagewget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -ivh epel-release-latest-7.noarch.rpmyum --enablerepo=epel -y install fuse-sshfsuser=&quot;$(whoami)&quot;usermod -a -G fuse &quot;$user&quot;yum provides */libgtk-3.so.0yum -y install /usr/lib64/libgtk-3.so.0 /usr/lib/libgtk-3.so.0./kubeman.0.5.0.appimage --appimage-extract启动的话，如果linux没开display，就需要用xmanager执行就可以命令是：./kubeman.0.5.0.appimage 效果命令 日志 测服务可达 lens Lens 是一个强大的 kubernetes IDE。可以实时查看 kubernetes 集群状态，比如 Pod实时日志查看、集群Events实时查看、集群故障排查等 安装 从发布页面下载预构建的软件包 。 效果 kuboard Kuboard 是一款免费的 Kubernetes 管理工具，提供了丰富的功能，结合代码仓库、镜像仓库、CI/CD工具等，可以便捷的搭建一个生产可用的 Kubernetes 容器云平台，轻松管理和运行云原生应用。 安装12kubectl apply -f https://kuboard.cn/install-script/kuboard.yamlkubectl apply -f https://addons.kuboard.cn/metrics-server/0.3.6/metrics-server.yaml 查看 Kuboard 运行状态： 1kubectl get pods -l k8s.kuboard.cn/name=kuboard -n kube-system 获取token 1echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk &apos;&#123;print $1&#125;&apos;) -o go-template=&apos;&#123;&#123;.data.token&#125;&#125;&apos; | base64 -d) 效果 小结三款工具各有千秋，大家结合自己公司情况选择吧！ 参考链接123https://github.com/walmartlabs/kubemanhttps://github.com/lensapp/lenshttps://kuboard.cn/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[K8S多集群切换俩种方法]]></title>
    <url>%2Fposts%2F3349nb3b.html</url>
    <content type="text"><![CDATA[前言随着公司的k8s迁移，会发现集群越来越多，尤其是有混合云的公司，开发，测试，预生产，多个生产环境等等，管理k8s集群会越来越麻烦，下面我来介绍下k8s管理多集群的俩种方法。 通过多种kubeconfig文件管理因为我的一台机器，网络打通了多个生产环境，测试，开发环境，故我拿这一台机器举个简单的例子。 123456#切换到生产集群kubectl get pod --kubeconfig=/root/.kube/aliyun_prod-config#切换到生产idc集群kubectl get pod --kubeconfig=/root/.kube/vnet_prod-config#切换到测试环境kubectl get pod --kubeconfig=/root/.kube/bjcs_test-config 这样虽然能达到管理多集群的目的，但是稍显麻烦且不灵活 通过kubecm管理k8s多集群安装kubecm我就不详细说了，下载二进制包解压可用，地址 https://github.com/sunny0826/kubecm/releases 首先将config文件拷贝到sy目录。 1234cd sycp /root/.kube/aliyun_prod-config .cp /root/.kube/vnet_prod-config .cp /root/.kube/bjcs_test-config . merge一下，合并kubeconfig文件 123kubecm merge -f sy#直接把新生成的 kubeconfig 文件替换 $HOME/.kube/config 文件kubecm merge -f sy -c 切换集群 1234567891011121314# kubecm +------------+-----------------------+-----------------------+--------------------+--------------+| CURRENT | NAME | CLUSTER | USER | Namespace |+============+=======================+=======================+====================+======--------+| | vnet_prod-config | cluster-ccccc5 | user-hbhbh9gmd5 | |+------------+-----------------------+-----------------------+--------------------+--------------+| * | aliyun_prod-config | cluster-bbbbb59 | user-m4fd662d59 | |+------------+-----------------------+-----------------------+--------------------+--------------+| | bjcs_test-config | cluster-baaaaa | user-b9mbtft7b2 | |+------------+-----------------------+-----------------------+--------------------+--------------+2020/06/22 11:25:41 Cluster check succeeded!Contains components: [scheduler controller-manager etcd-0 etcd-1 etcd-3 etcd-2 etcd-4] 123456# kubecm switchUse the arrow keys to navigate: ↓ ↑ → ← and / toggles searchSelect Kube Context aliyun_prod-config(*) bjcs_test-config↓ vnet_prod-config 切换命名空间 12345# kubecm nsSearch: test█Select Namespace: test test1 小结通过 kubecm 工具能快速的把多个 kubeconfig 文件合并到一个 kubeconfig 文件中，这种方式相比于第一种更好。 参考链接1https://github.com/sunny0826/kubecm]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[备份与迁移k8s集群神器]]></title>
    <url>%2Fposts%2Folsn73dq.html</url>
    <content type="text"><![CDATA[前言一般来说大家都用etcd备份恢复k8s集群，但是有时候我们可能不小心删掉了一个namespace，假设这个ns里面有上百个服务，瞬间没了，怎么办？ 当然了，可以用CI/CD系统发布，但是时间会花费很久，这时候，vmvare的Velero出现了。 velero可以帮助我们： 灾备场景，提供备份恢复k8s集群的能力 迁移场景，提供拷贝集群资源到其他集群的能力（复制同步开发，测试，生产环境的集群配置，简化环境配置） 下面我就介绍一下如何使用 Velero 完成备份和迁移。 Velero 地址：https://github.com/vmware-tanzu/velero ACK 插件地址：https://github.com/AliyunContainerService/velero-plugin 下载 Velero 客户端Velero 由客户端和服务端组成，服务器部署在目标 k8s 集群上，而客户端则是运行在本地的命令行工具。 前往 Velero 的 Release 页面 下载客户端，直接在 GitHub 上下载即可 解压 release 包 将 release 包中的二进制文件 velero 移动到 $PATH 中的某个目录下 执行 velero -h 测试 部署velero-plugin插件拉取代码 1git clone https://github.com/AliyunContainerService/velero-plugin 配置修改 12345#修改 `install/credentials-velero` 文件，将新建用户中获得的 `AccessKeyID` 和 `AccessKeySecret` 填入，这里的 OSS EndPoint 为之前 OSS 的访问域名ALIBABA_CLOUD_ACCESS_KEY_ID=&lt;ALIBABA_CLOUD_ACCESS_KEY_ID&gt;ALIBABA_CLOUD_ACCESS_KEY_SECRET=&lt;ALIBABA_CLOUD_ACCESS_KEY_SECRET&gt;ALIBABA_CLOUD_OSS_ENDPOINT=&lt;ALIBABA_CLOUD_OSS_ENDPOINT&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#修改 `install/01-velero.yaml`，将 OSS 配置填入：---apiVersion: v1kind: ServiceAccountmetadata: namespace: velero name: velero---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: labels: component: velero name: veleroroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: velero namespace: velero---apiVersion: velero.io/v1kind: BackupStorageLocationmetadata: labels: component: velero name: default namespace: velerospec: config: region: cn-beijing objectStorage: bucket: k8s-backup-test prefix: test provider: alibabacloud---apiVersion: velero.io/v1kind: VolumeSnapshotLocationmetadata: labels: component: velero name: default namespace: velerospec: config: region: cn-beijing provider: alibabacloud---apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: velero namespace: velerospec: replicas: 1 selector: matchLabels: deploy: velero template: metadata: annotations: prometheus.io/path: /metrics prometheus.io/port: &quot;8085&quot; prometheus.io/scrape: &quot;true&quot; labels: component: velero deploy: velero spec: serviceAccountName: velero containers: - name: velero # sync from velero/velero:v1.2.0 image: registry.cn-hangzhou.aliyuncs.com/acs/velero:v1.2.0 imagePullPolicy: IfNotPresent command: - /velero args: - server - --default-volume-snapshot-locations=alibabacloud:default env: - name: VELERO_SCRATCH_DIR value: /scratch - name: ALIBABA_CLOUD_CREDENTIALS_FILE value: /credentials/cloud volumeMounts: - mountPath: /plugins name: plugins - mountPath: /scratch name: scratch - mountPath: /credentials name: cloud-credentials initContainers: - image: registry.cn-hangzhou.aliyuncs.com/acs/velero-plugin-alibabacloud:v1.2-991b590 imagePullPolicy: IfNotPresent name: velero-plugin-alibabacloud volumeMounts: - mountPath: /target name: plugins volumes: - emptyDir: &#123;&#125; name: plugins - emptyDir: &#123;&#125; name: scratch - name: cloud-credentials secret: secretName: cloud-credentials k8s 部署 Velero 服务 12345678# 新建 namespacekubectl create namespace velero# 部署 credentials-velero 的 secretkubectl create secret generic cloud-credentials --namespace velero --from-file cloud=install/credentials-velero# 部署 CRDkubectl apply -f install/00-crds.yaml# 部署 Velerokubectl apply -f install/01-velero.yaml 备份测试这里，我们将使用velero备份一个集群内相关的resource，并在当该集群出现一些故障或误操作的时候，能够快速恢复集群resource， 首先我们用下面的yaml来部署： 1234567891011121314151617181920212223242526272829303132333435363738394041---apiVersion: v1kind: Namespacemetadata: name: nginx-example labels: app: nginx---apiVersion: apps/v1beta1kind: Deploymentmetadata: name: nginx-deployment namespace: nginx-examplespec: replicas: 2 template: metadata: labels: app: nginx spec: containers: - image: nginx:1.7.9 name: nginx ports: - containerPort: 80---apiVersion: v1kind: Servicemetadata: labels: app: nginx name: my-nginx namespace: nginx-examplespec: ports: - port: 80 targetPort: 80 selector: app: nginx 我们可以全量备份，也可以只备份需要备份的一个namespace，本处只备份一个namespace：nginx-example 12345678910111213141516[rsync@velero-plugin]$ kubectl get pods -n nginx-exampleNAME READY STATUS RESTARTS AGEnginx-deployment-5c689d88bb-f8vsx 1/1 Running 0 6m31snginx-deployment-5c689d88bb-rt2zk 1/1 Running 0 6m32s [rsync@velero]$ cd velero-v1.4.0-linux-amd64/[rsync@velero-v1.4.0-linux-amd64]$ lltotal 56472drwxrwxr-x 4 rsync rsync 4096 Jun 1 15:02 examples-rw-r--r-- 1 rsync rsync 10255 Dec 10 01:08 LICENSE-rwxr-xr-x 1 rsync rsync 57810814 May 27 04:33 velero[rsync@velero-v1.4.0-linux-amd64]$ ./velero backup create nginx-backup --include-namespaces nginx-example --waitBackup request &quot;nginx-backup&quot; submitted successfully.Waiting for backup to complete. You may safely press ctrl-c to stop waiting - your backup will continue in the background..Backup completed with status: Completed. You may check for more information using the commands `velero backup describe nginx-backup` and `velero backup logs nginx-backup`. 删除ns 12345[rsync@velero-v1.4.0-linux-amd64]$ kubectl delete namespaces nginx-examplenamespace &quot;nginx-example&quot; deleted[rsync@velero-v1.4.0-linux-amd64]$ kubectl get pods -n nginx-example No resources found. 恢复 1234567891011[rsync@velero-v1.4.0-linux-amd64]$ ./velero restore create --from-backup nginx-backup --waitRestore request &quot;nginx-backup-20200603180922&quot; submitted successfully.Waiting for restore to complete. You may safely press ctrl-c to stop waiting - your restore will continue in the background.Restore completed with status: Completed. You may check for more information using the commands `velero restore describe nginx-backup-20200603180922` and `velero restore logs nginx-backup-20200603180922`.[rsync@velero-v1.4.0-linux-amd64]$ kubectl get pods -n nginx-exampleNAME READY STATUS RESTARTS AGEnginx-deployment-5c689d88bb-f8vsx 1/1 Running 0 5snginx-deployment-5c689d88bb-rt2zk 0/1 ContainerCreating 0 5s可以看到已经恢复了 另外迁移和备份恢复也是一样的，下面看一个特殊的，再部署一个项目，之后恢复会不会删掉新部署的项目。 123456新建了一个tomcat容器[rsync@tomcat-test]$ kubectl get pods -n nginx-exampleNAME READY STATUS RESTARTS AGEnginx-deployment-5c689d88bb-f8vsx 1/1 Running 0 65mnginx-deployment-5c689d88bb-rt2zk 1/1 Running 0 65mtomcat-test-sy-677ff78f6b-rc5vq 1/1 Running 0 7s restore 一下 12345678910[rsync@velero-v1.4.0-linux-amd64]$ ./velero restore create --from-backup nginx-backup Restore request &quot;nginx-backup-20200603191726&quot; submitted successfully.Run `velero restore describe nginx-backup-20200603191726` or `velero restore logs nginx-backup-20200603191726` for more details.[rsync@velero-v1.4.0-linux-amd64]$ kubectl get pods -n nginx-example NAME READY STATUS RESTARTS AGEnginx-deployment-5c689d88bb-f8vsx 1/1 Running 0 68mnginx-deployment-5c689d88bb-rt2zk 1/1 Running 0 68mtomcat-test-sy-677ff78f6b-rc5vq 1/1 Running 0 2m33s可以看到没有覆盖 删除nginx的deployment，在restore 1234567891011121314151617[rsync@velero-v1.4.0-linux-amd64]$ kubectl delete deployment nginx-deployment -n nginx-exampledeployment.extensions &quot;nginx-deployment&quot; deleted[rsync@velero-v1.4.0-linux-amd64]$ kubectl get pods -n nginx-exampleNAME READY STATUS RESTARTS AGEtomcat-test-sy-677ff78f6b-rc5vq 1/1 Running 0 4m18s[rsync@velero-v1.4.0-linux-amd64]$ ./velero restore create --from-backup nginx-backup Restore request &quot;nginx-backup-20200603191949&quot; submitted successfully.Run `velero restore describe nginx-backup-20200603191949` or `velero restore logs nginx-backup-20200603191949` for more details.[rsync@velero-v1.4.0-linux-amd64]$ kubectl get pods -n nginx-example NAME READY STATUS RESTARTS AGEnginx-deployment-5c689d88bb-f8vsx 1/1 Running 0 2snginx-deployment-5c689d88bb-rt2zk 0/1 ContainerCreating 0 2stomcat-test-sy-677ff78f6b-rc5vq 1/1 Running 0 4m49s可以看到，对我们的tomcat项目是没影响的。 结论：velero恢复不是直接覆盖，而是会恢复当前集群中不存在的resource，已有的resource不会回滚到之前的版本，如需要回滚，需在restore之前提前删除现有的resource。 高级用法可以设置一个周期性定时备份 12345678# 每日1点进行备份velero create schedule &lt;SCHEDULE NAME&gt; --schedule=&quot;0 1 * * *&quot;# 每日1点进行备份，备份保留48小时velero create schedule &lt;SCHEDULE NAME&gt; --schedule=&quot;0 1 * * *&quot; --ttl 48h# 每6小时进行一次备份velero create schedule &lt;SCHEDULE NAME&gt; --schedule=&quot;@every 6h&quot;# 每日对 web namespace 进行一次备份velero create schedule &lt;SCHEDULE NAME&gt; --schedule=&quot;@every 24h&quot; --include-namespaces web 1定时备份的名称为：`&lt;SCHEDULE NAME&gt;-&lt;TIMESTAMP&gt;`，恢复命令为：`velero restore create --from-backup &lt;SCHEDULE NAME&gt;-&lt;TIMESTAMP&gt;`。 如需备份恢复持久卷，备份如下： 1velero backup create nginx-backup-volume --snapshot-volumes --include-namespaces nginx-example 该备份会在集群所在region给云盘创建快照（当前还不支持NAS和OSS存储），快照恢复云盘只能在同region完成。 恢复命令如下： 1velero restore create --from-backup nginx-backup-volume --restore-volumes 删除备份 方法一，通过命令直接删除 1velero delete backups default-backup 方法二，设置备份自动过期，在创建备份时，加上TTL参数 1velero backup create &lt;BACKUP-NAME&gt; --ttl &lt;DURATION&gt; 还可为资源添加指定标签，添加标签的资源在备份的时候被排除。 1234# 添加标签kubectl label -n &lt;ITEM_NAMESPACE&gt; &lt;RESOURCE&gt;/&lt;NAME&gt; velero.io/exclude-from-backup=true# 为 default namespace 添加标签kubectl label -n default namespace/default velero.io/exclude-from-backup=true 参考链接 https://yq.aliyun.com/articles/705007?spm=a2c4e.11163080.searchblog.140.1a8b2ec1TYJPbF —本文结束感谢您的阅读。微信扫描二维码，关注我的公众号—]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s基于自定义指标实现自动扩容]]></title>
    <url>%2Fposts%2F0o81am3t.html</url>
    <content type="text"><![CDATA[基于自定义指标除了基于 CPU 和内存来进行自动扩缩容之外，我们还可以根据自定义的监控指标来进行。这个我们就需要使用 Prometheus Adapter，Prometheus 用于监控应用的负载和集群本身的各种指标，Prometheus Adapter 可以帮我们使用 Prometheus 收集的指标并使用它们来制定扩展策略，这些指标都是通过 APIServer 暴露的，而且 HPA 资源对象也可以很轻易的直接使用。 下面来看具体怎么实现的！ 部署应用 首先，我们部署一个示例应用，在该应用程序上测试 Prometheus 指标自动缩放，资源清单文件如下所示：（podinfo.yaml） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980---apiVersion: apps/v1kind: Deploymentmetadata: name: podinfospec: selector: matchLabels: app: podinfo replicas: 1 template: metadata: labels: app: podinfo annotations: prometheus.io/scrape: &apos;true&apos; spec: containers: - name: podinfod image: stefanprodan/podinfo:0.0.1 imagePullPolicy: Always command: - ./podinfo - -port=9898 - -logtostderr=true - -v=2 volumeMounts: - name: metadata mountPath: /etc/podinfod/metadata readOnly: true ports: - containerPort: 9898 protocol: TCP readinessProbe: httpGet: path: /readyz port: 9898 initialDelaySeconds: 1 periodSeconds: 2 failureThreshold: 1 livenessProbe: httpGet: path: /healthz port: 9898 initialDelaySeconds: 1 periodSeconds: 3 failureThreshold: 2 resources: requests: memory: &quot;32Mi&quot; cpu: &quot;1m&quot; limits: memory: &quot;256Mi&quot; cpu: &quot;100m&quot; volumes: - name: metadata downwardAPI: items: - path: &quot;labels&quot; fieldRef: fieldPath: metadata.labels - path: &quot;annotations&quot; fieldRef: fieldPath: metadata.annotations---apiVersion: v1kind: Servicemetadata: name: podinfo labels: app: podinfospec: type: NodePort ports: - port: 9898 targetPort: 9898 nodePort: 31198 protocol: TCP selector: app: podinfo 接下来我们将 Prometheus-Adapter 安装到集群中，这里选用helm安装，当然也可以直接yaml文件安装。 Prometheus-Adapter规则Prometheus-Adapter 规则大致 可以分为以下几个部分： seriesQuery：查询 Prometheus 的语句，通过这个查询语句查询到的所有指标都可以用于 HPA seriesFilters：查询到的指标可能会存在不需要的，可以通过它过滤掉。 resources：通过 seriesQuery 查询到的只是指标，如果需要查询某个 Pod 的指标，肯定要将它的名称和所在的命名空间作为指标的标签进行查询，resources 就是将指标的标签和 k8s 的资源类型关联起来，最常用的就是 pod 和 namespace。有两种添加标签的方式，一种是 overrides，另一种是 template。 overrides：它会将指标中的标签和 k8s 资源关联起来。上面示例中就是将指标中的 pod 和 namespace 标签和 k8s 中的 pod 和 namespace 关联起来，因为 pod 和 namespace 都属于核心 api 组，所以不需要指定 api 组。当我们查询某个 pod 的指标时，它会自动将 pod 的名称和名称空间作为标签加入到查询条件中。比如 pod: {group: &quot;apps&quot;, resource: &quot;deployment&quot;} 这么写表示的就是将指标中 podinfo 这个标签和 apps 这个 api 组中的 deployment 资源关联起来； template：通过 go 模板的形式。比如template: &quot;kube_&lt;&lt;.Group&gt;&gt;_&lt;&lt;.Resource&gt;&gt;&quot; 这么写表示，假如 &lt;&lt;.Group&gt;&gt; 为 apps，&lt;&lt;.Resource&gt;&gt; 为 deployment，那么它就是将指标中 kube_apps_deployment 标签和 deployment 资源关联起来。 name：用来给指标重命名的，之所以要给指标重命名是因为有些指标是只增的，比如以 total 结尾的指标。这些指标拿来做 HPA 是没有意义的，我们一般计算它的速率，以速率作为值，那么此时的名称就不能以 total 结尾了，所以要进行重命名。 matches：通过正则表达式来匹配指标名，可以进行分组 as：默认值为 $1，也就是第一个分组。as 为空就是使用默认值的意思。 metricsQuery：这就是 Prometheus 的查询语句了，前面的 seriesQuery 查询是获得 HPA 指标。当我们要查某个指标的值时就要通过它指定的查询语句进行了。可以看到查询语句使用了速率和分组，这就是解决上面提到的只增指标的问题。 Series：表示指标名称 LabelMatchers：附加的标签，目前只有 pod 和 namespace 两种，因此我们要在之前使用 resources 进行关联 GroupBy：就是 pod 名称，同样需要使用 resources 进行关联。 安装我们新建 hpa-prome-adapter-values.yaml 文件覆盖默认的 Values 值 ，安装Prometheus-Adapter，我用的helm2 文件如下： 12345678910111213141516rules: default: false custom: - seriesQuery: &apos;http_requests_total&apos; resources: overrides: kubernetes_namespace: resource: namespace kubernetes_pod_name: resource: pod name: matches: &quot;^(.*)_total&quot; as: &quot;$&#123;1&#125;_per_second&quot; metricsQuery: (sum(rate(&lt;&lt;.Series&gt;&gt;&#123;&lt;&lt;.LabelMatchers&gt;&gt;&#125;[1m])) by (&lt;&lt;.GroupBy&gt;&gt;))prometheus: url: http://prometheus-clusterip.monitor.svc.cluster.local 安装 12helm repo add apphub https://apphub.aliyuncs.com/helm install --name prome-adapter --namespace monitor -f hpa-prome-adapter-values.yaml apphub/prometheus-adapter 等一小会儿，安装完成后，可以使用下面的命令来检测是否生效了： 1234567891011121314151617181920212223242526[root@prometheus]# kubectl get --raw=&quot;/apis/custom.metrics.k8s.io/v1beta1&quot; | jq&#123; &quot;kind&quot;: &quot;APIResourceList&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;groupVersion&quot;: &quot;custom.metrics.k8s.io/v1beta1&quot;, &quot;resources&quot;: [ &#123; &quot;name&quot;: &quot;namespaces/http_requests_per_second&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: false, &quot;kind&quot;: &quot;MetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125;, &#123; &quot;name&quot;: &quot;pods/http_requests_per_second&quot;, &quot;singularName&quot;: &quot;&quot;, &quot;namespaced&quot;: true, &quot;kind&quot;: &quot;MetricValueList&quot;, &quot;verbs&quot;: [ &quot;get&quot; ] &#125; ]&#125; 我们可以看到 http_requests_per_second 指标可用。 现在，让我们检查该指标的当前值： 12345678910111213141516171819202122232425262728293031323334[root@prometheus]# kubectl get --raw &quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/http_requests_per_second&quot; | jq . &#123; &quot;kind&quot;: &quot;MetricValueList&quot;, &quot;apiVersion&quot;: &quot;custom.metrics.k8s.io/v1beta1&quot;, &quot;metadata&quot;: &#123; &quot;selfLink&quot;: &quot;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/%2A/http_requests_per_second&quot; &#125;, &quot;items&quot;: [ &#123; &quot;describedObject&quot;: &#123; &quot;kind&quot;: &quot;Pod&quot;, &quot;namespace&quot;: &quot;default&quot;, &quot;name&quot;: &quot;podinfo-5cdc457c8b-99xtw&quot;, &quot;apiVersion&quot;: &quot;/v1&quot; &#125;, &quot;metricName&quot;: &quot;http_requests_per_second&quot;, &quot;timestamp&quot;: &quot;2020-06-02T12:01:01Z&quot;, &quot;value&quot;: &quot;888m&quot;, &quot;selector&quot;: null &#125;, &#123; &quot;describedObject&quot;: &#123; &quot;kind&quot;: &quot;Pod&quot;, &quot;namespace&quot;: &quot;default&quot;, &quot;name&quot;: &quot;podinfo-5cdc457c8b-b7pfz&quot;, &quot;apiVersion&quot;: &quot;/v1&quot; &#125;, &quot;metricName&quot;: &quot;http_requests_per_second&quot;, &quot;timestamp&quot;: &quot;2020-06-02T12:01:01Z&quot;, &quot;value&quot;: &quot;888m&quot;, &quot;selector&quot;: null &#125; ]&#125; 下面部署hpa对象 12345678910111213141516apiVersion: autoscaling/v2beta1kind: HorizontalPodAutoscalermetadata: name: podinfospec: scaleTargetRef: apiVersion: extensions/v1beta1 kind: Deployment name: podinfo minReplicas: 2 maxReplicas: 5 metrics: - type: Pods pods: metricName: http_requests_per_second targetAverageValue: 3 部署之后，可见： 1234567891011121314151617181920212223[root@prometheus-adapter]# kubectl get hpaNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGEpodinfo Deployment/podinfo 911m/10 2 5 2 70s[root@prometheus-adapter]# kubectl describe hpaName: podinfoNamespace: defaultLabels: &lt;none&gt;Annotations: kubectl.kubernetes.io/last-applied-configuration: &#123;&quot;apiVersion&quot;:&quot;autoscaling/v2beta1&quot;,&quot;kind&quot;:&quot;HorizontalPodAutoscaler&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;podinfo&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,...CreationTimestamp: Tue, 02 Jun 2020 17:53:14 +0800Reference: Deployment/podinfoMetrics: ( current / target ) &quot;http_requests_per_second&quot; on pods: 911m / 10Min replicas: 2Max replicas: 5Deployment pods: 2 current / 2 desiredConditions: Type Status Reason Message ---- ------ ------ ------- AbleToScale True ScaleDownStabilized recent recommendations were higher than current one, applying the highest recent recommendation ScalingActive True ValidMetricFound the HPA was able to successfully calculate a replica count from pods metric http_requests_per_second 做一个ab压测： 1ab -n 2000 -c 5 http://sy.test.com:31198/ 观察下hpa变化： 1234567Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfulRescale 9m29s horizontal-pod-autoscaler New size: 3; reason: pods metric http_requests_per_second above target Normal SuccessfulRescale 9m18s horizontal-pod-autoscaler New size: 4; reason: pods metric http_requests_per_second above target Normal SuccessfulRescale 3m34s horizontal-pod-autoscaler New size: 3; reason: All metrics below target Normal SuccessfulRescale 3m4s horizontal-pod-autoscaler New size: 2; reason: All metrics below target 发现触发扩容动作了，副本到了4，并且压测结束后，过了5分钟左右，又恢复到最小值2个。 参考链接 https://github.com/directxman12/k8s-prometheus-adapter —本文结束感谢您的阅读。微信扫描二维码，关注我的公众号—]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[phpipam地址管理]]></title>
    <url>%2Fposts%2Fc5d977yb.html</url>
    <content type="text"><![CDATA[简介phpipam是一个开源Web IP地址管理应用程序（IPAM）。其目标是提供轻便，现代且有用的IP地址管理。它是基于PHP的应用程序，具有MySQL数据库后端，使用jQuery库，ajax和HTML5 / CSS3功能。 安装前环境配置配置主机文件 12vi /etc/hosts10.16.16.13 phpipam.sy.local phpipam 安装依赖模块 Web server、Database 组件 1yum install httpd mariadb-server php php-cli php-gd php-common php-ldap php-pdo php-pear php-snmp php-xml php-mysql php-mbstring git -y 设置时区 12345vi /etc/php.ini[Date]; Defines the default timezone used by the date functions; http://php.net/date.timezonedate.timezone = Asia/Shanghai 启动 Apache Web Server 并设置开机启动 12systemctl start httpdsystemctl enable httpd 启动 MySQL (MariaDB) database server 12systemctl start mariadbsystemctl enable mariadb 配置 Apache Web Server 123456/etc/httpd/conf/httpd.conf&lt;Directory &quot;/var/www/html&quot;&gt; AllowOverride all Order allow,deny Allow from all&lt;/Directory&gt; 初始化数据库设置 123456789101112131415161718192021222324252627mysql_secure_installationDisallow root login remotely? [Y/n] y ... Success!By default, MariaDB comes with a database named &apos;test&apos; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y ... Success!Cleaning up...All done! If you&apos;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB! 安装 phpIPAM从 git 下载 phpIPAM 文件 1234cd /var/www/html/git clone https://github.com/phpipam/phpipam.git phpipamcd phpipamgit checkout 1.4 让 apache 用户有权限访问 phpipam 1234chown apache:apache -R /var/www/html/cd /var/www/html/find . -type f -exec chmod 0644 &#123;&#125; \;find . -type d -exec chmod 0755 &#123;&#125; \; 然后配置数据库链接要做到这一点，我们首先需要将示例配置文件复制到phpipam使用的config.php 12cp /var/www/html/phpipam/config.dist.php /var/www/html/phpipam/config.dist.php.bakmv /var/www/html/phpipam/config.dist.php /var/www/html/phpipam/config.php 12345678910111213vim /var/www//html/phpipam/config.php/** * database connection details ******************************/$db[&apos;host&apos;] = &apos;localhost&apos;;$db[&apos;user&apos;] = &apos;phpipam_user&apos;;$db[&apos;pass&apos;] = &apos;phpipam_Pass&apos;;$db[&apos;name&apos;] = &apos;phpipam_db&apos;;$db[&apos;port&apos;] = 3306;/**if(!defined(&apos;BASE&apos;))define(&apos;BASE&apos;, &quot;/phpipam/&quot;); 重启 http 服务 1systemctl restart httpd 访问 自动安装并设置密码 效果登录 最终界面 简单功能说明 12345678910111213141516PHPIPAM Settings：设置PHPIPAM系统本身的一些配置，站点名称、语言、配色方案、一些功能模块的开关。Users：设置本地用户，添加、删除，编辑。Groups：设置本地用户组。Authentication methods：设置认证方式，支持本地认证、常用的AD、LDAP、Radius，NetIQ和SAML2笔者也没听过。。Mail settings：设置SMTP服务器，即当IPAM需要发邮件的时候使用哪个SMTP server。&lt;br/&gt;API：懂编程的同学可以研究一下了。Scan agens：使用什么agent来扫描网中的IP。Section：即我们可以根据业务或其他属性将IP地址分section来进行管理，例如数据网，语音网，或者数据中心网，办公网等。Subnets：已经可以在这里面创建网段了，然后大网段下再划分明细网段。下面有一个Device Management，可以做为一个小的资源管理系统来用，即你的设置在哪个楼哪个机房哪个RACK的哪个U上。最后支持中文，可以调整中文语言 参考链接1https://phpipam.net/news/phpipam-installation-on-centos-7/ —本文结束感谢您的阅读。微信扫描二维码，关注我的公众号—]]></content>
      <categories>
        <category>版本管理工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控pod相关指标]]></title>
    <url>%2Fposts%2F33h3bbdo.html</url>
    <content type="text"><![CDATA[背景介绍临近618了，昨天开发同事来找我，问我为啥看grafana监控，我的服务内存随着压测一直在增长，不释放呢。然后给我看了监控的图。 其实是因为监控pod指标的值用了 container_memory_usage_bytes ，是包含cache的，所以感觉是一直不释放，今天就详细说下这些指标的含义。 容器监控的内存相关指标 名称 类型 单位 说明 container_memory_rss gauge 字节数bytes RSS内存，即常驻内存集（Resident Set Size），是分配给进程使用实际物理内存，而不是磁盘上缓存的虚拟内存。RSS内存包括所有分配的栈内存和堆内存，以及加载到物理内存中的共享库占用的内存空间，但不包括进入交换分区的内存。 container_memory_usage_bytes gauge 字节数bytes 当前使用的内存量，包括所有使用的内存，不管有没有被访问。 container_memory_max_usage_bytes gauge 字节数bytes 最大内存使用量的记录。 container_memory_cache gauge 字节数bytes 高速缓存（cache）的使用量。cache是位于CPU与主内存间的一种容量较小但速度很高的存储器，是为了提高cpu和内存之间的数据交换速度而设计的。 container_memory_swap gauge 字节数bytes 虚拟内存使用量。虚拟内存（swap）指的是用磁盘来模拟内存使用。当物理内存快要使用完或者达到一定比例，就可以把部分不用的内存数据交换到硬盘保存，需要使用时再调入物理内存 container_memory_working_set_bytes gauge 字节数bytes 当前内存工作集（working set）使用量。 container_memory_failcnt counter 次 申请内存失败次数计数 container_memory_failures_total counter 次 累计的内存申请错误次数 1container_memory_max_usage_bytes &gt; container_memory_usage_bytes &gt;= container_memory_working_set_bytes &gt; container_memory_rss 如果说开发想看自己应用实际内存占用，那就可以用rss，表达式如下： 1sum by(container_name) (container_memory_rss&#123;pod_name=&quot;$pod&quot;, container_name=~&quot;$container&quot;, container_name!=&quot;POD&quot;&#125;) 容器如果做了lxcfs，也可以top去看java进程的内存。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubernetes分析ExitCode]]></title>
    <url>%2Fposts%2Fmd13ao65.html</url>
    <content type="text"><![CDATA[问题最近总有开发小伙伴来找我，为什么我的容器总退出呢，在哪能看到原因。故写篇文章整理下docker退出的状态码。 如何查看退出码 查看pod中的容器退出码 12345678910111213$ kubectl describe pod xxxPort: &lt;none&gt; Host Port: &lt;none&gt; State: Running Started: Tue, 26 May 2020 20:01:04 +0800 Last State: Terminated Reason: Error Exit Code: 137 Started: Tue, 26 May 2020 19:58:40 +0800 Finished: Tue, 26 May 2020 20:01:04 +0800 Ready: True Restart Count: 2363 docker查看 12$ docker ps --filter &quot;status=exited&quot;$ docker inspect &lt;container-id&gt; --format=&apos;&#123;&#123;.State.ExitCode&#125;&#125;&apos; 常见退出码Exit Code 0 退出代码0表示特定容器没有附加前台进程。 该退出代码是所有其他后续退出代码的例外。 这不一定意味着发生了不好的事情。如果开发人员想要在容器完成其工作后自动停止其容器，则使用此退出代码。 Exit Code 1 程序错误，或者Dockerfile中引用不存在的文件，如 entrypoint中引用了错误的包 程序错误可以很简单，例如“除以0”，也可以很复杂，比如空引用或者其他程序 crash Exit Code 137 此状态码一般是因为 pod 中容器内存达到了它的资源限制(resources.limits)，一般是内存溢出(OOM)，CPU达到限制只需要不分时间片给程序就可以。因为限制资源是通过 linux 的 cgroup 实现的，所以 cgroup 会将此容器强制杀掉，类似于 kill -9 还可能是宿主机本身资源不够用了(OOM)，内核会选取一些进程杀掉来释放内存 不管是 cgroup 限制杀掉进程还是因为节点机器本身资源不够导致进程死掉，都可以从系统日志中找到记录( journalctl -k ) Exit Code 139 表明容器收到了SIGSEGV信号，无效的内存引用，对应kill -11 一般是代码有问题，或者 docker 的基础镜像有问题 Exit Code 143 表明容器收到了SIGTERM信号，终端关闭，对应kill -15 一般对应docker stop 命令 有时docker stop也会导致Exit Code 137。发生在与代码无法处理SIGTERM的情况下，docker进程等待十秒钟然后发出SIGKILL强制退出。 Exit Code 1 和 255 这种可能是一般错误，具体错误原因只能看容器日志，因为很多程序员写异常退出时习惯用 exit(1) 或 exit(-1)，-1 会根据转换规则转成 255 参考链接 https://imroc.io/posts/kubernetes/analysis-exitcode/ http://www.xuyasong.com/?p=1802]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[grafana修改主题]]></title>
    <url>%2Fposts%2Fdmm9nv31.html</url>
    <content type="text"><![CDATA[Grafana介绍Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点： 1、展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；（主题只有默认的黑与白） 2、数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等； 3、通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知； 4、混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源； 5、注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记； 6、过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。 修改主题方式注意：我的grafana是k8s安装的，所以需要持久化数据。并且找到的主题修改仅支持grafana6.x.x以上版本。 安装插件：（ https://grafana.com/grafana/plugins/yesoreyeram-boomtheme-panel ） 12grafana-cli plugins install yesoreyeram-boomtheme-panel安装完重启下pod就可以。 增加panel修改主题 修改主题 里面的css样式可以从这里寻找（ https://github.com/gilbN/theme.park/wiki/Themes#grafana-themes ） 效果 参考链接1https://github.com/gilbN/theme.park/wiki/Themes#grafana-themes]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubeadm多master集群升级k8s版本]]></title>
    <url>%2Fposts%2Fdw65vbx5.html</url>
    <content type="text"><![CDATA[版本说明本次升级版本为从1.15.3升级至1.16.3。另外更高的k8s版本，要注意内核要为4.4以上，尤其是1.18版本。 升级master节点升级查看当前集群组件列表 12345[root@master01 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster01.sy.com Ready master 3d9h v1.15.3master02.sy.com Ready master 3d9h v1.15.3master03.sy.com Ready master 3d9h v1.15.3 123456789101112[root@master01 ~]# kubeadm config images listI0521 20:18:24.336912 23537 version.go:248] remote version is much newer: v1.18.3; falling back to: stable-1.15W0521 20:18:34.337440 23537 version.go:98] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.15.txt&quot;: Get https://storage.googleapis.com/kubernetes-release/release/stable-1.15.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)W0521 20:18:34.337495 23537 version.go:99] falling back to the local client version: v1.15.3k8s.gcr.io/kube-apiserver:v1.15.3k8s.gcr.io/kube-controller-manager:v1.15.3k8s.gcr.io/kube-scheduler:v1.15.3k8s.gcr.io/kube-proxy:v1.15.3k8s.gcr.io/pause:3.1k8s.gcr.io/etcd:3.3.10k8s.gcr.io/coredns:1.3.1[root@master01 ~]# 升级 Kubeadm 工具版本 1[root@master01 ~]# yum update -y kubeadm-1.16.3-0 查看待升级的 kubernetes 组件镜像列表 12345678910[root@master01 ~]# kubeadm config images listW0521 20:33:34.091388 32299 version.go:101] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get https://storage.googleapis.com/kubernetes-release/release/stable-1.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)W0521 20:33:34.091559 32299 version.go:102] falling back to the local client version: v1.16.3k8s.gcr.io/kube-apiserver:v1.16.3k8s.gcr.io/kube-controller-manager:v1.16.3k8s.gcr.io/kube-scheduler:v1.16.3k8s.gcr.io/kube-proxy:v1.16.3k8s.gcr.io/pause:3.1k8s.gcr.io/etcd:3.3.15-0k8s.gcr.io/coredns:1.6.2 创建镜像脚本，并打tag 1234567891011121314151617181920[root@master01 ~]# cat pull-image.sh ## 设置镜像仓库地址MY_REGISTRY=registry.aliyuncs.com/google_containers## 拉取镜像docker pull $&#123;MY_REGISTRY&#125;/kube-apiserver:v1.16.3docker pull $&#123;MY_REGISTRY&#125;/kube-controller-manager:v1.16.3docker pull $&#123;MY_REGISTRY&#125;/kube-scheduler:v1.16.3docker pull $&#123;MY_REGISTRY&#125;/kube-proxy:v1.16.3docker pull $&#123;MY_REGISTRY&#125;/etcd:3.3.15-0docker pull $&#123;MY_REGISTRY&#125;/pause:3.1docker pull $&#123;MY_REGISTRY&#125;/coredns:1.6.2## 设置标签docker tag $&#123;MY_REGISTRY&#125;/kube-apiserver:v1.16.3 k8s.gcr.io/kube-apiserver:v1.16.3docker tag $&#123;MY_REGISTRY&#125;/kube-scheduler:v1.16.3 k8s.gcr.io/kube-scheduler:v1.16.3docker tag $&#123;MY_REGISTRY&#125;/kube-controller-manager:v1.16.3 k8s.gcr.io/kube-controller-manager:v1.16.3docker tag $&#123;MY_REGISTRY&#125;/kube-proxy:v1.16.3 k8s.gcr.io/kube-proxy:v1.16.3docker tag $&#123;MY_REGISTRY&#125;/etcd:3.3.15-0 k8s.gcr.io/etcd:3.3.15-0docker tag $&#123;MY_REGISTRY&#125;/pause:3.1 k8s.gcr.io/pause:3.1docker tag $&#123;MY_REGISTRY&#125;/coredns:1.6.2 k8s.gcr.io/coredns:1.6.2 升级kubeadm 1234567891011121314[root@master01 ~]# kubectl drain master01.sy.com --ignore-daemonsets[root@master01 ~]# kubeadm upgrade apply v1.16.3[upgrade/config] Making sure the configuration is correct:[upgrade/config] Reading configuration from the cluster...[upgrade/config] FYI: You can look at this config file with &apos;kubectl -n kube-system get cm kubeadm-config -oyaml&apos;[preflight] Running pre-flight checks.[upgrade] Making sure the cluster is healthy:[upgrade/version] You have chosen to change the cluster version to &quot;v1.16.3&quot;[upgrade/versions] Cluster version: v1.15.3[upgrade/versions] kubeadm version: v1.16.3[upgrade/confirm] Are you sure you want to proceed with the upgrade? [y/N]: y.........[upgrade/successful] SUCCESS! Your cluster was upgraded to &quot;v1.16.3&quot;. Enjoy![upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets if you haven&apos;t already done so. 升级 Kubelet 12[root@master01 ~]# yum update -y kubelet-1.16.3-0[root@master01 ~]# systemctl daemon-reload &amp;&amp; systemctl restart kubelet 看日志发现kubelet有报错 1cni.go:237] Unable to update cni config: no valid networks found in /etc/cni/net.d 解决 12345678910111213141516171819在v1.16中，kubelet将验证cni配置文件在cbr0 这一行上面新增一行:cni-conf.json: | &#123; &quot;cniVersion&quot;:&quot;0.2.0&quot;, &quot;name&quot;: &quot;cbr0&quot;, flannal镜像改成quay.io/coreos/flannel:v0.11.0-amd64在看node状态[root@master01 ~]# kubectl uncordon master01.sy.comnode/master01.sy.com uncordoned[root@master01 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster01.sy.com Ready master 4d3h v1.16.3master02.sy.com Ready master 4d3h v1.15.3master03.sy.com Ready master 4d2h v1.15.3 其他master节点升级也一样操作，不过命令替换一下 1234567[root@master02 ~]# kubeadm upgrade node experimental-control-plane[root@master01 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster01.sy.com Ready master 4d3h v1.16.3master02.sy.com Ready master 4d3h v1.16.3master03.sy.com Ready master 4d3h v1.16.3 node节点升级1234kubectl drain [节点名称] --ignore-daemonsetsyum update -y kubeadm-1.16.3-0yum update -y kubelet-1.16.3-0systemctl daemon-reload &amp;&amp; systemctl restart kubelet 参考链接 https://www.cnblogs.com/winstom/p/11836844.html]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx根据ip进行灰度发布]]></title>
    <url>%2Fposts%2F8pmz45bs.html</url>
    <content type="text"><![CDATA[介绍之前公司做的都是蓝绿发布，但是有的开发想着又能实现根据来源ip做灰度，又能实现蓝绿发布，在这里我写了下简单的实现方式。 解决办法nginx 负载均衡器判断客户端IP地址，如果是办公室IP，则反向代理到灰度环境；如果不是，则反向代理到生产环境。 下面是一个域名多项目的事例： 12345678910111213141516171819202122232425262728293031323334server &#123; listen 80; server_name sy.test.com; add_header X-Cache $upstream_cache_status; charset utf-8; access_log /data/nginxlog/sy.test.com.log; set $web_backend tomcat-test-scm-v1; if ($remote_addr ~ &quot;x.x.x.x&quot;) &#123; set $web_backend tomcat-test-scm-v2; &#125; if ($remote_addr ~ &quot;x.x.x.x&quot;) &#123; set $web_backend tomcat-test-scm-v2; &#125; set $hd_backend live-v1; if ($remote_addr ~ &quot;x.x.x.x&quot;) &#123; set $hd_backend live-v2; &#125; if ($remote_addr ~ &quot;x.x.x.x&quot;) &#123; set $hd_backend live-v2; &#125; location ~ ^/live &#123; proxy_redirect off; proxy_set_header Host $host; proxy_pass http://$hd_backend; &#125; location ~ / &#123; proxy_redirect off; proxy_pass http://$web_backend; &#125;&#125; 实现效果，办公网访问的是灰度的v2版本，当测试通过，只需将v1版本替换成v2。 参考链接 https://www.cnblogs.com/zhangyin6985/p/6064350.html]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubeadm高可用集群安装]]></title>
    <url>%2Fposts%2Fomn700fj.html</url>
    <content type="text"><![CDATA[前提最近总有小伙伴说kubeadm的高可用集群怎么安装，故写了这篇文章。 创建高可用首先先有一个 Master 节点，然后再让其他服务器加入组成三个 Master 节点高可用，然后再将工作节点 Node 加入。 Kuberadm 功能 kubeadm init： 启动一个 Kubernetes 主节点 kubeadm join： 启动一个 Kubernetes 工作节点并且将其加入到集群 kubeadm upgrade： 更新一个 Kubernetes 集群到新版本 kubeadm config： 如果使用 v1.7.x 或者更低版本的 kubeadm 初始化集群，您需要对集群做一些配置以便使用 kubeadm upgrade 命令 kubeadm token： 管理 kubeadm join 使用的令牌 kubeadm reset： 还原 kubeadm init 或者 kubeadm join 对主机所做的任何更改 kubeadm version： 打印 kubeadm 版本 kubeadm alpha： 预览一组可用的新功能以便从社区搜集反馈 初始化主机名称解析分别进入不同服务器，进入 /etc/hosts 进行编辑 123410.16.16.100 master.sy.com k8s-vip10.16.16.19 master01.sy.com sy110.16.16.20 master02.sy.com sy210.16.16.28 master03.sy.com sy3 我用的openstack虚拟机，vip需要提前开通，具体开通vip地址可以看我另一篇文章 https://shenshengkun.github.io/posts/dk456akf.html 安装依赖包以下操作均在所有机器操作 1yum install -y epel-release conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget unzip net-tools 关闭防火墙1234systemctl stop firewalldsystemctl disable firewalldiptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t natiptables -P FORWARD ACCEPT 关闭 swap 分区12swapoff -ased -i &apos;/ swap / s/^\(.*\)$/#\1/g&apos; /etc/fstab 关闭 SELinux12setenforce 0sed -i &apos;s/^SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/config 设置系统参数12345678910111213141516171819modprobe ip_vs_rrmodprobe br_netfiltercat &gt; kubernetes.conf &lt;&lt;EOFnet.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它vm.overcommit_memory=1 # 不检查物理内存是否够用vm.panic_on_oom=0 # 开启 OOMfs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOFcp kubernetes.conf /etc/sysctl.d/kubernetes.confsysctl -p /etc/sysctl.d/kubernetes.conf Keepalived安装安装 1yum install -y keepalived 配置Keepalived 1234567891011121314151617181920212223242526272829303132333435363738cat &lt;&lt;EOF &gt; /etc/keepalived/keepalived.conf! Configuration File for keepalived# 主要是配置故障发生时的通知对象以及机器标识。global_defs &#123; # 标识本节点的字条串，通常为 hostname，但不一定非得是 hostname。故障发生时，邮件通知会用到。 router_id LVS_k8s&#125;# 用来做健康检查的，当时检查失败时会将 vrrp_instance 的 priority 减少相应的值。vrrp_script check_haproxy &#123; script "killall -0 haproxy" #根据进程名称检测进程是否存活 interval 3 weight -2 fall 10 rise 2&#125;# rp_instance用来定义对外提供服务的 VIP 区域及其相关属性。vrrp_instance VI_1 &#123; state MASTER #当前节点为MASTER，其他两个节点设置为BACKUP interface eth0 #改为自己的网卡 virtual_router_id 51 priority 250 advert_int 1 authentication &#123; auth_type PASS auth_pass 3sqP05dQgMSlzrxHj &#125; virtual_ipaddress &#123; 10.16.16.100 #虚拟ip，即VIP &#125; track_script &#123; check_haproxy &#125;&#125;EOF 启动 1systemctl enable keepalived &amp;&amp; systemctl start keepalived 安装haproxy1yum install -y haproxy 此处的haproxy为apiserver提供反向代理，haproxy将所有请求轮询转发到每个master节点上。相对于仅仅使用keepalived主备模式仅单个master节点承载流量，这种方式更加合理、健壮。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt; EOF#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global # to have these messages end up in /var/log/haproxy.log you will # need to: # 1) configure syslog to accept network log events. This is done # by adding the '-r' option to the SYSLOGD_OPTIONS in # /etc/sysconfig/syslog # 2) configure local2 events to go to the /var/log/haproxy.log # file. A line like the following can be added to # /etc/sysconfig/syslog # # local2.* /var/log/haproxy.log # log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats#---------------------------------------------------------------------# common defaults that all the 'listen' and 'backend' sections will# use if not designated in their block#--------------------------------------------------------------------- defaults mode http log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000#---------------------------------------------------------------------# kubernetes apiserver frontend which proxys to the backends#--------------------------------------------------------------------- frontend kubernetes-apiserver mode tcp bind *:8443 option tcplog default_backend kubernetes-apiserver #---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------backend kubernetes-apiserver mode tcp balance roundrobin server master01.sy.com 10.16.16.19:6443 check server master02.sy.com 10.16.16.20:6443 check server master03.sy.com 10.16.16.28:6443 check#---------------------------------------------------------------------# collection haproxy statistics message#---------------------------------------------------------------------listen stats bind *:1080 stats auth admin:admin stats refresh 5s stats realm HAProxy\ Statistics stats uri /admin?statsEOF 启动haproxy 1systemctl enable haproxy &amp;&amp; systemctl start haproxy 安装Docker (所有节点)123456789yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce-19.03.1-3.el7 -y 安加速，并且修改cgroup driver根据文档CRI installation中的内容，对于使用systemd作为init system的Linux的发行版，使用systemd作为docker的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。 123456789[root@sy1 ~]# systemctl start docker[root@sy1 ~]# cat /etc/docker/daemon.json &#123;&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;registry-mirrors&quot;: [&quot;https://dockerhub.mirrors.nwafu.edu.cn/&quot;], &quot;bip&quot;: &quot;192.17.10.1/24&quot;&#125;[root@sy1 ~]# systemctl restart docker[root@sy1 ~]# systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. 安装kubeadm、kubelet配置yum源 12345678910cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF 查看kubelet版本列表 1yum list kubelet --showduplicates | sort -r 安装 kubeadm、kubelet 12yum install -y kubelet-1.15.3-0 kubeadm-1.15.3-0systemctl enable kubelet.service &amp;&amp; systemctl start kubelet 初始化第一个kubernetes master节点创建kubeadm配置的yaml文件 1234567891011121314151617181920212223242526272829303132333435363738cat &gt; kubeadm-config.yaml &lt;&lt; EOFapiServer: certSANs: - master01.sy.com - master02.sy.com - master03.sy.com - master.sy.com - 10.16.16.100 - 10.16.16.19 - 10.16.16.20 - 10.16.16.28 - 127.0.0.1 extraArgs: authorization-mode: Node,RBAC timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrolPlaneEndpoint: "master.sy.com:8443"controllerManager: &#123;&#125;dns: type: CoreDNSetcd: local: dataDir: /var/lib/etcdimageRepository: registry.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: v1.15.3networking: dnsDomain: cluster.local podSubnet: 192.160.0.0/16 serviceSubnet: 192.168.0.0/17scheduler: &#123;&#125;---apiVersion: kubeproxy.config.k8s.io/v1alpha1kind: KubeProxyConfigurationmode: ipvsEOF 初始化第一个master节点 1kubeadm init --config kubeadm-config.yaml 1234567891011121314151617181920212223Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now join any number of control-plane nodes by copying certificate authorities and service account keys on each node and then running the following as root: kubeadm join master.sy.com:8443 --token ltjuyu.2otdxrrsy4ku6lri \ --discovery-token-ca-cert-hash sha256:f6562358b50a516e7814136c73b57827626a75ae82389fbe0c70b6328700ee4a \ --control-plane Then you can join any number of worker nodes by running the following on each as root:kubeadm join master.sy.com:8443 --token ltjuyu.2otdxrrsy4ku6lri \ --discovery-token-ca-cert-hash sha256:f6562358b50a516e7814136c73b57827626a75ae82389fbe0c70b6328700ee4a kubeconfig123[root@sy1 ~]# mkdir -p $HOME/.kube[root@sy1 ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config[root@sy1 ~]# chown $(id -u):$(id -g) $HOME/.kube/config 安装网络插件配置flannel插件的yaml文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160cat &gt; kube-flannel.yaml &lt;&lt; EOF---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: flannelrules: - apiGroups: - &quot;&quot; resources: - pods verbs: - get - apiGroups: - &quot;&quot; resources: - nodes verbs: - list - watch - apiGroups: - &quot;&quot; resources: - nodes/status verbs: - patch---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: flannelroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: flannelsubjects:- kind: ServiceAccount name: flannel namespace: kube-system---apiVersion: v1kind: ServiceAccountmetadata: name: flannel namespace: kube-system---kind: ConfigMapapiVersion: v1metadata: name: kube-flannel-cfg namespace: kube-system labels: tier: node app: flanneldata: cni-conf.json: | &#123; &quot;name&quot;: &quot;cbr0&quot;, &quot;plugins&quot;: [ &#123; &quot;type&quot;: &quot;flannel&quot;, &quot;delegate&quot;: &#123; &quot;hairpinMode&quot;: true, &quot;isDefaultGateway&quot;: true &#125; &#125;, &#123; &quot;type&quot;: &quot;portmap&quot;, &quot;capabilities&quot;: &#123; &quot;portMappings&quot;: true &#125; &#125; ] &#125; net-conf.json: | &#123; &quot;Network&quot;: &quot;192.160.0.0/16&quot;, &quot;Backend&quot;: &#123; &quot;Type&quot;: &quot;vxlan&quot; &#125; &#125;---apiVersion: extensions/v1beta1kind: DaemonSetmetadata: name: kube-flannel-ds-amd64 namespace: kube-system labels: tier: node app: flannelspec: template: metadata: labels: tier: node app: flannel spec: hostNetwork: true nodeSelector: beta.kubernetes.io/arch: amd64 tolerations: - operator: Exists effect: NoSchedule serviceAccountName: flannel initContainers: - name: install-cni image: registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64 command: - cp args: - -f - /etc/kube-flannel/cni-conf.json - /etc/cni/net.d/10-flannel.conflist volumeMounts: - name: cni mountPath: /etc/cni/net.d - name: flannel-cfg mountPath: /etc/kube-flannel/ containers: - name: kube-flannel image: registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0.10.0-amd64 command: - /opt/bin/flanneld args: - --ip-masq - --kube-subnet-mgr resources: requests: cpu: &quot;100m&quot; memory: &quot;50Mi&quot; limits: cpu: &quot;100m&quot; memory: &quot;50Mi&quot; securityContext: privileged: true env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace volumeMounts: - name: run mountPath: /run - name: flannel-cfg mountPath: /etc/kube-flannel/ volumes: - name: run hostPath: path: /run - name: cni hostPath: path: /etc/cni/net.d - name: flannel-cfg configMap: name: kube-flannel-cfgEOF 部署 1kubectl apply -f kube-flannel.yaml 加入集群Master加入集群构成高可用复制文件，从master1上复制到2和3 123456789ssh root@master02.sy.com mkdir -p /etc/kubernetes/pki/etcdscp /etc/kubernetes/admin.conf root@master02.sy.com:/etc/kubernetesscp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; root@master02.sy.com:/etc/kubernetes/pkiscp /etc/kubernetes/pki/etcd/ca.* root@master02.sy.com:/etc/kubernetes/pki/etcdssh root@master03.sy.com mkdir -p /etc/kubernetes/pki/etcdscp /etc/kubernetes/admin.conf root@master03.sy.com:/etc/kubernetesscp /etc/kubernetes/pki/&#123;ca.*,sa.*,front-proxy-ca.*&#125; root@master03.sy.com:/etc/kubernetes/pkiscp /etc/kubernetes/pki/etcd/ca.* root@master03.sy.com:/etc/kubernetes/pki/etcd master节点加入集群 1kubeadm join master.sy.com:8443 --token ltjuyu.2otdxrrsy4ku6lri --discovery-token-ca-cert-hash sha256:f6562358b50a516e7814136c73b57827626a75ae82389fbe0c70b6328700ee4a --experimental-control-plane 结果如下 12345[root@sy1 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONmaster01.sy.com Ready master 28m v1.15.3master02.sy.com Ready master 3m12s v1.15.3master03.sy.com Ready master 24s v1.15.3 node加入集群12kubeadm join master.sy.com:8443 --token ltjuyu.2otdxrrsy4ku6lri \ --discovery-token-ca-cert-hash sha256:f6562358b50a516e7814136c73b57827626a75ae82389fbe0c70b6328700ee4a]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack虚拟机状态修改两种方法]]></title>
    <url>%2Fposts%2Fc2okabkf.html</url>
    <content type="text"><![CDATA[前言上午线上openstack集群，发现热迁移不了，后经查证是由于新加入的集群操作系统版本太高，导致热迁移少了模块，引发的问题是，热迁移的机器状态一直是迁移中，故做了一些处理。这里列出一些常用的操作命令。 命令修改列出所有租户 1nova list --all-tenants 找到对应虚拟机和其ID，用ID把它设置为active状态: 1nova reset-state --active 虚拟机ID 停止 1nova stop 虚拟机ID 启动 1nova start 虚拟机ID 重启 1nova reboot 虚拟机ID 数据库进入数据库 123Use nova； 进入nova数据库select * from instances where uuid=’实例的ID &apos;； 将实例状态更改为active、实例任务状态重置 1UPDATE instances SET vm_state = &apos;active&apos; and task_state =NULL where uuid = &apos;实例ID&apos;; 修改电源状态是running，power_state的状态是从0-4 1UPDATE instances SET power_state=&apos;1&apos; where uuid=&apos;实例ID&apos;; 修改状态是active 1UPDATE instances SET vm_state = &apos;active&apos; where uuid=&apos;实例ID&apos;; 修改任务是none 1UPDATE instances SET task_state =&apos;none&apos; where uuid=&apos;实例ID&apos;; 参考链接 https://www.cnblogs.com/wangjq19920210/p/11165138.html]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s二进制1.14版本添加node节点]]></title>
    <url>%2Fposts%2Fvkk87cvc.html</url>
    <content type="text"><![CDATA[前言新增俩台node节点加进k8s集群。 初始化安装依赖包以下操作均在所有机器操作 1yum install -y epel-release conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget unzip net-tools fuse-devel fuse fuse-libs 关闭防火墙1234systemctl stop firewalldsystemctl disable firewalldiptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t natiptables -P FORWARD ACCEPT 关闭 swap 分区12swapoff -ased -i &apos;/ swap / s/^\(.*\)$/#\1/g&apos; /etc/fstab 关闭 SELinux12setenforce 0sed -i &apos;s/^SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/config 加载内核并优化12345678910111213141516171819modprobe ip_vs_rrmodprobe br_netfiltercat &gt; kubernetes.conf &lt;&lt;EOFnet.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它vm.overcommit_memory=1 # 不检查物理内存是否够用vm.panic_on_oom=0 # 开启 OOMfs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOFcp kubernetes.conf /etc/sysctl.d/kubernetes.confsysctl -p /etc/sysctl.d/kubernetes.conf ntp1ntpdate ntp1.aliyun.com 创建相关目录1mkdir -p /opt/k8s/&#123;bin,work&#125; /etc/&#123;kubernetes,etcd&#125;/cert 操作添加hosts#在之前的master节点添加 12[root@test-master-1 ~]# echo &quot;10.16.8.86 test-node-16&quot; &gt;&gt;/etc/hosts [root@test-master-1 ~]# echo &quot;10.16.8.80 test-node-17&quot; &gt;&gt;/etc/hosts 新加的俩台节点加hosts 12345678cat &gt;&gt;/etc/hosts&lt;&lt;EOF10.16.8.10 test-master-110.16.8.11 test-master-210.16.8.12 test-master-310.16.8.13 test-node-1510.16.8.86 test-node-1610.16.8.80 test-node-17EOF 分发秘钥等信息master节点操作 12ssh-copy-id -i ~/.ssh/id_rsa.pub test-node-16ssh-copy-id -i ~/.ssh/id_rsa.pub test-node-17 推送CA证书 123cd /etc/kubernetes/certscp ca.pem ca-config.json test-node-16:/etc/kubernetes/cert/scp ca.pem ca-config.json test-node-17:/etc/kubernetes/cert/ flannal部署拷贝二进制文件 123cd /opt/k8s/work/flannelscp flanneld mk-docker-opts.sh test-node-16:/opt/k8s/bin/scp flanneld mk-docker-opts.sh test-node-17:/opt/k8s/bin/ 拷贝flanneld密钥 1234ssh test-node-16 &quot;mkdir -p /etc/flanneld/cert&quot;ssh test-node-17 &quot;mkdir -p /etc/flanneld/cert&quot;scp /etc/flanneld/cert/flanneld*.pem test-node-16:/etc/flanneld/certscp /etc/flanneld/cert/flanneld*.pem test-node-17:/etc/flanneld/cert 拷贝flannel启动文件 12345scp /etc/systemd/system/flanneld.service test-node-16:/etc/systemd/system/scp /etc/systemd/system/flanneld.service test-node-17:/etc/systemd/system/#启动flannelssh test-node-16 &quot;systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld&quot;ssh test-node-17 &quot;systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld&quot; Kubernetes Node 节点安装Docker12345678910yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce-19.03.1-3.el7 -y 创建配置文件 123456789101112131415mkdir -p /etc/docker/cat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;registry-mirrors&quot;: [&quot;https://dockerhub.mirrors.nwafu.edu.cn/&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hub-mirror.c.163.com&quot;], &quot;max-concurrent-downloads&quot;: 20, &quot;live-restore&quot;: true, &quot;max-concurrent-uploads&quot;: 10, &quot;debug&quot;: true, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot;, &quot;max-file&quot;: &quot;5&quot; &#125;&#125;EOF 修改docker启动配置文件 1234vim /usr/lib/systemd/system/docker.serviceEnvironmentFile=-/run/flannel/dockerExecStart=/usr/bin/dockerd $DOCKER_NETWORK_OPTIONS -H fd:// --containerd=/run/containerd/containerd.sock 123systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart dockersystemctl status docker|grep Active 安装kubelet创建kubelet bootstrap kubeconfig文件 12345678910111213141516171819202122232425#master节点操作另一台创建文件等和这个同理，这里只列举一个。cd /opt/k8s/workexport BOOTSTRAP_TOKEN=$(kubeadm token create \ --description kubelet-bootstrap-token \ --groups system:bootstrappers:test-node-16 \ --kubeconfig ~/.kube/config)# 设置集群参数kubectl config set-cluster kubernetes \ --certificate-authority=/etc/kubernetes/cert/ca.pem \ --embed-certs=true \ --server=https://10.16.8.14:6443 \ --kubeconfig=kubelet-bootstrap-test-node-16.kubeconfig# 设置客户端认证参数kubectl config set-credentials kubelet-bootstrap \ --token=$&#123;BOOTSTRAP_TOKEN&#125; \ --kubeconfig=kubelet-bootstrap-test-node-16.kubeconfig# 设置上下文参数kubectl config set-context default \ --cluster=kubernetes \ --user=kubelet-bootstrap \ --kubeconfig=kubelet-bootstrap-test-node-16.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=kubelet-bootstrap-test-node-16.kubeconfig 分发kubeconfig 12cd /opt/k8s/workscp kubelet-bootstrap-test-node-16.kubeconfig test-node-16:/etc/kubernetes/kubelet-bootstrap.kubeconfig 查看kubeadm为各个节点创建的token 1kubeadm token list --kubeconfig ~/.kube/config 创建和分发kubelet参数配置 12345cd /opt/k8s/worksed -e &quot;s/##NODE_IP##/10.16.8.86/&quot; kubelet-config.yaml.template &gt; kubelet-config-10.16.8.86.yaml.templatesed -e &quot;s/##NODE_IP##/10.16.8.80/&quot; kubelet-config.yaml.template &gt; kubelet-config-10.16.8.80.yaml.templatescp kubelet-config-10.16.8.86.yaml.template root@test-node-16:/etc/kubernetes/kubelet-config.yamlscp kubelet-config-10.16.8.80.yaml.template root@test-node-17:/etc/kubernetes/kubelet-config.yaml 拷贝kubelet启动文件和命令 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shsed -e &quot;s/##NODE_NAME##/test-node-16/&quot; kubelet.service.template &gt; kubelet-test-node-16.servicesed -e &quot;s/##NODE_NAME##/test-node-17/&quot; kubelet.service.template &gt; kubelet-test-node-17.servicescp kubelet-test-node-16.service root@test-node-16:/etc/systemd/system/kubelet.servicescp kubelet-test-node-17.service root@test-node-17:/etc/systemd/system/kubelet.servicescp /opt/k8s/bin/kubelet test-node-16:/opt/k8s/bin/scp /opt/k8s/bin/kubelet test-node-17:/opt/k8s/bin/ 启动kubelet 123456cd /opt/k8s/worksource /opt/k8s/bin/environment.shssh root@test-node-16 &quot;mkdir -p $&#123;K8S_DIR&#125;/kubelet/kubelet-plugins/volume/exec/&quot;ssh root@test-node-16 &quot;systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet&quot;ssh root@test-node-17 &quot;mkdir -p $&#123;K8S_DIR&#125;/kubelet/kubelet-plugins/volume/exec/&quot;ssh root@test-node-17 &quot;systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet&quot; 签注证书 1kubectl get csr | grep Pending | awk &apos;&#123;print $1&#125;&apos; | xargs kubectl certificate approve 安装kube-proxy 推送kube-proxy二进制启动文件和kubeconfig文件 12345cd /opt/k8s/work/scp kubernetes/server/bin/kube-proxy test-node-16:/opt/k8s/bin/scp kubernetes/server/bin/kube-proxy test-node-17:/opt/k8s/bin/scp kube-proxy.kubeconfig root@test-node-16:/etc/kubernetes/scp kube-proxy.kubeconfig root@test-node-17:/etc/kubernetes/ 创建和分发kube-proxy配置文件 1234567cd /opt/k8s/work/sed -e &quot;s/##NODE_NAME##/test-node-16/&quot; -e &quot;s/##NODE_IP##/10.16.8.86/&quot; kube-proxy-config.yaml.template &gt; kube-proxy-config-test-node-16.yaml.templatesed -e &quot;s/##NODE_NAME##/test-node-17/&quot; -e &quot;s/##NODE_IP##/10.16.8.80/&quot; kube-proxy-config.yaml.template &gt; kube-proxy-config-test-node-17.yaml.templatescp kube-proxy-config-test-node-16.yaml.template root@test-node-16:/etc/kubernetes/kube-proxy-config.yamlscp kube-proxy-config-test-node-17.yaml.template root@test-node-17:/etc/kubernetes/kube-proxy-config.yamlscp kube-proxy.service root@test-node-16:/etc/systemd/system/scp kube-proxy.service root@test-node-17:/etc/systemd/system/ 启动kube-proxy服务 123456cd /opt/k8s/worksource /opt/k8s/bin/environment.shssh root@test-node-16 &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-proxy&quot;ssh root@test-node-16 &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy&quot;ssh root@test-node-17 &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-proxy&quot;ssh root@test-node-17 &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy&quot;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[envoy介绍]]></title>
    <url>%2Fposts%2Fd3oolab1.html</url>
    <content type="text"><![CDATA[Envoy 介绍Envoy 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线，体积小，性能高。它的诞生源于以下理念： 对应用程序而言，网络应该是透明的。当网络和应用程序出现故障时，应该能够很容易确定问题的根源。 核心功能独立于进程的架构：Envoy是一个独立的进程，旨在与每个应用程序服务器一起运行。所有Envoy组成了一个透明的通信网格，其中每个应用程序发送和接收来自本地主机的消息，并且不用知道网络拓扑。与传统的服务通信服务的库方法相比，进程外架构有两个实质性好处： Envoy支持任何编程语言写的服务。只用部署一个Envoy就可以在Java、C++、Go、PHP、Python等服务间形成网格。面向服务的体系结构使用多个应用程序框架和语言的情况越来越普遍。Envoy以透明的方式弥合了这些差距。 任何使用过大型面向服务的体系结构的人都知道，部署库升级可能会非常痛苦。Envoy可以在整个基础设施中迅速部署和升级。 基于最新的C++11开发：Envoy是基于C++11编写的。选择本机代码是因为我们认为像Envoy这样的体系结构组件应该尽可能给应用程序让路。现代应用程序开发人员习惯于在共享云环境中的部署，以及使用非常高效但性能不是特别好的语言 (如 PHP、Python、Ruby、Scala 等)， 在这种环境下，找到尾延迟的原因变得非常的困难。本机代码通常提供出色的延迟属性，不会给已经令人困惑的情况增加额外的混乱。与用 C 编写的其他本机代码代理解决方案不同，C++11 提供了出色的开发人员工作效率和性能。 基于 L3/L4 网络Filter的架构：Envoy的核心使用的是基于 L3/L4 的网络代理。可插拔的Filter链机制允许编写Filter以执行不同的 tcp 代理任务并插入主服务器。当然Envoy也提供现成的Filter以支持各种任务，如原始 TCP代理、HTTP 代理、TLS客户端证书身份验证等。 基于 L7 网络的HTTP Filter架构：HTTP是现代应用程序体系结构的重要组成部分，Envoy支持额外的 HTTP L7 Filter层。HTTP Filter可以插入到 HTTP 连接管理子系统中，该子系统支持执行不同的任务，如缓冲、速率限制、路由、嗅探亚马逊的 Dynamodb 等。 对HTTP/2 的极佳支持：在 HTTP 模式下运行时，Envoy同时支持 HTTP/1.1 和 HTTP/2。Envoy可以做到让 HTTP/1.1 和 HTTP/2 之间的通讯保持透明。这意味着对于任意的 HTTP/1.1 和 HTTP/2 的客户端和目标服务器的组合，Envoy都可以将他们桥接起来。当然建议在配置Envoy服务时使用 HTTP/2 在所有组件之间创建一个长链的网格，这样请求和响应可以多路复用。Envoy 不支持 SPDY，因为这个协议正在逐渐被淘汰。 SPDY（读作“SPeeDY”）是 Google 开发的基于 TCP 的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。互联网工程任务组（IETF）对谷歌提出的 SPDY 协议进行了标准化，于2015年5推出了类似于 SPDY 协议的 HTTP 2.0 协议标准（简称HTTP/2）。谷歌因此宣布放弃对SPDY协议的支持，转而支持HTTP/2。 HTTP L7 路由：在 HTTP 模式下运行时，Envoy 的路由子系统能够根据路径、权限、内容类型、运行时值等来路由和重定向请求。在使用 Envoy 作为前端代理时，此功能非常有用。同时在构建服务网格时也会利用此功能。 对 gRPC 的支持：gRPC 是一个来自谷歌的 RPC框架, 使用 HTTP/2 作为底层的多路复用传输。Envoy支持所有需要用作 gPRC请求和响应的路由和负载均衡基础的 HTTP/2 功能。这两个系统是非常互补的。 对MongoDB的 L7 网络协议的支持：对于当今的 Web 应用，MongoDB数据库非常流行。因为Envoy支持基于 L7 的网络协议，所以Envoy 支持 MongoDB 连接的嗅探、数据统计和日志记录。 对DynamoDB的 L7 网络协议的支持：DynamoDB是由Amazion提供的基于键值对的NoSQL数据库。因为Envoy支持基于 L7 的网络协议，所以Envoy 支持 DynamoDB 连接的嗅探和数据统计。 服务的动态注册和发现：Envoy 可以选择使用一组分层的动态配置 API 来进行集中管理。这些层为Envoy提供了以下方面的动态更新: 后端群集的主机、后端群集本身、HTTP 路由、侦听套接字和通信加密。为了实现更简单的部署, 后端主机发现可以通过 DNS 解析 (甚至完全跳过) 完成, 层也可以替换为静态配置文件。 健康检查：构建 Envoy 网格的建议方法是将服务发现视为最终一致的过程。 Envoy 包括一个运行状况检查子系统，该子系统可以选择对上游服务集群执行主动运行状况检查。然后，Envoy 使用服务发现和运行状况检查信息的联合来确定健康的负载均衡服务器。Envoy 还支持通过异常检测子系统进行被动运行状况检查。 高级负载均衡：分布式系统中不同组件之间的负载平衡是一个复杂的问题。由于 Envoy 是一个独立的代理而不是库，因此它能够在一个位置实现高级负载平衡技术，并使任何应用程序都可以访问。目前Envoy 包括支持自动重试、断路、通过外部速率限制服务限制全局速率、请求隐藏和异常值检测。未来计划为Request Racing提供支持。 前端/边缘系统代理支持： 虽然 Envoy 主要是为服务通信系统而设计的，但对前端/边缘系统也是很有用的（可观测性、管理、相同的服务发现和负载平衡算法等）。Envoy包含足够的功能，使其可用作大多数 Web 应用服务用例的边缘代理。这包括作为 TLS 的终点、HTTP/1.1 和 HTTP/2 支持, 以及 HTTP L7 路由。 最好的观察统计能力：如上所述，Envoy 的首要目标是使网络透明。但是在网络级别和应用程序级都无法避免的容易出现问题。Envoy 包含了对所有子系统的强有力的统计支持。 statsd(和其他兼容的数据提供程序) 是当前支持的统计接收器，插入不同的统计接收器也并不困难。Envoy 可以通过管理端口查看统计信息，还支持通过第三方供应商进行分布式追踪。 安装docker自己的镜像，加了一些安装工具 1docker pull shenshengkun/envoy:v1.14.1 centos123456# 安装 yum-config-manager yum install -y yum-utils# 添加 Envoy 仓库yum-config-manager --add-repo https://getenvoy.io/linux/centos/tetrate-getenvoy.repo# 安装 Envoyyum install -y getenvoy-envoy 参考链接 https://www.envoyproxy.io/docs/envoy/latest/ https://www.jianshu.com/p/a6f7f46683e1]]></content>
      <categories>
        <category>envoy</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx合并前端资源nginx-http-concat模块]]></title>
    <url>%2Fposts%2F8plm645b.html</url>
    <content type="text"><![CDATA[介绍 nginx-http-concat,可以减少http请求,从而减轻了服务器的请求压力,更快的响应。 每个http请求的应答都是非常昂贵的, 并且我们知道浏览器本身也有并发请求限制,当一个网站并发请求非常多时,也会非常影响性能的。 通常来说合并css、js也是为了将很多小的css文件全部合并成一个http返回,也是非常重要的优化手段,对于前端工程实现来说,也比较清晰. 像淘宝的链接很多都是taobao.com/a.js,b.js,c.js 部署123git clone https://github.com/alibaba/nginx-http-concat.git./configure --add-module=./nginx-http-concat/make &amp;&amp; make install 模块详解 在配置的地方使模块有效（失效） concat on | off默认: concat off上下文: http, server, location 定义哪些mime types是可以被接受 concat_types MIME types默认: concat_types: text/css application/x-javascript上下文: http, server, location 定义是否只接受在[MIME types]中的相同类型的文件 concat_unique on | off默认: concat_unique on上下文: http, server, location 定义最大能接受的文件数量。 concat_max_files number默认: concat_max_files 10上下文: http, server, location 定义在文件之间添加分隔符 concat_delimiter string默认: 无上下文 ‘http, server, location’ 定义模块是否忽略文件不存在（404）或者没有权限（403）错误 concat_ignore_file_error ‘on | off’默认 ‘concat_ignore_file_error off’上下文 ‘http, server, location’ 注意：使用中发现对JS使用标准MIME-Type（application/X-javascript）导致的400 Bad Request ，我是通过修改contat的源码，加上javascript，就可以了。 123456location / &#123; concat on; concat_max_files 100; concat_delimiter &apos;&apos;; concat_unique off; concat_ignore_file_error on; 参考链接 https://cloud.tencent.com/developer/article/1463929]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus查询]]></title>
    <url>%2Fposts%2Fpccv7vb4.html</url>
    <content type="text"><![CDATA[表达式语言数据类型在Prometheus的表达式语言中，任何表达式或者子表达式都可以归为四种类型： 即时向量(instant vector) 包含每个时间序列的单个样本的一组时间序列，共享相同的时间戳。 范围向量(Range vector) 包含每个时间序列随时间变化的数据点的一组时间序列。 标量(Scalar) 一个简单的数字浮点值 字符串(String) 一个简单的字符串值(目前未被使用) 根据使用情况（例如绘图或者显示表达式的输出），这些类型中只有一些是由用户指定的表达式产生的结果而有效的，例如，即时向量表达式是可以绘图的唯一类型。 字符串字符串可以用单引号、双引号或者反引号表示 PromQL遵循与Go相同的转义规则。在单引号，双引号中，反斜杠成为了转义字符，后面可以跟着a, b, f, n, r, t, v或者\。 可以使用八进制(\nnn)或者十六进制(\xnn, \unnnn和\Unnnnnnnn)提供特定字符。 在反引号内不处理转义字符。与Go不同，Prom不会丢弃反引号中的换行符。例如： 123&quot;this is a string&quot;&apos;these are unescaped: \n \\ \t&apos;`these are not unescaped: \n &apos; &quot; \t` 浮点数标量浮点值可以直接写成形式-[.(digits)]。 1-2.43 时间序列选择器即时向量选择器瞬时向量选择器可以对一组时间序列数据进行筛选，并给出结果中的每个结果键值对（时间戳-样本值）: 最简单的形式是，只有一个度量名称被指定。在一个瞬时向量中这个结果包含有这个度量指标名称的所有样本数据键值对。 下面这个例子选择所有时间序列度量名称为http_requests_total的样本数据： http_requests_total 通过在度量指标后面增加{}一组标签可以进一步地过滤这些时间序列数据。 下面这个例子选择了度量指标名称为http_requests_total，且一组标签为job=prometheus, group=canary: http_requests_total{job=”prometheus”,group=”canary”} 可以采用不匹配的标签值也是可以的，或者用正则表达式不匹配标签。标签匹配操作如下所示： =: 精确地匹配标签给定的值 !=: 不等于给定的标签值 =~: 正则表达匹配给定的标签值 !=: 给定的标签值不符合正则表达式 例如：度量指标名称为http_requests_total，正则表达式匹配标签environment为staging, testing, development的值，且http请求方法不等于GET。 http_requests_total{environment=~”staging|testing|development”, method!=”GET”} 匹配空标签值的标签匹配器也可以选择没有设置任何标签的所有时间序列数据。正则表达式完全匹配。 向量选择器必须指定一个度量指标名称或者至少不能为空字符串的标签值。以下表达式是非法的: {job=~”.*”} #Bad! 上面这个例子既没有度量指标名称，标签选择器也可以正则匹配空标签值，所以不符合向量选择器的条件 相反地，下面这些表达式是有效的，第一个一定有一个字符。第二个有一个有用的标签method {job=~”.+”} # Good!{job=~”.*”, method=”get”} # Good! 标签匹配器能够被应用到度量指标名称，使用__name__标签筛选度量指标名称。例如：表达式http_requests_total等价于{__name__=&quot;http_requests_total&quot;}。 其他的匹配器，如：= ( !=, =~, !~)都可以使用。下面的表达式选择了度量指标名称以job:开头的时间序列数据： {name=~”^job:.*”} # 范围向量选择器范围向量类似瞬时向量, 不同在于，它们从当前实例选择样本范围区间。在语法上，时间长度被追加在向量选择器尾部的方括号[]中，用以指定对于每个样本范围区间中的每个元素应该抓取的时间范围样本区间。 时间长度有一个数值决定，后面可以跟下面的单位： s - seconds m - minutes h - hours d - days w - weeks y - years 在下面这个例子中, 选择过去5分钟内，度量指标名称为http_requests_total， 标签为job=&quot;prometheus&quot;的时间序列数据: http_requests_total{job=”prometheus”}[5m] 偏移修饰符这个offset偏移修饰符允许在查询中改变单个瞬时向量和范围向量中的时间偏移 例如，下面的表达式返回相对于当前时间的前5分钟时的时刻, 度量指标名称为http_requests_total的时间序列数据： http_requests_total offset 5m 注意：offset偏移修饰符必须直接跟在选择器后面，例如： sum(http_requests_total{method=”GET”} offset 5m) // GOOD. 然而，下面这种情况是不正确的 sum(http_requests_total{method=”GET”}) offset 5m // INVALID. offset偏移修饰符在范围向量上和瞬时向量用法一样的。下面这个返回了相对于当前时间的前一周时，过去5分钟的度量指标名称为http_requests_total的速率： rate(http_requests_total[5m] offset 1w) 参考链接 https://prometheus.io/docs/prometheus/latest/querying/functions/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress自动化https]]></title>
    <url>%2Fposts%2Fp99mnb44.html</url>
    <content type="text"><![CDATA[说明如果用cfssl或者openssl之类的工具手动生成TLS证书，这样就可以轻松搞定站点的https访问了。理想是很美好，但实际操作时却很痛苦，主要有以下几点缺陷： 如果k8s集群上部署的应用较多，要为每个应用的不同域名生成https证书，操作太麻烦。 上述这些手动操作没有跟k8s的deployment描述文件放在一起记录下来，很容易遗忘。 证书过期后，又得手动执行命令重新生成证书。 证书管理器cert-manager的架构 上面是官方给出的架构图，可以看到cert-manager在k8s中定义了两个自定义类型资源：Issuer和Certificate。 其中Issuer代表的是证书颁发者，可以定义各种提供者的证书颁发者，当前支持基于Letsencrypt、vault和CA的证书颁发者，还可以定义不同环境下的证书颁发者。 而Certificate代表的是生成证书的请求，一般其中存入生成证书的元信息，如域名等等。 一旦在k8s中定义了上述两类资源，部署的cert-manager则会根据Issuer和Certificate生成TLS证书，并将证书保存进k8s的Secret资源中，然后在Ingress资源中就可以引用到这些生成的Secret资源。对于已经生成的证书，还是定期检查证书的有效期，如即将超过有效期，还会自动续期。 部署使用常规清单安装 注意：从cert-manager v0.11.0开始，Kubernetes的最低支持版本是v1.12.0。仍在运行Kubernetes v1.11或更低版本的用户应在安装cert-manager之前升级到受支持的版本。创建一个名称空间以在其中运行cert-manager 创建一个namespace 123456# namespace.yaml ---apiVersion: v1kind: Namespacemetadata: name: cert-manager 安装cert-manager，官方地址为 1kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.13.0/cert-manager.yaml yaml中有三个镜像，分别为 shenshengkun/cert-manager-controller:v0.13.1 shenshengkun/cert-manager-cainjector:v0.13.1 shenshengkun/cert-manager-webhook:v0.13.1 默认是从quay.io获取镜像，如果quay.io的镜像无法获取，改成我上面的镜像库 使用Helm安装部署前需要一些 crd 1kubectl apply --validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/v0.13.0/deploy/manifests/00-crds.yaml 为cert-manager创建名称空间 1kubectl create namespace cert-manager 添加Jetstack Helm存储库。 1helm repo add jetstack https://charts.jetstack.io 更新您的本地Helm存储库缓存 1helm repo update 安装cert-manager Helm v3+ 1234helm install \cert-manager jetstack/cert-manager \--namespace cert-manager \--version v0.13.0 Helm v2 12345helm install \--name cert-manager \--namespace cert-manager \--version v0.13.0 \jetstack/cert-manager 测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: #指定使用test做代理 kubernetes.io/ingress.class: &quot;nginx-backend&quot; nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot; #关联到名为letsencrypt-prod的Issuer cert-manager.io/issuer: &quot;letsencrypt-prod&quot;spec: tls: - hosts: #自定义域名 - test.sy.com secretName: test-tls rules: #自定义域名 - host: test.sy.com http: paths: - backend: #服务名称 serviceName: tomcat-test-opdev #服务端口 servicePort: 6080 path: /---apiVersion: cert-manager.io/v1alpha2kind: Issuermetadata: name: letsencrypt-prod #保持和ingress处于相同的ns namespace: testspec: selfSigned: &#123;&#125;---apiVersion: cert-manager.io/v1alpha2kind: Certificatemetadata: name: test-tls #保持和ingress处于相同的ns namespace: testspec: secretName: test-tls duration: 2160h renewBefore: 360h dnsNames: #自定义域名 - test.sy.com issuerRef: #指定名为letsencrypt-prod的Issuer name: letsencrypt-prod 参考链接 https://cert-manager.io/docs/concepts/certificate/ https://cloud.tencent.com/developer/article/1402451]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s二进制升级从1.14.2至1.16.2]]></title>
    <url>%2Fposts%2Fdo44oodv.html</url>
    <content type="text"><![CDATA[升级前准备master节点组件: kubectl，kube-apiserver，kube-controller-manager，kube-scheduler node节点组件:kube-proxy，kubelet ##暂不升级的组件,需要升级后面再单独升级 数据库组件:etcd 网络组件:flannel 二进制包下载：https://github.com/kubernetes/kubernetes/releases 开始升级升级kubectl备份kubectl，在所有的master节点操作 12345[root@bjxg-sy-test bin]# cd /opt/k8s/bin[root@bjxg-sy-test bin]# mv kubectl kubectl.bak.v1.12[root@bjxg-sy-test opt]# mkdir /opt/k8s.1.16.2-client[root@bjxg-sy-test k8s.1.16.2-client]# cd /opt/k8s.1.16.2-client[root@bjxg-sy-test k8s.1.16.2-client]# tar -zxvf kubernetes-client-linux-amd64.tar.gz 分发kubectl到所有节点 1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kubernetes/client/bin/kubectl root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 查看kubectl版本 1234567[root@bjxg-sy-test k8s.1.16.2-client]# kubectl versionClient Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;16&quot;, GitVersion:&quot;v1.16.2&quot;, GitCommit:&quot;c97fe5036ef3df2967d086711e6c0c405941e14b&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-10-15T19:18:23Z&quot;, GoVersion:&quot;go1.12.10&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;14&quot;, GitVersion:&quot;v1.14.2&quot;, GitCommit:&quot;66049e3b21efe110454d67df4fa62b08ea79a19b&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-05-16T16:14:56Z&quot;, GoVersion:&quot;go1.12.5&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;client版本是kubectl执行文件的版本.server版本是kube-apiserver执行文件的版本. 升级master节点组件在master节点操作，另需要注意一台master节点一台操作，如果是用的keepalived做的vip高可用，需要先让vip漂移；如果是nginx的4层代理，需要先将要升级的master节点摘掉。 123456789101112systemctl stop kube-apiserversystemctl stop kube-schedulersystemctl stop kube-controller-managermv /opt/k8s/bin/kube-apiserver&#123;,.bak.v1.12&#125;mv /opt/k8s/bin/kube-controller-manager&#123;,.bak.v1.12&#125;mv /opt/k8s/bin/kube-scheduler&#123;,.bak.v1.12&#125;mv /opt/k8s/bin/kubeadm&#123;,.bak.v1.12&#125;mkdir /opt/k8s.1.16.2-servercd /opt/k8s.1.16.2-servertar -zxvf kubernetes-server-linux-amd64.tar.gz 复制新版本客户端 12345678source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kubernetes/server/bin/kube-apiserver root@$&#123;node_ip&#125;:/opt/k8s/bin/ scp kubernetes/server/bin/&#123;kube-controller-manager,kube-scheduler,kubeadm&#125; root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 启动服务 kube-apiserver 12345678910[root@bjxg-sy-test k8s.1.16.2-server]# systemctl status kube-apiserver● kube-apiserver.service - Kubernetes API Server Loaded: loaded (/etc/systemd/system/kube-apiserver.service; enabled; vendor preset: disabled) Active: active (running) since Wed 2020-04-15 14:52:14 CST; 39s ago Docs: https://github.com/GoogleCloudPlatform/kubernetes Main PID: 11427 (kube-apiserver) Tasks: 13 Memory: 340.5M CGroup: /system.slice/kube-apiserver.service └─11427 /opt/k8s/bin/kube-apiserver --advertise-address=10.16.16.11 --default-not-ready-tolerati... 看下kubectl version 1234[root@bjxg-sy-test k8s.1.16.2-server]# kubectl versionClient Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;16&quot;, GitVersion:&quot;v1.16.2&quot;, GitCommit:&quot;c97fe5036ef3df2967d086711e6c0c405941e14b&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-10-15T19:18:23Z&quot;, GoVersion:&quot;go1.12.10&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;16&quot;, GitVersion:&quot;v1.16.2&quot;, GitCommit:&quot;c97fe5036ef3df2967d086711e6c0c405941e14b&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-10-15T19:09:08Z&quot;, GoVersion:&quot;go1.12.10&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;[root@bjxg-sy-test k8s.1.16.2-server]# 启动kube-controller-manager和kube-scheduler 1systemctl start kube-controller-manager &amp;&amp; systemctl start kube-scheduler 升级node节点组件在所有node节点执行 12345systemctl stop kubeletsystemctl stop kube-proxymv /opt/k8s/bin/kubelet&#123;,.bak.v1.12&#125;mv /opt/k8s/bin/kube-proxy&#123;,.bak.v1.12&#125; 拷贝二进制文件 1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kubernetes/server/bin/&#123;kubelet,kube-proxy&#125; root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 在kubernetes 1.15版起kubelet需要删除allow-privileged这个参数，因为新版本中这个参数已经过时。我们只需要在kubelet启动脚步中删除即可 123sed -i &apos;/allow-privileged/d&apos; /etc/systemd/system/kubelet.servicesystemctl daemon-reload &amp;&amp; systemctl start kubeletsystemctl start kube-proxy 查看并验证查看node节点 123[root@bjxg-sy-test k8s.1.16.2-server]# kubectl get nodeNAME STATUS ROLES AGE VERSIONbjxg-sy-test Ready &lt;none&gt; 27h v1.16.2 启动一个pod 12345[root@bjxg-sy-test k8s.1.16.2-server]# kubectl create deploy nginx --image=nginxdeployment.apps/nginx created[root@bjxg-sy-test k8s.1.16.2-server]# kubectl get podsNAME READY STATUS RESTARTS AGEnginx-86c57db685-hzsxk 0/1 ContainerCreating 0 5s 至此，k8s集群升级完毕 参考链接 https://blog.51cto.com/goome/2424921 https://i4t.com/4640.html]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s集群curl service的ip延迟响应高]]></title>
    <url>%2Fposts%2F98090la5.html</url>
    <content type="text"><![CDATA[问题描述qq群的小伙伴，在昨天提了个问题，说在master节点上curl service的ip不通，故写下排查问题的过程。 解决过程首先想到的是，master节点安没安装kube-proxy，小伙伴已确认安装，并说curl了一会能通，但是很慢。 查kube-proxy日志 1可以看到报错有timeout情况，应该只是时间过长 通过curl命令观察具体时间1curl -o /dev/null -s -w %&#123;time_namelookup&#125;::%&#123;time_connect&#125;::%&#123;time_starttransfer&#125;::%&#123;time_total&#125;::%&#123;speed_download&#125;&quot;\n&quot; &quot;ip地址&quot; 小伙伴回答超时时间为63s，看到63s我就想到ipvs tcpfin的等待时间默认为2分钟，一般会多等3s，正好达到这个timeout超时的时间。后经过确认，他用的是iptables模式，但是集群已经是k8s1.18的版本了，故换下ipvs试一下。 小伙伴修改iptables模式为ipvs换完ipvs后，发现kube-proxy还有报错。 通过 kube-proxy Pod 的日志可以看到，里面有很多 Error 级别的日志信息，根据关键字 IPVS、parseIP Error 可知，可能是由于 IPVS 模块对 IP 进行格式化导致出现问题。 因为这个问题是升级到 kubernetes 1.18 版本才出现的，所以去 Kubernetes Github 查看相关 issues，发现有人在升级 Kubernetes 版本到 1.18 后，也遇见了相同的问题，经过 issue 中 Kubernetes 维护人员讨论，分析出原因可能为新版 Kubernetes 使用的 IPVS 模块是比较新的，需要系统内核版本支持，小伙伴使用的是 CentOS 系统，内核版本为 3.10，里面的 IPVS 模块比较老旧，缺少新版 Kubernetes IPVS 所需的依赖。 问题解决将iptables模式换为ipvs，并内核升级为4.4以上，问题解决。 参考链接 http://www.mydlq.club/article/78/#wow11 https://blog.csdn.net/ywq935/article/details/84952724]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s集群备份与恢复]]></title>
    <url>%2Fposts%2Fdf00073d.html</url>
    <content type="text"><![CDATA[介绍k8s集群的备份与恢复，主要就是etcd集群的备份与恢复。 ETCD一些基础查询操作查看集群状态123456二进制：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/cert/ca.pem --cert=/etc/etcd/cert/etcd.pem --key=/etc/etcd/cert/etcd-key.pem --endpoints=https://10.16.2.17:2379,https://10.16.2.18:2379,https://10.16.2.19:2379 endpoint health阿里kubeadm：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/etcd-client.pem --key=/etc/kubernetes/pki/etcd/etcd-client-key.pem --endpoints=https://192.168.34.130:2379,https://192.168.34.131:2379,https://192.168.34.132:2379,https://192.168.34.133:2379,https://192.168.34.134:2379 endpoint health 获取某个key信息12345二进制：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/cert/ca.pem --cert=/etc/etcd/cert/etcd.pem --key=/etc/etcd/cert/etcd-key.pem --endpoints=https://10.16.2.17:2379,https://10.16.2.18:2379,https://10.16.2.19:2379 get /registry/apiregistration.k8s.io/apiservices/v1.apps阿里kubeadm：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/etcd-client.pem --key=/etc/kubernetes/pki/etcd/etcd-client-key.pem --endpoints=https://192.168.34.130:2379,https://192.168.34.131:2379,https://192.168.34.132:2379,https://192.168.34.133:2379,https://192.168.34.134:2379 get /registry/apiregistration.k8s.io/apiservices/v1.apps 获取etcd版本信息12345二进制：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/cert/ca.pem --cert=/etc/etcd/cert/etcd.pem --key=/etc/etcd/cert/etcd-key.pem --endpoints=https://10.16.2.17:2379,https://10.16.2.18:2379,https://10.16.2.19:2379 version阿里kubeadm：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/etcd-client.pem --key=/etc/kubernetes/pki/etcd/etcd-client-key.pem --endpoints=https://192.168.34.130:2379,https://192.168.34.131:2379,https://192.168.34.132:2379,https://192.168.34.133:2379,https://192.168.34.134:2379 version 获取etcd所有key12345二进制：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/cert/ca.pem --cert=/etc/etcd/cert/etcd.pem --key=/etc/etcd/cert/etcd-key.pem --endpoints=https://10.16.2.17:2379,https://10.16.2.18:2379,https://10.16.2.19:2379 get / --prefix --keys-only阿里kubeadm：ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/etcd-client.pem --key=/etc/kubernetes/pki/etcd/etcd-client-key.pem --endpoints=https://192.168.34.130:2379,https://192.168.34.131:2379,https://192.168.34.132:2379,https://192.168.34.133:2379,https://192.168.34.134:2379 get / --prefix --keys-only 备份 本文备份使用 napshot save , 每次备份一个节点就行。 12二进制举例ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/cert/ca.pem --cert=/etc/etcd/cert/etcd.pem --key=/etc/etcd/cert/etcd-key.pem --endpoints=https://10.16.2.17:2379 snapshot save /data/etcd_backup_dir/etcd-snapshot-`date +%Y%m%d`.db 恢复 停止kube-apiserver 服务，确保apiserver 服务已经停止运行 12345systemctl stop kube-apiserver#确认 kube-apiserver 服务是否停止ps -ef | grep kube-apiserver 停止集群中所有 ETCD 服务 1systemctl stop etcd 移除 ETCD 数据 12mv /data/k8s/etcd/data /data/k8s/etcd/data.bak mv /data/k8s/etcd/wal /data/k8s/etcd/wal.bak 拷贝 ETCD 备份快照 12scp /var/lib/etcd_backup/etcd-snapshot-20200414.db root@master2:/data/etcd_backup_dir/scp /var/lib/etcd_backup/etcd-snapshot-20200414.db root@master3:/data/etcd_backup_dir/ 所有master上按照各自etcd的启动文件，恢复。 123456ETCDCTL_API=3 etcdctl snapshot restore /data/etcd_backup_dir/etcd-snapshot-20200414.db \ --name bjxg-sy-test \ --initial-cluster &quot;bjxg-sy-test=https://10.16.2.17:2380&quot; \ --initial-cluster-token etcd-cluster-0 \ --initial-advertise-peer-urls https://10.16.2.17:2380 \ --data-dir=/data/k8s/etcd/data --wal-dir=/data/k8s/etcd/wal 查恢复的name，cluster-token等 12345678910111213[root@etcd_backup_dir]# systemctl status etcd● etcd.service - Etcd Server Loaded: loaded (/etc/systemd/system/etcd.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2020-04-14 11:44:42 CST; 2h 38min ago Docs: https://github.com/coreos Main PID: 25729 (etcd) Tasks: 15 Memory: 55.6M CGroup: /system.slice/etcd.service └─25729 /opt/k8s/bin/etcd --data-dir=/data/k8s/etcd/data --wal-dir=/data/k8s/etcd/wal ........ 从 /etc/systemd/system/etcd.service文件里面读取信息 启动etcd，kube-apiserver 12systemctl start etcdsystemctl start kube-apiserver 总结 Kubernetes 集群备份主要是备份 ETCD 集群。而恢复时，主要考虑恢复整个顺序： 1停止kube-apiserver --&gt; 停止ETCD --&gt; 恢复数据 --&gt; 启动ETCD --&gt; 启动kube-apiserver 参考链接1https://www.jianshu.com/p/8b483ed49f26]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s查看当前nodeport的端口]]></title>
    <url>%2Fposts%2Fkan99fgh.html</url>
    <content type="text"><![CDATA[从老架构迁移到k8s的过程中，域名不能直接迁到ingress里面，涉及的东西比较多，所以需要开nodeport暴露，但是向外暴露都选择nodeport，没有统一导致nodeport range分散开。故现在需要查看下端口，避免和其他冲突被占用 1234567891011121314151617[root@master-k8s-001 ~]# netstat -nlpt | grep -Po &apos;:::\K\d+(?=.+kube-proxy)&apos; | sort -rn | xargs -n832753 32745 32662 32654 32647 32645 32624 3261032608 32593 32551 32517 32514 32505 32498 3246632458 32449 32386 32385 32380 32326 32312 3229832283 32190 32148 32090 32083 32082 32052 3201131997 31996 31910 31890 31888 31884 31822 3178431770 31726 31692 31656 31620 31582 31554 3153431455 31447 31432 31413 31358 31347 31343 3132531317 31302 31289 31246 31244 31226 31222 3121531195 31156 31119 31110 31089 31065 31063 3103730977 30950 30933 30910 30862 30824 30810 3079630776 30729 30727 30726 30706 30697 30691 3068330557 30532 30511 30510 30464 30410 30403 3038530379 30368 30355 30326 30285 30253 30246 3024530200 30173 30150 30144 30143 30128 30112 3011130110 30106 30080 30073 30052 30015 30013 3000530004 30003 10256]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[istio的gateway通过文件挂载配置https]]></title>
    <url>%2Fposts%2Fo40kkb1h.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please add wechat to get password. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[istio金丝雀发布]]></title>
    <url>%2Fposts%2Fod0n31hf.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please add wechat to get password. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[安装生产环境istio1.5.1]]></title>
    <url>%2Fposts%2F5dkkvvh5.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please add wechat to get password. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx高级金丝雀发布]]></title>
    <url>%2Fposts%2Fpplc77mv.html</url>
    <content type="text"><![CDATA[说明在上篇文章，只简单介绍了一些ingress开源默认支持的Annotation。 https://shenshengkun.github.io/posts/p444cbmv.html 下面我来说下怎么实现一个header不同值。 开源ingress实现通过修改nginx.ingress.kubernetes.io/configuration-snippet配置，并且配置正则实现： 使用$http_ 获取http请求的header，根据配置中是否为完整或者正则匹配，匹配foo的值 使用$cookie_获取http请求的cookie，根据配置中是否为完整或者正则匹配，匹配foo的值 使用$arg_获取http的请求参数，根据配置中是否为完整或者正则匹配，匹配foo的值 例子123456789101112131415161718192021222324252627apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx-backend&quot; nginx.ingress.kubernetes.io/enable-access-log: &quot;true&quot; nginx.ingress.kubernetes.io/configuration-snippet: | access_log /var/log/nginx/test.sy.com.log; if ($http_name ~ &quot;^.*sy$|^.*aa$&quot;) &#123; proxy_pass http://tomcat-test-scm.test:6080; break; &#125;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test-opdev servicePort: 6080 - path: / backend: serviceName: tomcat-test-scm servicePort: 6080 效果12345678[root@ingress]# curl http://test.sy.com/abc/check_health.jsp opdev[root@ingress]# curl -H &quot;name: sy&quot; http://test.sy.com/abc/check_health.jspscm[root@ingress]# curl -H &quot;name: aa&quot; http://test.sy.com/abc/check_health.jspscm[root@ingress]# curl -H &quot;name: bb&quot; http://test.sy.com/abc/check_health.jsp opdev 可以看到header为name值为sy或者aa的可以转发到灰度版本。 阿里开源ingress实现路由规则nginx.ingress.kubernetes.io/service-match 该Annotation用来配置新版本服务的路由匹配规则，格式如下： 12nginx.ingress.kubernetes.io/service-match: | &lt;service-name&gt;: &lt;match-rule&gt; 参数解释 service-name：服务名称，满足match-rule的请求会被路由到该服务中。 match-rule：路由匹配规则。 配置示例 1234567891011# 请求头中满足foo正则匹配^bar$的请求被转发到新版本服务new-nginx中new-nginx: header(&quot;foo&quot;, /^bar$/)# 请求头中满足foo完整匹配bar的请求被转发到新版本服务new-nginx中new-nginx: header(&quot;foo&quot;, &quot;bar&quot;)# cookie中满足foo正则匹配^sticky-.+$的请求被转发到新版本服务new-nginx中new-nginx: cookie(&quot;foo&quot;, /^sticky-.+$/)# query param中满足foo完整匹配bar的请求被转发到新版本服务new-nginx中new-nginx: query(&quot;foo&quot;, &quot;bar&quot;) 服务权重nginx.ingress.kubernetes.io/service-weight 该Annotation用来配置新老版本服务的流量权重，格式如下： 12nginx.ingress.kubernetes.io/service-weight: | &lt;new-svc-name&gt;:&lt;new-svc-weight&gt;, &lt;old-svc-name&gt;:&lt;old-svc-weight&gt; 参数解释 new-svc-name：新版本服务名称。 new-svc-weight：新版本服务权重。 old-svc-name：老版本服务名称。 old-svc-weight：老版本服务权重。 配置示例 12nginx.ingress.kubernetes.io/service-weight: | new-nginx: 20, old-nginx: 60 说明 服务权重采用相对值计算方式。如配置示例中的新版服务权重设置为20，旧版服务权重设置为60，则：新版服务的权重百分比为25%，旧版服务的权重百分比为75%。 一个服务组（同一个Ingress yaml中具有相同Host和Path的服务）中未明确设置权重的服务默认权重值为100。 例子123456789101112131415161718192021222324252627apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx-backend&quot; nginx.ingress.kubernetes.io/service-match: | tomcat-test-scm: header(&quot;name&quot;, /^sy$|^aa$/) #nginx.ingress.kubernetes.io/service-weight: | # tomcat-test-opdev: 80, tomcat-test-scm: 20 nginx.ingress.kubernetes.io/enable-access-log: &quot;true&quot; nginx.ingress.kubernetes.io/configuration-snippet: | access_log /var/log/nginx/test.sy.com.log;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test-opdev servicePort: 6080 - path: / backend: serviceName: tomcat-test-scm servicePort: 6080 效果123456[rsync@ingress]$ curl test.sy.com/abc/check_health.jsp opdev[rsync@ingress]$ curl -H &quot;name: sy&quot; test.sy.com/abc/check_health.jspscm[rsync@ingress]$ curl -H &quot;name: aa&quot; test.sy.com/abc/check_health.jsp scm 参考链接 https://help.aliyun.com/document_detail/128499.html?spm=a2c4g.11186623.6.793.7de864e3cABNYa]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx金丝雀发布]]></title>
    <url>%2Fposts%2Fp444cbmv.html</url>
    <content type="text"><![CDATA[说明下面使用的 ingress-nginx 的版本是 0.26.1。 nginx-ingress作为K8S集群对外的流量入口，充当K8S集群内各个service的反向代理。日常工作中我们经常需要对服务进行版本更新升级，为此我们经常使用到的发布方式有滚动升级、分批暂停发布、蓝绿发布以及灰度发布等不同的发布操作。所以下面介绍下，通过配置nginx annotations来实现灰度发布。 ingress-nginx金丝雀原有的 ingress 不需要改变12345678910111213141516171819apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx-backend&quot; nginx.ingress.kubernetes.io/enable-access-log: &quot;true&quot; nginx.ingress.kubernetes.io/configuration-snippet: | access_log /var/log/nginx/test.sy.com.log;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test-opdev servicePort: 6080 创建 canary nginx.ingress.kubernetes.io/canary “true” or “false” nginx.ingress.kubernetes.io/canary-by-header string nginx.ingress.kubernetes.io/canary-by-header-value string nginx.ingress.kubernetes.io/canary-by-header-pattern string nginx.ingress.kubernetes.io/canary-by-cookie string nginx.ingress.kubernetes.io/canary-weight number 1234567891011121314151617181920212223apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test-canary namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx-backend&quot; nginx.ingress.kubernetes.io/canary: &quot;true&quot; #nginx.ingress.kubernetes.io/canary-weight: &quot;100&quot; nginx.ingress.kubernetes.io/canary-by-header: &quot;name&quot; nginx.ingress.kubernetes.io/canary-by-header-value: &quot;sy&quot; nginx.ingress.kubernetes.io/enable-access-log: &quot;true&quot; nginx.ingress.kubernetes.io/configuration-snippet: | access_log /var/log/nginx/test.sy.com.log;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test-scm servicePort: 6080 效果1234[root@ingress]# curl http://test.sy.com/abc/check_health.jspopdev[root@ingress]# curl -H &quot;name: sy&quot; http://test.sy.com/abc/check_health.jspscm 上面的规则按优先顺序进行评估。优先顺序如下：canary-by-header -&gt; canary-by-cookie -&gt; canary-weight 注意： 当将入口标记为canary时，除了nginx.ingress.kubernetes.io/load-balance和之外，所有其他非canary注释都将被忽略（从相应的主入口继承）nginx.ingress.kubernetes.io/upstream-hash-by 已知的限制 目前，每个Ingress规则最多可以应用一个canary入口。 参考链接 https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx多实例类型]]></title>
    <url>%2Fposts%2Fpa0mc8bm.html</url>
    <content type="text"><![CDATA[背景在生产环境中，都需要将nginx分不同类型，比方说内网与外网等等，下面我来介绍下怎么区分类型。 方案此段主要是允许访问一个叫ingress-controller-leader-nginx-backend-nginx-backend的configmap（通过RoleBinding绑定从而限制针对某一个命名空间中定义的一个ConfigMap实例的访问） 12345678910111213- apiGroups: - &quot;&quot; resources: - configmaps resourceNames: # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot; # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot; # This has to be adapted if you change either parameter # when launching the nginx-ingress-controller. - &quot;ingress-controller-leader-nginx-backend-nginx-backend&quot; verbs: - get - update 在如下args段中我们新增了几个参数： --ingress-class=nginx-backend 当设置这个参数后只会Watch Ingress class为nginx-backend的 --election-id=ingress-controller-leader-nginx-backend 用于Ingress状态更新的选举ID。（默认ingress-controller-leader） --report-node-internal-ip-address 默认情况下是–publish-service但是在裸机部署的时候要使用kubectl get ingress无法显示ADDRESS，所以我们需要使用–report-node-internal-ip-address参数 删除： --publish-service=$(POD_NAMESPACE)/ingress-nginx 非公有云情况下使用kubectl get ingress无法显示ADDRESS 1234567891011121314151617containers: - name: nginx-ingress-controller image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services #- --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io # 设置controller日志的输出路径和方式 - --log_dir=/var/log/nginx/ - --logtostderr=false - --v=2 - --report-node-internal-ip-address - --ingress-class=nginx-backend - --election-id=ingress-controller-leader-nginx-backend 做完这些，如果想实现完全隔离开，需要新建不同的ns，包括clusterrole等需要改下name。不清楚的可以联系我怎么改。 参考链接 https://www.dazhuanlan.com/2019/11/08/5dc4f89f46ca1/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx持久化日志]]></title>
    <url>%2Fposts%2Fp00mc8vd.html</url>
    <content type="text"><![CDATA[介绍nginx-ingress-controller的日志包括三个部分： controller日志： 输出到stdout，通过启动参数中的–log_dir可已配置输出到文件，重定向到文件后会自动轮转，但不会自动清理 accesslog：输出到stdout，通过nginx-configuration中的字段可以配置输出到哪个文件。输出到文件后不会自动轮转或清理 errorlog：输出到stderr，配置方式与accesslog类似。 落盘在ingress nginx所在的节点，创建落盘日志目录，并赋予权限 12mkdir -pv /var/lib/docker/nginxlogs/ingresschown -R 33:33 ingress 将controler日志输出到文件 12345678910args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io # 设置controller日志的输出路径和方式 - --log_dir=/var/log/nginx/ - --logtostderr=false 修改configmap设置access日志，error日志，以及logformat格式 12345worker-processes: &quot;4&quot;use-forwarded-headers: &quot;true&quot;log-format-upstream: &quot;[$host] [$remote_addr] [$http_x_forwarded_for] [$remote_user] [$time_local] [$request] [$status] [$body_bytes_sent] [$request_time] [$upstream_addr] [$upstream_response_time] [$connection] [$connection_requests] [$msec] [$uri] [$body_bytes_sent] [$http_referer] [$http_user_agent] [$request_length] [$http_session_id]&quot;access-log-path: &quot;/var/log/nginx/access.log&quot;error-log-path: &quot;/var/log/nginx/error.log&quot; 挂载日志 12345678910111213 volumeMounts: - mountPath: /etc/localtime name: localtime readOnly: true - mountPath: /var/log/nginx name: app-logvolumes: - name: localtime hostPath: path: /etc/localtime - name: app-log hostPath: path: &quot;/var/lib/docker/nginxlogs/ingress&quot; 效果 12345678910[root@ingress]# lltotal 12-rw-r--r-- 1 33 tape 0 March 23 09:25 access.log-rw-r--r-- 1 33 tape 0 March 23 09:25 error.log-rw-r--r-- 1 33 tape 265 March 23 09:25 nginx-ingress-controller.k8s-node-13.www-data.log.ERROR.20200423-092512.6-rw-r--r-- 1 33 tape 2996 March 23 09:25 nginx-ingress-controller.k8s-node-13.www-data.log.INFO.20200423-092510.6-rw-r--r-- 1 33 tape 543 March 23 09:25 nginx-ingress-controller.k8s-node-13.www-data.log.WARNING.20200423-092510.6lrwxrwxrwx 1 33 tape 82 March 23 09:25 nginx-ingress-controller.ERROR -&gt; nginx-ingress-controller.k8s-node-13.www-data.log.ERROR.20200323-092512.6lrwxrwxrwx 1 33 tape 81 March 23 09:25 nginx-ingress-controller.INFO -&gt; nginx-ingress-controller.k8s-node-13.www-data.log.INFO.20200323-092510.6lrwxrwxrwx 1 33 tape 84 March 23 09:25 nginx-ingress-controller.WARNING -&gt; nginx-ingress-controller.k8s-node-13.www-data.log.WARNING.20200323-092510.6 带域名的访问日志没有找到全局通过变量日志自动带域名的方式， 有知道的小伙伴可以联系我 12345678910111213141516171819apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx&quot; nginx.ingress.kubernetes.io/enable-access-log: &quot;true&quot; nginx.ingress.kubernetes.io/configuration-snippet: | access_log /var/log/nginx/test.sy.com.log;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test servicePort: 6080 12[root@ingress]# tail -f test.sy.com.log 10.16.8.15 - - [23/March/2020:09:33:44 +0800] &quot;GET /abc/check_health.jsp HTTP/1.1&quot; 200 16 &quot;-&quot; &quot;curl/7.29.0&quot; 参考链接 https://blog.whysdomain.com/blog/228/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx请求改写]]></title>
    <url>%2Fposts%2Fpllcr88d.html</url>
    <content type="text"><![CDATA[Ingress-nginx 的 uri 改写功能对于 ingress-nginx 来说配置请求麻烦一点，一些复杂的需求需要通过 Ingress 的 annotation 来实现，比如我们需要实现一个 url rewrite 的功能。 URL 路径做一个 Rewrite， 在 ingress-nginx 官方文档中也给出了说明: 配置目标应用的 ingress 创建一个 ingress，path 匹配规则为 /abb(/|$)(.*)，rewrite-target 中可以使用 path 中的正则匹配 12345678910111213141516171819202122apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx&quot; nginx.ingress.kubernetes.io/ssl-redirect: &apos;true&apos; nginx.ingress.kubernetes.io/rewrite-target: /$2spec: rules: - host: test.sy.com http: paths: - path: /abb(/|$)(.*) backend: serviceName: tomcat-test servicePort: 6080 tls: - hosts: - test.sy.com secretName: tls-secret 需要注意 rewrite-target 对 ingress 中的所有 path 有效。 效果12345678910[root@ingress]# curl --cacert ca.crt https://test.sy.com/abc/check_health.jsp&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;openresty/1.15.8.1&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;[root@ingress]# curl --cacert ca.crt https://test.sy.com/abb/abc/check_health.jsphello 2020-03-19 如果要是代理外部url怎么办呢，这边先导入下service和endpoints 外部服务导入到 kubernetes 中创建一个service 12345678910[root@ingress]# cat service.yaml kind: ServiceapiVersion: v1metadata: name: tengine-nginxspec: type: ClusterIP ports: - port: 8000 targetPort: 8000 创建一个 与 Service 同名的 endpoint 123456789kind: EndpointsapiVersion: v1metadata: name: tengine-nginxsubsets: - addresses: - ip: 10.48.22.145 ports: - port: 8000 创建ingress 12345678910111213apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tengine-nginxspec: rules: - host: test.sy.com http: paths: - backend: serviceName: tengine-nginx servicePort: 8000 path: / 访问： 假设前面我们再加上一个跳转，让他默认跳转到10.48.22.145， 们可以通过 configuration-snippet 配置来完成，如下 Ingress 对象： 12345678910111213141516171819apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tengine-nginx annotations: kubernetes.io/ingress.class: &quot;nginx&quot; nginx.ingress.kubernetes.io/app-root: /10.48.22.145 nginx.ingress.kubernetes.io/rewrite-target: /$2 nginx.ingress.kubernetes.io/configuration-snippet: | rewrite ^(/10.48.22.145)$ $1/ redirect;spec: rules: - host: test.sy.com http: paths: - backend: serviceName: tengine-nginx servicePort: 8000 path: /10.48.22.145(/|$)(.*) 访问效果： 参考链接 https://kubernetes.github.io/ingress-nginx/examples/rewrite/ https://kubernetes.github.io/ingress-nginx/examples/auth/basic/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress-nginx传输加密与认证]]></title>
    <url>%2Fposts%2F0jbn9crd.html</url>
    <content type="text"><![CDATA[ingress-nginx 设置 https 证书准备证书1234openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 3560 -nodes -subj &apos;/CN=My Cert Authority&apos;openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj &apos;/CN=test.sy.com&apos;openssl x509 -req -sha256 -days 3650 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt 上面的 CN= 是目标服务要使用的域名。 将 server 证书上传到 kubernetes1kubectl create secret generic tls-secret --from-file=tls.crt=server.crt --from-file=tls.key=server.key -n test 配置 ingress ingress 中的 host 一定要与证书的 CN 相同，在 tls 配置中引用前面创建的 secret： 123456789101112131415161718192021apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx&quot; nginx.ingress.kubernetes.io/ssl-redirect: &apos;true&apos;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test servicePort: 6080 tls: - hosts: - test.sy.com secretName: tls-secret 访问12[root@ingress]# curl --cacert ca.crt https://test.sy.com/abc/check_health.jsp hello 2020-03-19 认证创建用户，设置密码 创建 basic-auth 用户 foo，密码 123456，将用户信息提交到 kubernetes： 12htpasswd -c auth fookubectl -n test create secret generic basic-auth --from-file=auth 设置 ingress123456789101112131415161718192021apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: # type of authentication nginx.ingress.kubernetes.io/auth-type: basic # name of the secret that contains the user/password definitions nginx.ingress.kubernetes.io/auth-secret: basic-auth # message to display with an appropriate context why the authentication is required nginx.ingress.kubernetes.io/auth-realm: &apos;Authentication Required - foo&apos;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test servicePort: 6080 访问不加认证 12345678[root@ingress]# curl http://test.sy.com/abc/check_health.jsp&lt;html&gt;&lt;head&gt;&lt;title&gt;401 Authorization Required&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;401 Authorization Required&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;openresty/1.15.8.1&lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 加认证 12[root@ingress]# curl http://test.sy.com/abc/check_health.jsp -u &apos;foo:123456&apos;hello 2020-03-19 加https的认证 123456789101112131415161718192021222324252627apiVersion: extensions/v1beta1kind: Ingressmetadata: name: tomcat-test namespace: test annotations: kubernetes.io/ingress.class: &quot;nginx&quot; nginx.ingress.kubernetes.io/ssl-redirect: &apos;true&apos; # type of authentication nginx.ingress.kubernetes.io/auth-type: basic # name of the secret that contains the user/password definitions nginx.ingress.kubernetes.io/auth-secret: basic-auth # message to display with an appropriate context why the authentication is required nginx.ingress.kubernetes.io/auth-realm: &apos;Authentication Required - foo&apos;spec: rules: - host: test.sy.com http: paths: - path: / backend: serviceName: tomcat-test servicePort: 6080 tls: - hosts: - test.sy.com secretName: tls-secret 12[root@ingress]# curl --cacert ca.crt -u &apos;foo:123456&apos; https://test.sy.com/abc/check_health.jsphello 2020-03-19 参考链接 https://kubernetes.github.io/ingress-nginx/user-guide/tls/ https://kubernetes.github.io/ingress-nginx/examples/auth/basic/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ingress高可用]]></title>
    <url>%2Fposts%2F0pv19ccd.html</url>
    <content type="text"><![CDATA[介绍Ingress由两部分组成：Ingress Controller 和 Ingress 服务。 ​ Ingress Contronler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，再写到 Nginx-ingress-control的 Pod 里，这个 Ingress Contronler 的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后 reload 一下 使用配置生效。以此来达到域名分配置及动态更新的问题。 Ingress Controller如下： Ingress NGINX: Kubernetes 官方维护的方案,也是本次安装使用的 Controller。 F5 BIG-IP Controller: F5 所开发的 Controller,它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备。 Ingress Kong: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller。 Traefik: 是一套开源的 HTTP 反向代理与负载均衡器,而它也支援了 Ingress。 Voyager: 一套以 HAProxy 为底的 Ingress Controller。 部署部署一个nodeport的，方便访问 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291apiVersion: v1kind: Namespacemetadata: name: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: nginx-configuration namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: tcp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: udp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: v1kind: ServiceAccountmetadata: name: nginx-ingress-serviceaccount namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: nginx-ingress-clusterrole labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - endpoints - nodes - pods - secrets verbs: - list - watch - apiGroups: - &quot;&quot; resources: - nodes verbs: - get - apiGroups: - &quot;&quot; resources: - services verbs: - get - list - watch - apiGroups: - &quot;&quot; resources: - events verbs: - create - patch - apiGroups: - &quot;extensions&quot; - &quot;networking.k8s.io&quot; resources: - ingresses verbs: - get - list - watch - apiGroups: - &quot;extensions&quot; - &quot;networking.k8s.io&quot; resources: - ingresses/status verbs: - update---apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata: name: nginx-ingress-role namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - pods - secrets - namespaces verbs: - get - apiGroups: - &quot;&quot; resources: - configmaps resourceNames: # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot; # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot; # This has to be adapted if you change either parameter # when launching the nginx-ingress-controller. - &quot;ingress-controller-leader-nginx&quot; verbs: - get - update - apiGroups: - &quot;&quot; resources: - configmaps verbs: - create - apiGroups: - &quot;&quot; resources: - endpoints verbs: - get---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata: name: nginx-ingress-role-nisa-binding namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: nginx-ingress-rolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: nginx-ingress-clusterrole-nisa-binding labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: nginx-ingress-clusterrolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: &quot;10254&quot; prometheus.io/scrape: &quot;true&quot; spec: serviceAccountName: nginx-ingress-serviceaccount containers: - name: nginx-ingress-controller image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.25.1 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: allowPrivilegeEscalation: true capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 - name: https containerPort: 443 livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10---apiVersion: v1kind: Servicemetadata: name: ingress-nginx namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: type: NodePort ports: - name: http port: 80 targetPort: 80 protocol: TCP - name: https port: 443 targetPort: 443 protocol: TCP selector: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx--- Ingress Contronler 高可用12345671、type为`LoadBalancer`的时候只有云厂商支持分配公网ip来负载均衡,LoadBalancer 公开的每项服务都将获得自己的 IP 地址,但是需要收费,自己建立集群想使用它的话得部署metaLB。2、不创建svc,pod直接用hostport,效率等同于`hostNetwork`,如果不代理四层端口还好,代理了的话每增加一个四成端口都需要修改pod的template来滚动更新来让nginx bind的四层端口能映射到宿主机上3、`Nodeport`,端口不是web端口(但是可以修改Nodeport的范围改成web端口),如果进来流量负载到Nodeport上可能某个流量路线到某个node上的时候因为`Ingress Controller`的pod不在这个node上,会走这个node的kube-proxy转发到Ingress Controller的pod上,多走一趟路4、不创建svc,效率最高,也能四层负载的时候不修改pod的template,唯一要注意的是`hostNetwork: true`下pod会继承宿主机的网络协议,也就是使用了主机的dns,会导致svc的请求直接走宿主机的上到公网的dns服务器而非集群里的dns server,需要设置pod的`dnsPolicy: ClusterFirstWithHostNet`即可解决 高可用选择第四种，采用deploy设置replicas数量 + nodeSeletor + pod互斥，我们的例子只部署了单节点，生产上的话还需前面加上F5或者vip。 部署文件apiVersion: v1kind: Namespacemetadata: name: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: nginx-configuration namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: tcp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---kind: ConfigMapapiVersion: v1metadata: name: udp-services namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: v1kind: ServiceAccountmetadata: name: nginx-ingress-serviceaccount namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: nginx-ingress-clusterrole labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - endpoints - nodes - pods - secrets verbs: - list - watch - apiGroups: - &quot;&quot; resources: - nodes verbs: - get - apiGroups: - &quot;&quot; resources: - services verbs: - get - list - watch - apiGroups: - &quot;&quot; resources: - events verbs: - create - patch - apiGroups: - &quot;extensions&quot; - &quot;networking.k8s.io&quot; resources: - ingresses verbs: - get - list - watch - apiGroups: - &quot;extensions&quot; - &quot;networking.k8s.io&quot; resources: - ingresses/status verbs: - update---apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata: name: nginx-ingress-role namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxrules: - apiGroups: - &quot;&quot; resources: - configmaps - pods - secrets - namespaces verbs: - get - apiGroups: - &quot;&quot; resources: - configmaps resourceNames: # Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot; # Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot; # This has to be adapted if you change either parameter # when launching the nginx-ingress-controller. - &quot;ingress-controller-leader-nginx&quot; verbs: - get - update - apiGroups: - &quot;&quot; resources: - configmaps verbs: - create - apiGroups: - &quot;&quot; resources: - endpoints verbs: - get---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata: name: nginx-ingress-role-nisa-binding namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: nginx-ingress-rolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: nginx-ingress-clusterrole-nisa-binding labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: nginx-ingress-clusterrolesubjects: - kind: ServiceAccount name: nginx-ingress-serviceaccount namespace: ingress-nginx---apiVersion: apps/v1kind: Deploymentmetadata: name: nginx-ingress-controller namespace: ingress-nginx labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginxspec: replicas: 1 selector: matchLabels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx template: metadata: labels: app.kubernetes.io/name: ingress-nginx app.kubernetes.io/part-of: ingress-nginx annotations: prometheus.io/port: &quot;10254&quot; prometheus.io/scrape: &quot;true&quot; spec: serviceAccountName: nginx-ingress-serviceaccount hostNetwork: true dnsPolicy: ClusterFirstWithHostNet nodeSelector: node: sy containers: - name: nginx-ingress-controller image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.25.1 args: - /nginx-ingress-controller - --configmap=$(POD_NAMESPACE)/nginx-configuration - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services - --udp-services-configmap=$(POD_NAMESPACE)/udp-services - --publish-service=$(POD_NAMESPACE)/ingress-nginx - --annotations-prefix=nginx.ingress.kubernetes.io securityContext: allowPrivilegeEscalation: true capabilities: drop: - ALL add: - NET_BIND_SERVICE # www-data -&gt; 33 runAsUser: 33 env: - name: POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace ports: - name: http containerPort: 80 - name: https containerPort: 443 livenessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP initialDelaySeconds: 10 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 readinessProbe: failureThreshold: 3 httpGet: path: /healthz port: 10254 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 10 参考链接123https://blog.51cto.com/hequan/2432608 https://zhangguanzhang.github.io/2018/10/06/IngressController/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s实现最简单灰度发布]]></title>
    <url>%2Fposts%2F2okndcf5.html</url>
    <content type="text"><![CDATA[灰度发布又名金丝雀部署，是让部分用户访问到新版本应用，在 Kubernetes 中，可以使用两个具有相同 Pod 标签的 Deployment 来实现金丝雀部署。新版本的副本和旧版本的一起发布。在一段时间后如果没有检测到错误，则可以扩展新版本的副本数量并删除旧版本的应用。 v1版本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081apiVersion: extensions/v1beta1kind: Deploymentmetadata: labels: app: tomcat-test name: tomcat-test-v1 namespace: testspec: minReadySeconds: 100 replicas: 4 revisionHistoryLimit: 5 selector: matchLabels: app: tomcat-test version: v1 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: annotations: initializer.kubernetes.io/lxcfs: &apos;true&apos; labels: app: tomcat-test version: v1 spec: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - tomcat-test topologyKey: kubernetes.io/hostname containers: - env: - name: HOST_IP valueFrom: fieldRef: fieldPath: status.hostIP - name: POD_NAME value: tomcat-test - name: version value: v1 image: vnet01-harbor.sy.cn/test/tomcat-test:r-20200214_175535 imagePullPolicy: Always livenessProbe: httpGet: path: /abc/check_health.jsp port: 6080 initialDelaySeconds: 80 timeoutSeconds: 20 name: tomcat-test readinessProbe: httpGet: path: /abc/check_health.jsp port: 6080 initialDelaySeconds: 80 timeoutSeconds: 20 resources: limits: cpu: &apos;2&apos; memory: 4096M requests: cpu: &apos;1&apos; memory: 2048M volumeMounts: - mountPath: /data/logs name: app-log readOnly: false nodeSelector: apptype: memnode terminationGracePeriodSeconds: 60 volumes: - hostPath: path: /var/lib/docker/logs/tomcat-test name: app-log v2版本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081apiVersion: extensions/v1beta1kind: Deploymentmetadata: labels: app: tomcat-test name: tomcat-test-v2 namespace: testspec: minReadySeconds: 100 replicas: 1 revisionHistoryLimit: 5 selector: matchLabels: app: tomcat-test version: v2 strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: annotations: initializer.kubernetes.io/lxcfs: &apos;true&apos; labels: app: tomcat-test version: v2 spec: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - tomcat-test topologyKey: kubernetes.io/hostname containers: - env: - name: HOST_IP valueFrom: fieldRef: fieldPath: status.hostIP - name: POD_NAME value: tomcat-test - name: version value: v2 image: vnet01-harbor.sy.cn/test/tomcat-test:r-20200319_101302 imagePullPolicy: Always livenessProbe: httpGet: path: /abc/check_health.jsp port: 6080 initialDelaySeconds: 80 timeoutSeconds: 20 name: tomcat-test readinessProbe: httpGet: path: /abc/check_health.jsp port: 6080 initialDelaySeconds: 80 timeoutSeconds: 20 resources: limits: cpu: &apos;2&apos; memory: 4096M requests: cpu: &apos;1&apos; memory: 2048M volumeMounts: - mountPath: /data/logs name: app-log readOnly: false nodeSelector: apptype: memnode terminationGracePeriodSeconds: 60 volumes: - hostPath: path: /var/lib/docker/logs/tomcat-test name: app-log 流量比就是4:1]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kube-proxy详解]]></title>
    <url>%2Fposts%2Fdg9ii9sv.html</url>
    <content type="text"><![CDATA[kube-proxy 的转发模式可以通过启动参数–proxy-mode进行设置，有userspace、iptables、IPVS等可选项。 usersapce这里就不做赘述了， 由于转发是在用户态。所以效率不高，且容易丢包。 所以被废弃了。 iptables 模式1在这种模式下缺点就是在大规模的集群中，iptables添加规则会有很大的延迟。因为使用iptables，每增加一个svc都会增加一条iptables的chain。并且iptables修改了规则后必须得全部刷新才可以生效。 iptables是用户态应用程序，通过配置NetFilter规则表构建Linux内核防火墙。 iptables模式与userspace模式最大的区别在于，kube-proxy 利用iptables的DNAT模块，实现了Service 入口到Pod实际地址的转换，免去了一次内核态到用户态的切换。 例子以下面Service为例，分析kube-proxy创建的iptables规则。 1234567891011121314apiVersion: v1kind: Servicemeadata: labels: name: tomcat name: tomcatspace: ports: - port: 6080 targetPort: 6080 nodePort: 30005 type: NodePort selector: app: tomcat 如上所示，在本例中我们创建了一个NodePort类型名为tomcat的服务。该服务的端口为6080，NodePort为30005，对应后端Pod的端口也为6080。虽然没有显示，但是它的Cluster IP为10.254.0.40。tomcat服务有两个后端Pod，IP分别是192.168.20.1和192.168.20.2。 kube-proxy 为该服务创建的iptables规则如下： 12345678910111213141516171819202122232425262728293031# iptables -S -t nat-A PREROUTING -m -comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES-A OUTPUT -m -comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES-A POSTROUTING -m -comment --comment &quot;kubernetes postrouting rules &quot; -j KUBE-POSTROUTING-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000-A KUBE-NODEPORTS -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m tcp --dport 30005 -j KUBE-MARK-MASQ-A KUBE-NODEPORTS -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m -tpc --dport 30005 -j KUBE-SVC-67RLXXX-A KUBE-SEP-ID6YXXX -s 192.168.20.1/32 -m -comment --comment &quot;default/tomcat:&quot;\-j KUBE-MARK-MASQ-A KUBE-SEP-ID6YXXX -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m tcp -j DANT --to-destination 192.168.20.1:6080-A KUBE-SEP-IN2YXXX -s 192.168.20.2/32 -m -comment --comment &quot;default/tomcat:&quot;\-j KUBE-MARK-MASQ-A KUBE-SEP-IN2YXXX -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m tcp -j DANT --to-destination 192.168.20.2:6080-A KUBE-SERVICES -d 10.254.0.40/32 -p tcp -m -comment --comment \&quot;default/tomcat: cluster ip&quot; -m tcp --dport 6080 -j KUBE-SVC-67RLXXX-A KUBE-SERVICES -m comment --comment &quot;kubernetes service nodeport; NOTE: this must be the \last rule in this chain &quot; -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS-A KUBE-SVC-67RLXXX -m comment --comment &quot;default/tomcat:&quot; -m \statistic --mode random --probability 0.500000000 -j KUBE-SEP-ID6YXXX-A KUBE-SVC-67RLXXX -m comment --comment &quot;default/tomcat:&quot; -j \KUBE-SEP-IN2YXXX... 逐条分析。首先，如果是通过节点的30005端口访问NodePort，则会进入以下链,kube-proxy针对NodePort流量入口创建了KUBE-NODEPORTS 链。在我们这个例子中，KUBE-NODEPORTS 链进一步跳转到KUBE-SVC-67RLXXX链。 1234-A KUBE-NODEPORTS -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m tcp --dport 30005 -j KUBE-MARK-MASQ-A KUBE-NODEPORTS -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m -tpc --dport 30005 -j KUBE-SVC-67RLXXX 再看下面的规则,这里采用了iptables的random模块，使连接有50%的概率进入KUBE-SEP-ID6YXXX链，50%的概率进入KUBE-SEP-IN2YXXX链。因此，kube-proxy的iptables模式采用随机数实现了服务的负载均衡。 1234-A KUBE-SVC-67RLXXX -m comment --comment &quot;default/tomcat:&quot; -m \statistic --mode random --probability 0.500000000 -j KUBE-SEP-ID6YXXX-A KUBE-SVC-67RLXXX -m comment --comment &quot;default/tomcat:&quot; -j \KUBE-SEP-IN2YXXX KUBE-SEP-ID6YXXX 链的具体作用就是将请求通过DNAT发送到192.168.20.1的6080端口。 1234-A KUBE-SEP-ID6YXXX -s 192.168.20.1/32 -m -comment --comment &quot;default/tomcat:&quot;\-j KUBE-MARK-MASQ-A KUBE-SEP-ID6YXXX -p tcp -m -comment --comment &quot;default/tomcat:&quot;\-m tcp -j DANT --to-destination 192.168.20.1:6080 当然，做完dnat后也需要snat 123客户端C发起对一个服务S的访问，假设目的地址是（C，VIP），那么客户端期待得到的回程报文的源地址是VIP。即回程报文的源和目的地址应该是（VIP，C）。当网络报文经过网关（Linux内核的netfilter，包括iptables和IPVS director）进行一次DNAT后，报文的源和目的地址对呗修改成了（C，S）。当报文送到服务端S后，服务端一看报文源地址是C，便直接把响应报文返回给C，此时响应报文的源目的地址对是（S，C）。这与客户端期待报文源和目的地址不匹配，客户端收到后悔简单丢弃该报文。因此，当报文不直接送达后端服务器，而是访问虚IP，经过一次中间网关（不管是虚拟网关还是实际网关）时，都需要在网关处做一次SANT，把报文的源IP改成网关IP地址，以便回程报文回到该网关。再让该网关把回程报文目的修改成客户端C的IP地址，源地址改成虚IP。 结果显示综上所述，iptables模式最主要的链是KUBE-SERVICES、KUBE-SVC-和KUBE-SEP-。 KUBE-SERVICES 链是访问集群内服务的数据包入口点，它会根据匹配到的目标IP：port将数据包分发到相应的KUBE-SVC-*链 KUBE-SVC-链相对于一个负载均衡器，它会将数据平均分发到KUBE-SEP-链，每个KUBE-SVC-链后面的KUBE-SEP-都和Service的后端Pod数量一样。 KUBE-SEP-*链通过DNAT将连接目的地址和端口从Service的IP：port替换为后端Pod的IP：port，从而将流量转发到相应的Pod。 iptables模式与userspace模式相比，虽然在稳定性和性能上均有不小的提升，但因为iptables使用NAT完成转发，也存在不可忽视的性能损耗。另外，当集群中存在上万服务时，Node上的iptables rules会非常庞大，对管理是个不小的负担，性能还会大打折扣。 ipvs 模式IPVS是LVS的负载均衡模块，亦基于netfilter，但比iptables性能更高，具备更好的可扩展性。kube-proxy的IPVS模式在kubernetes1.11版本达到稳定。 先来了解一下为什么添加IPVS的原因，随着kubernetes集群规模的增长，其资源的可扩展性变得越来越重要，特别是对那些运行大型工作负载的企业，其服务的可扩展性尤其重要。要知道，iptables难以扩展到支持成千上万的服务，它纯粹是为防火墙设计的，并且底层路由表的实现是链表，对路由规则的增删改查操作都要涉及便利一次链表。 尽管kubernetes 1.6版本已经支持5000节点，但使用iptables模式的kube-proxy实际上是将集群扩展到5000节点的最大瓶颈。假设，我们有1000个服务，每个服务有10个后端Pod，将会在工作节点上至少产生10000*N（N&gt;=4）个iptables记录，这可能使内核非常繁忙的处理每次iptables规则的刷新。 并且，使用IPVS做集群内服务的负载均衡可以解决iptables带来的性能问题。IPVS专门用于负载均衡，并使用更高效的数据结构（散列表），允许几乎无限的规模扩张。 IPVS 的工作原理IPVS是Linux内核实现的四层负载均衡，是LVS负载均衡模块的实现。IPVS基于netfilter的散列表，相对于同样基于netfilter框架的iptables有更好的性能表现和扩展性。 IPVS支持TCP、UDP、SCTP、IPv4、IPv6等协议，也支持多种负载均衡策略，例如rr、wrr、lc、wlc、sh、dh、lblc等。IPVS通过persistent connection 调度算法原生支持会话保持功能。 LVS工作原理，简单来说。当外机的数据包首先经过netfilter的PERROUTING链，然后经过一次路由抉择到达INPUTU链，再做一次DNAT后经过FORWARD链离开本机网络路由协议栈。由于IPVS的DNAT是发生在netfilter的INPUT链，因此如何让网络报文经过INOUT链在IPVS中就变得非常重要。一般有两种解决方法，一种是把服务的虚IP写到本机的本地内核路由表中；另一种方法是在本机创建一个dunmmy网卡。然后把服务的虚IP绑定到该网卡上。kubernetes使用的是后者。 IPVS支持三种负载均衡模式：Direct Routing（简称DR），Tunneling（也称ipip模式）和NAT（也称Masq模式） 注：虽有一些版本的IPVS，例如华为和阿里自己维护的分支支持fullNAT，及同时支持SNAT和DNAT，但是Linux内核原生版本的IPVS只做DNAT，不做SNAT。因此在kubernetes service 的某些场景下，我们仍然需要iptables。 DRIPVS的DR模式是最广泛的IPVS模式，它工作在L2，即通过Mac地址做LB，而非IP地址。在DR模式下，回程报文不会经过IPVS director 而是直接返回给客户端。因此，DR在带来高性能的同时，对网络也有一定的限制，及要求IPVS的director 和客户端在同一个局域网。另外，比较遗憾的是，DR不支持端口映射，无法支持kubernetes service的所有场景。 TunnelingIPVS的Tunneling模式就是用IP包封装IP包，因此也称ipip模式。Tunneling模式下的报文不经过IPVS director，而是直接回复给客户端。Tunneling模式统一不支持端口映射，因此很难被用在kubernetes的service场景中。 NATIPVS的NAT模式支持端口映射，回程报文需要经过IPVS director，因此也称Masq（伪装）模式。kubernetes在用IPVS实现Service时用的正式NAT模式。当使用NAT模式时，需要注意对报文进行一次SNAT，这也是kubernetes使用IPVS实现Service的微妙之处。 kube-proxy IPVS模式参数在运行基于IPVS的kube-proxy时，需要注意以下参数： –proxy-mode：除了现有的userspace和iptables模式，IPVS模式通过–proxymode=ipvs进行配置。 –ipvs-scheduler:用来指定ipvs负载均衡算法，如果不配置则默认使用round-robin（rr）算法。 1234567如果不配置则默认使用round-robin（rr）算法。支持配置的负载均衡算法有： — rr：轮询，这种算法是最简单的，就是按依次循环的方式将请求调度到不同的服务器上，该算法最大的特点就是简单。轮询算法假设所有的服务器处理请求的能力都是一样的，调度器会将所有的请求平均分配给每个真实服务器，不管后端 RS 配置和处理能力，非常均衡地分发下去。 — lc：最小连接，这个算法会根据后端 RS 的连接数来决定把请求分发给谁，比如 RS1 连接数比 RS2 连接数少，那么请求就优先发给 RS1 — dh：目的地址哈希，该算法是根据目标 IP 地址通过散列函数将目标 IP 与服务器建立映射关系，出现服务器不可用或负载过高的情况下，发往该目标 IP 的请求会固定发给该服务器。 — sh：原地址哈希，与目标地址散列调度算法类似，但它是根据源地址散列算法进行静态分配固定的服务器资源。 — sed：最短时延 （未来。kube-proxy可能实现在service的annotations 配置负载均衡策略，这个功能应该只能在IPVS模式下才支持） –cleanup-ipvs：类似于–cleanup-iptables参数。如果设置为true，则清除在IPVS模式下创建的IPVS规则； –ipvs-sync-period：表示kube-proxy刷新IPVS规则的最大间隔时间，例如5秒。1分钟等，要求大于0； –ipvs-min-sync-period：表示kube-proxy刷新IPVS规则最小时间间隔，例如5秒，1分钟等，要求大于0 –ipvs-exclude-cidrs：用于清除IPVS规则时告知kube-proxy不要清理该参数配置的网段的IPVS规则。因为我们无法区别某条IPVS规则到底是kube-proxy创建的，还是其他用户进程的，配置该参数是为了避免删除用户自己的IPVS规则。 1234567一旦创建一个Service和Endpoint，IPVS模式的kube-proxy会做以下三件事：1）确保一块dummy网卡（kube-ipvs0）存在，为什么要创建dummy网卡？因为IPVS的netfilter钩子挂载INPUT链，我们需要把Service的访问绑定在dummy网卡上让内核“觉得”虚IP就是本机IP，进而进入INPUT链。2）把Service的访问IP绑定在dummy网卡上3）通过socket调用，创建IPVS的virtual server和real server，分别对应kubernetes的Service和Endpoint。 IPVS模式中的iptables和ipsetIPVS用于流量转发，它无法处理kube-proxy中的其他问题，例如包过滤、SNAT等。具体来说，IPVS模式的kube-proxy将在以下4中情况依赖iptables kube-proxy 配置启动参数masquerade-all=true，即集群中所有经过Kube-proxy的包都将做一次SNAT kube-proxy 启动参数指定集群IP地址范围 支持Load Balance 类型的服务，用于配置白名单 支持NodePort类型的服务，用于在包跨节点前配置MASQUERADE,类似于上文提到的iptables模式 我们不想创建太多的iptables规则，因此使用了ipset减少iptables规则，使得不管集群内有多少服务，IPVS模式iptables规则的总数在5条以内。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack虚拟机VIP配置步骤]]></title>
    <url>%2Fposts%2Fdk456akf.html</url>
    <content type="text"><![CDATA[在openstack上的虚拟机绑定vip有时候需要配置vip搭建高可用集群，下面我就简单的说下在openstack上的虚拟机如何绑定vip 操作步骤1、 执行命令neutron net-list查看网络，找到自己需要设置的网络，获取subnet_id和network_id 12345678[root@controller neutron]# neutron net-listneutron CLI is deprecated and will be removed in the future. Use openstack CLI instead.+--------------------------------------+-------------+----------------------------------+------------------------------------------------------+| id | name | tenant_id | subnets |+--------------------------------------+-------------+----------------------------------+------------------------------------------------------+| 0417bb19-0986-43cc-ae28-7515b6b94a7e | vlan135-test | b4cf8c990abb481a908a735104ec6724 | 0aaaa1f7-9ed1-4e48-9fcb-c3803ab91199 172.17.14.0/22 || 0ae2f077-799c-400b-97b7-68007867d020 | vlan136-dev | b4cf8c990abb481a908a735104ec6724 | 7b0f287f-0bde-44c0-9680-152371c4b4d0 172.17.10.0/22 |+--------------------------------------+-------------+----------------------------------+------------------------------------------------------+ 2、创建port来占用ip，保证neutron不会将此IP在分配出去，导致IP冲突问题。 12345neutron port-create --fixed-ip subnet_id=&lt;subnet_id&gt;,ip_address=&lt;vip&gt; &lt;network_id&gt;注： 替换subnet_id为neutron net-list中查看到的subnet_id 替换vip为需要配置的vip地址 替换network_ID为neutron net-list中查看到的network_id 3、执行命令neutron port-list查看端口，找到VIP的Port ID以及需要使用VIP的虚拟机的IP对应的Port id比如两台虚拟机做HA绑定vip，那么需要查看两台虚拟机的port ID和这个vip的port ID 1234比如：neutron port-list|grep 172.17.14.244 vip地址neutron port-list|grep 172.17.14.139 机器1地址neutron port-list|grep 172.17.14.165 机器2地址 4、 取消安全组对应端口的管理 1234neutron port-update --no-security-groups &lt;Port_id&gt;neutron port-update --port_security_enabled=false &lt;Port_id&gt;注： 替换Port_id为之前neutron port-list中找到的Port_id 参考文档： 1https://www.lijiawang.org/posts/%E5%9C%A8openstack%E4%B8%8A%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%91%E5%AE%9Avip.html]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph空间不能释放]]></title>
    <url>%2Fposts%2Fds1237fs.html</url>
    <content type="text"><![CDATA[问题描述在OpenStack云环境的部署中，存储通常具备Thin provision的功能，这项功能实现了存储按需分配的能力。现在有这样一种场景，用户在文件系统中创建了大文件，使用完之后进行了删除。但实际上，该文件在存储系统上占用的空间并没有释放。 当用户在文件系统中删除一个文件，并不会在块设备上的对应空间填0，而仅仅在磁盘的元数据结构中将这些block标记为未使用。因此，虽然文件系统知道这些block是未使用或者说可用的，但是底层的存储系统并不知道文件系统做的操作，会认为这些block仍在使用。以RBD image为例，它本身是稀疏格式的，也就是说它所占用objects会随着用户写入数据的增加而增加（Thin provision）。当用户删除数据以后，这些obejct不再使用，但并没有被释放。因为从Ceph的角度讲，它并不知道文件系统中发生的事情。 解决办法配置1234567891011121314151617需要配置Nova和Glance支持virtio-scsi和discard。1、glance image-update --property hw_scsi_model=virtio-scsi --property hw_disk_bus=scsi其中，hw_scsi_model=virtio-scsi 是指libvirt要使用virtio-scsi控制器，hs_disk_bus=scsi是指libvirt使用scsi总线连接磁盘到控制器。2、编辑nova.conf[libvirt]hw_disk_discard = unmap其中，有效的hw_disk_discard参数包括：unmap: it unmaps aligned group of sectorsignore: it ignores the discard request 触发Trim/Discard请求1234567891011 有两种方式可以触发Trim/Discard请求，一种是由文件系统自动完成，一种是用户通过执行命令来完成。一、文件系统自动完成 只要在挂载文件系统时指定discard参数即可，比如 mount -t ext4 -o discard device mountpoint，这样在文件系统中删除文件后会自动触发Trim/Discard操作，在块设备上释放占用的空间。二、用户执行命令 用户可以执行命令fstrim来触发Trim/Discard操作，采用这种方式mount文件系统时不需要discard参数。比如，fstrim -v mountpoint，就会释放对应块设备上不用的空间。 需要注意的是，mount的discard参数会导致文件系统性能下降，在并发删除大量小文件时变得很慢，因此需要根据具体场景选择合适的长发方式。 系统盘加discard12不能通过重新挂载设置丢弃选项，因此必须在第一次挂载时使用它（如果是/，则是在引导时由内核挂载rootfs）。关键是使用rootflags来提供discard mount选项作为内核参数在/boot/grub2/grub.cfg文件中，增加rootflags=discard]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控openstack]]></title>
    <url>%2Fposts%2F30ndjdll.html</url>
    <content type="text"><![CDATA[安装docker 1234567Latest Docker master images：docker pull quay.io/niedbalski/openstack-exporter-linux-amd64:masterdocker pull quay.io/niedbalski/openstack-exporter-linux-arm64:masterLatest Docker release images：docker pull quay.io/niedbalski/openstack-exporter-linux-amd64:v0.9.0docker pull quay.io/niedbalski/openstack-exporter-linux-arm64:v0.9.0 二进制 1https://github.com/openstack-exporter/openstack-exporter/releases 命令12345678910111213141516171819202122sage: openstack-exporter [&lt;flags&gt;] &lt;cloud&gt;Flags: -h, --help Show context-sensitive help (also try --help-long and --help-man). --web.listen-address=&quot;:9180&quot; address:port to listen on --web.telemetry-path=&quot;/metrics&quot; uri path to expose metrics --os-client-config=&quot;/etc/openstack/clouds.yaml&quot; Path to the cloud configuration file --prefix=&quot;openstack&quot; Prefix for metrics --endpoint-type=&quot;public&quot; openstack endpoint type to use (i.e: public, internal, admin) -d, --disable-metric= ... multiple --disable-metric can be specified in the format: service-metric (i.e: cinder-snapshots) --disable-service.network Disable the network service exporter --disable-service.compute Disable the compute service exporter --disable-service.image Disable the image service exporter --disable-service.volume Disable the volume service exporter --disable-service.identity Disable the identity service exporterArgs: &lt;cloud&gt; name or id of the cloud to gather metrics from OpenStack configuration123456789101112clouds: default: region_name: &#123;&#123; openstack_region_name &#125;&#125; identity_api_version: 3 identity_interface: internal auth: username: &#123;&#123; keystone_admin_user &#125;&#125; password: &#123;&#123; keystone_admin_password &#125;&#125; project_name: &#123;&#123; keystone_admin_project &#125;&#125; project_domain_name: &apos;Default&apos; user_domain_name: &apos;Default&apos; auth_url: &#123;&#123; admin_protocol &#125;&#125;://&#123;&#123; kolla_internal_fqdn &#125;&#125;:&#123;&#123; keystone_admin_port &#125;&#125;/v3 对接grafana1https://grafana.com/grafana/dashboards/9701]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph指定磁盘类型创建存储池]]></title>
    <url>%2Fposts%2Fbq9ajdj3.html</url>
    <content type="text"><![CDATA[介绍在用openstack的时候，有sas盘，有ssd盘，想将外挂卷用sas盘，故通过改crush规则实现 实现方式创建123456789创建两条rule host分别指定为ssd/hdd# ceph osd crush rule create-replicated rule-ssd default host ssd# ceph osd crush rule create-replicated rule-hdd default host hdd修改pool绑定的rule# ceph osd pool set images crush_rule rule-ssd# ceph osd pool set volumes crush_rule rule-hdd# ceph osd pool set vms crush_rule rule-ssd 查看规则内容1ceph osd crush rule dump 获取crush map1ceph osd getcrushmap -o crushmapgot 反编译crush map1crushtool -d crushmapgot -o decrushmap]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[(转载)k8s实用小工具]]></title>
    <url>%2Fposts%2Fksjdj75f.html</url>
    <content type="text"><![CDATA[Kubectl插件关于kubectl插件kubectl插件其实就是以kubectl-为前缀的任意可执行文件，比如执行: 1ln -s /bin/echo /usr/local/bin/kubectl-echo 此时就相当于安装了个echo的kubectl插件，kubectl插件可以通过kubectl + 插件名执行，kubectl xxx其实就是相当于运行kubectl-xxx。 比如要运行我们的echo插件，只需执行如下命令: 12# kubectl echo &quot;HelloWorld!&quot;HelloWorld! 通过kubectl plugin list可列出当前PATH目录下所有插件: 123456789# kubectl plugin listThe following compatible plugins are available:/root/.krew/bin/kubectl-grep/root/.krew/bin/kubectl-krew/root/.krew/bin/kubectl-ns/root/.krew/bin/kubectl-ssh_jump/root/.krew/bin/kubectl-whoami/usr/local/bin/kubectl-echo 所以要实现自己的插件，只需要把最终的可执行文件命名为kubectl-xxxx，然后放到PATH包含任意目录即可，但注意无法覆盖kubectl已有的子命令，如果与kubectl现有的子命令相同，则会优先执行内置子命令，因此插件不会被执行。 krew首先要介绍的就是krew，krew是一个Kubernetes的包管理工具，它的功能就是提供简单的方法下载、检索、管理其他插件，类似操作系统的apt、yum、brew等工具，其命名也似乎模仿的brew工具。 安装krew的官方脚本如下： 1234567( set -x; cd &quot;$(mktemp -d)&quot; &amp;&amp; curl -fsSLO &quot;https://github.com/kubernetes-sigs/krew/releases/download/v0.3.2/krew.&#123;tar.gz,yaml&#125;&quot; &amp;&amp; tar zxvf krew.tar.gz &amp;&amp; ./krew-&quot;$(uname | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)_amd64&quot; install \ --manifest=krew.yaml --archive=krew.tar.gz) 安装完后就可以使用krew搜索、安装其他插件了，本文接下来介绍的大多数插件都可以使用krew直接安装。 1234# kubectl krew search whoamiNAME DESCRIPTION INSTALLEDwhoami Show the subject that&apos;s currently authenticated... yes# kubectl krew install ns krew在krew index项目中维护支持的插件列表以及下载路径，目前所有插件都是在github中发布下载，但由于众所周知的原因，国内从github下载速度非常慢😑。 为了提高下载速度，写了个脚本使用axel下载替换原来的下载方式，提速至少10倍以上👿： 脚本可以在我的github中下载fast-krew。 kubectx / kubenskubectx用于快速切换Kubernetes context，而kubens则用于快速切换namespace，我认为二者强大之处在于可以结合fzf使用。任何工具只要和fzf结合，都会很强大😁。 如切换到kube-system namespace: 1kubectl ns kube-system 如果不指定namespace，则调用fzf交互式选择: 如上黄色的namespace表示当前namespace，通过方向键移动箭头选择需要切换的目标namespace，切换context也一样，由于测试环境只有一个admin，因此只有一个选项。 grep基于name搜索资源，资源包括DaemonSets、Pods、Deployments、Nodes等，如搜索名字中带web的所有Pods: 12345# kubectl grep pod webNAMESPACE NAME READY STATUS RESTART AGEdefault web-0 1/1 Running 0 37hdefault web-1 1/1 Running 0 37hdefault web-2 1/1 Running 0 37h 在所有的namespaces搜索名字带virt的Deployments: 12345# kubectl grep deployment virt --all-namespacesNAMESPACE NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEkubevirt virt-api 2 2 2 2 5h32mkubevirt virt-controller 2 2 2 2 5h32mkubevirt virt-operator 2 2 2 2 5h49m iexecexec命令的功能增强版本，我们知道exec必须指定Pod的名称，如果一个Pod有多个容器，则还需要指定容器名称，而使用exec则可以通过Pod模糊查询然后交互式选择，如果Pod中包含多个容器，也可以通过交互式选择。 比如我创建的Deployment有如下5个nginx Pod: 1234567[root@ip-192-168-193-172 ~ (⎈ |kubernetes-# kubectl get podNAME READY STATUS RESTARTS AGEnginx-6984d55cb6-b7zgp 2/2 Running 0 5m23snginx-6984d55cb6-bd8nf 2/2 Running 0 5m23snginx-6984d55cb6-dljzx 2/2 Running 0 5m23snginx-6984d55cb6-gn94v 2/2 Running 0 5m23snginx-6984d55cb6-kcj62 2/2 Running 0 5m23s 使用iexec可以直接运行如下命令: 1kubectl iexec nginx 结果如下: 我们知道通过Deployment创建的Pod，Pod的命名格式为Deployment名字+加上Deployment的一段hash + Replica的一段hash，我们通常只记得Deployment的名字，而不知道Pod的名字，通过iexe只需要输入Deployment名字即可，通过交互式选择Pod，非常方便。 doctor和brew doctor类似的工具，用于检查Kubernetes的健康状况以及扫描Kubernetes集群中的异常资源，比如etcd member状态、Node状态、孤儿endppoint等。 12345678910# kubectl doctor--- TriageReport:- Resource: Endpoints AnomalyType: Found orphaned endpoints! Anomalies: - kube-controller-manager - kube-scheduler - virt-controller - virt-operator access-matrix查看权限矩阵，比如查看针对Pod的API操作权限： df-pvkubectl目前只能获取pv的空间大小，而无法显示pv的真实使用情况，但其实kubelet summary API从1.8版本开始就已经有这些数据了，但官方kubectl工具还无法直接显示这些数据。 tail我们知道kubectl的logs命令查看日志需要指定pod名称，如果一个pod还有多个容器，还需要指定容器名称，而tail插件支持同时查看多个pod的日志，支持通过Deployment、ReplicaSet等资源类型过滤日志。 文章出自 https://int32bit.me/2019/12/05/分享几个Kubernetes实用插件和工具/]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph-卸载osd]]></title>
    <url>%2Fposts%2Fb4jdk1j4.html</url>
    <content type="text"><![CDATA[介绍OSD全称Object Storage Device，也就是负责响应客户端请求返回具体数据的进程。一个Ceph集群一般都有很多个OSD。 卸载osd12345678systemctl stop ceph-osd@6.serviceumount /var/lib/ceph/osd/ceph-6ceph osd out osd.6ceph osd crush remove osd.6ceph auth del osd.6ceph osd rm 6wipefs -af /dev/sda /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdfdmsetup remove ceph--04bc08ca--60ac--4a8c--8e6f--2569b41b56dd-osd--block--6a5dfa77--be8b--4948--8a2c--008a827c6e08]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[线上k8s1.12版本故障复盘]]></title>
    <url>%2Fposts%2F98jfdla5.html</url>
    <content type="text"><![CDATA[概述本来面临双十二这一天，线上出问题就会很紧张，本想今天应该没啥大问题，但很不巧，在11号晚上7点50时候，收到了k8s的events报警。 看到这个报警，赶紧看下服务，发现服务目前正常，但有一个正发布的服务，销毁不了老的pod，我怀疑node节点可能是不可用了。果不其然，在控制节点上查看node状态，为not ready。 检查报的内核报警，但是其实不应该导致node节点不可用，故赶紧深究一下，先将node节点打上污点，不可调度。 当集群节点进入NotReady状态的时候，我们需要做的第一件事情，肯定是检查运行在节点上的kubelet是否正常。在这个问题出现的时候，使用systemctl命令查看kubelet状态，发现它作为systemd管理的一个daemon，是运行正常的。当我们用journalctl查看kubelet日志的时候，发现下边的错误。 12 Dec 11 19:38:45 ali-worker-k8s-001 kubelet[20140]: E1211 19:38:45.239546 20140 kubelet.go:1551] error killing pod: failed to &quot;KillPodSandbox&quot; for &quot;31321cfc-1bbe-11ea-893e-00163e14447d&quot; with KillPodSandboxError: &quot;rpc error: code = DeadlineExceeded desc = context deadline exceeded&quot; order-oms-64544b9c65-4lq5d_sec-mall 这个pod杀不掉，导致了docker死锁，所以判断是containerd的问题 问了下阿里的大佬 1shim其实扮演父进程，回收容器里进程的角色，跟systemd去回收系统进程一样。linux上如果systemd卡主了，就会有一堆defunct。shim老版本的同步机制，就用了一个32大小的channel，理论上超过32个进程一起退出，就会overflow 于是我exec进入容器，果然发现进程很多，都是多于32，于是选择升级containerd解决问题 具体操作步骤如下 12345678910111213141516171、下载1.2.10 containerdwget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.10-3.2.el7.x86_64.rpm2、停止kubelet进程systemctl stop kubelet3、停止containerdsystemctl stop containerd4、更新rpm版本rpm -Uvh containerd.io-1.2.10-3.2.el7.x86_64.rpm5、启动containerd，检查版本systemctl start containerdctr version6、启动docker，检查容器进程systemctl start dockerdocker ps7、启动kubeletsystemctl start kubelet8、调度pod到该节点，验证是否正常 网上看到的另一个bug是systemd的问题 什么是PLEG这个报错很清楚的告诉我们，容器runtime是不工作的，且PLEG是不健康的。这里容器runtime指的就是docker daemon。Kubelet通过直接操作docker daemon来控制容器的生命周期。而这里的PLEG，指的是pod lifecycle event generator。PLEG是kubelet用来检查容器runtime的健康检查机制。这件事情本来可以由kubelet使用polling的方式来做。但是polling有其成本上的缺陷，所以PLEG应用而生。PLEG尝试以一种“中断”的形式，来实现对容器runtime的健康检查，虽然实际上，它同时用了polling和”中断”两种机制。 基本上看到上边的报错，我们可以确认，容器runtime出了问题。在有问题的节点上，通过docker命令尝试运行新的容器，命令会没有响应。这说明上边的报错是准确的. 容器runtime容器runtime包括docker daemon，containerd，containerd-shim以及runC。组件containerd负责集群节点上容器的生命周期管理，并向上为docker daemon提供gRPC接口。 故也升级了下systemd。升级systemd，直接yum update systemd就可以。 其中如果遇到容器起不来网络插件的情况，可以ip link del dev cni0，会自动重启的]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s基本排错]]></title>
    <url>%2Fposts%2F33kfdkf4.html</url>
    <content type="text"><![CDATA[在排错过程中，kubectl 是最重要的工具，通常也是定位错误的起点。这里也列出一些常用的命令，在后续的各种排错过程中都会经常用到。 排错概览查看 Pod 状态以及运行节点12kubectl get pods -o widekubectl -n kube-system get pods -o wide 查看 Pod 事件1kubectl describe pod &lt;pod-name&gt; 查看 Node 状态12kubectl get nodeskubectl describe node &lt;node-name&gt; kube-apiserver 日志12PODNAME=$(kubectl -n kube-system get pod -l component=kube-apiserver -o jsonpath='&#123;.items[0].metadata.name&#125;')kubectl -n kube-system logs $PODNAME --tail 100 以上命令操作假设控制平面以 Kubernetes 静态 Pod 的形式来运行。如果 kube-apiserver 是用 systemd 管理的，则需要登录到 master 节点上，然后使用 journalctl -u kube-apiserver 查看其日志。 kube-controller-manager 日志12PODNAME=$(kubectl -n kube-system get pod -l component=kube-controller-manager -o jsonpath='&#123;.items[0].metadata.name&#125;')kubectl -n kube-system logs $PODNAME --tail 100 以上命令操作假设控制平面以 Kubernetes 静态 Pod 的形式来运行。如果 kube-controller-manager 是用 systemd 管理的，则需要登录到 master 节点上，然后使用 journalctl -u kube-controller-manager 查看其日志。 kube-scheduler 日志12PODNAME=$(kubectl -n kube-system get pod -l component=kube-scheduler -o jsonpath='&#123;.items[0].metadata.name&#125;')kubectl -n kube-system logs $PODNAME --tail 100 以上命令操作假设控制平面以 Kubernetes 静态 Pod 的形式来运行。如果 kube-scheduler 是用 systemd 管理的，则需要登录到 master 节点上，然后使用 journalctl -u kube-scheduler 查看其日志。 kube-dns 日志kube-dns 通常以 Addon 的方式部署，每个 Pod 包含三个容器，最关键的是 kubedns 容器的日志： 12PODNAME=$(kubectl -n kube-system get pod -l k8s-app=kube-dns -o jsonpath='&#123;.items[0].metadata.name&#125;')kubectl -n kube-system logs $PODNAME -c kubedns Kubelet 日志Kubelet 通常以 systemd 管理。查看 Kubelet 日志需要首先 SSH 登录到 Node 上，推荐使用 kubectl-node-shell而不是为每个节点分配公网 IP 地址。比如： 12345678910111213141516171819202122232425262728293031323334353637383940[root@localhost ~]# cat kubectl-node_shell#!/bin/shif [ -z &quot;$1&quot; ]; then echo &quot;Please specify node name&quot; exit 1fiNODE=&quot;$1&quot;IMAGE=&quot;alpine&quot;POD=&quot;nsenter-$(env LC_CTYPE=C tr -dc a-z0-9 &lt; /dev/urandom | head -c 6)&quot;NAMESPACE=&quot;&quot;# Check the nodekubectl get node &quot;$NODE&quot; &gt;/dev/null || exit 1OVERRIDES=&quot;$(cat &lt;&lt;EOT&#123; &quot;spec&quot;: &#123; &quot;nodeName&quot;: &quot;$NODE&quot;, &quot;hostPID&quot;: true, &quot;containers&quot;: [ &#123; &quot;securityContext&quot;: &#123; &quot;privileged&quot;: true &#125;, &quot;image&quot;: &quot;$IMAGE&quot;, &quot;name&quot;: &quot;nsenter&quot;, &quot;stdin&quot;: true, &quot;stdinOnce&quot;: true, &quot;tty&quot;: true, &quot;command&quot;: [ &quot;nsenter&quot;, &quot;--target&quot;, &quot;1&quot;, &quot;--mount&quot;, &quot;--uts&quot;, &quot;--ipc&quot;, &quot;--net&quot;, &quot;--pid&quot;, &quot;--&quot;, &quot;bash&quot;, &quot;-l&quot; ] &#125; ] &#125;&#125;EOT)&quot;echo &quot;spawning \&quot;$POD\&quot; on \&quot;$NODE\&quot;&quot;kubectl run --namespace &quot;$NAMESPACE&quot; --rm --image alpine --overrides=&quot;$OVERRIDES&quot; --generator=run-pod/v1 -ti &quot;$POD&quot; 123456chmod +x ./kubectl-node_shellsudo mv ./kubectl-node-shell /usr/local/bin/kubectl-node_shell[root@localhost ~]# ./kubectl-node_shell localhost.localdomainspawning "nsenter-i71opm" on "localhost.localdomain"If you don't see a command prompt, try pressing enter.[root@localhost /]# journalctl -l -u kubelet Kube-proxy 日志Kube-proxy 通常以 DaemonSet 的方式部署，可以直接用 kubectl 查询其日志 123456$ kubectl -n kube-system get pod -l component=kube-proxyNAME READY STATUS RESTARTS AGEkube-proxy-42zpn 1/1 Running 0 1dkube-proxy-7gd4p 1/1 Running 0 3dkube-proxy-87dbs 1/1 Running 0 4d$ kubectl -n kube-system logs kube-proxy-42zpn ui小工具部署12kubectl apply --namespace weave -f &quot;https://cloud.weave.works/k8s/scope.yaml?k8s-version=$(kubectl version | base64 | tr -d &apos;\n&apos;)&quot;kubectl patch svc $(kubectl get svc -n weave |grep weave-scope-app |awk &apos;&#123;print $1&#125;&apos;) -p &apos;&#123;&quot;spec&quot;:&#123;&quot;type&quot;: &quot;NodePort&quot;&#125;&#125;&apos; -n weave 效果图]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s列出出错的pods]]></title>
    <url>%2Fposts%2F4oqf33a5.html</url>
    <content type="text"><![CDATA[Suspicious pods早上看到一个k8s的排错小工具，还挺不错的，安装了尝试下 安装123curl --proto &apos;=https&apos; --tlsv1.2 -sSf https://sh.rustup.rs | shsource $HOME/.cargo/envcargo install suspicious-pods 12345678910111213141516[rsync@albj-jenkins-slave-docker-01 scripts]$ suspicious-pods --helpsuspicious-pods 0.5.2Prints a list of k8s pods that might not be working correctlyUSAGE: suspicious-pods &lt;namespace&gt; --format &lt;format&gt;FLAGS: -h, --help Prints help information -V, --version Prints version informationOPTIONS: -f, --format &lt;format&gt; The output format. Valid values are: text, markdown [default: text]ARGS: &lt;namespace&gt; The namespace you want to scan [default: default]]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—集成Ceph]]></title>
    <url>%2Fposts%2F8kas09vc.html</url>
    <content type="text"><![CDATA[Glance集成Ceph配置glance-api.conf12345678910111213141516171819202122# 在运行glance-api服务的节点修改glance-api.conf文件，含3个控制节点，以controller01节点为例# 以下只列出涉及glance集成ceph的section[root@controller01 ~]# vim /etc/glance/glance-api.conf# 打开copy-on-write功能[DEFAULT]show_image_direct_url = True# 变更默认使用的本地文件存储为ceph rbd存储；# 注意红色字体部分前后一致[glance_store]#stores = file,http#default_store = file#filesystem_store_datadir = /var/lib/glance/images/stores = rbddefault_store = rbdrbd_store_chunk_size = 8rbd_store_pool = imagesrbd_store_user = glancerbd_store_ceph_conf = /etc/ceph/ceph.conf# 变更配置文件，重启服务[root@controller01 ~]# systemctl restart openstack-glance-api.service Cinder集成Ceph配置cinder.conf123456789101112131415161718# cinder利用插件式结构，支持同时使用多种后端存储；# 在cinder-volume所在节点设置cinder.conf中设置相应的ceph rbd驱动即可；[DEFAULT]...enabled_backends = cephglance_api_version = 2...[ceph]volume_driver = cinder.volume.drivers.rbd.RBDDrivervolume_backend_name = cephrbd_pool = volumesrbd_ceph_conf = /etc/ceph/ceph.confrbd_flatten_volume_from_snapshot = falserbd_max_clone_depth = 5rbd_store_chunk_size = 4rados_connect_timeout = -1rbd_user = cinderrbd_secret_uuid = 457eb676-33da-42ec-9a8c-9293d545c337 启动1systemctl start openstack-cinder-volume.service target.service 验证123# 查看cinder服务状态，cinder-volume集成ceph后，状态”up”；# 或：cinder service-list[root@controller01 ~]# openstack volume service list Nova集成Ceph配置ceph.conf123456789101112131415161718# 如果需要从ceph rbd中启动虚拟机，必须将ceph配置为nova的临时后端；# 推荐在计算节点的配置文件中启用rbd cache功能；# 为了便于故障排查，配置admin socket参数，这样每个使用ceph rbd的虚拟机都有1个socket将有利于虚拟机性能分析与故障解决；# 相关配置只涉及全部计算节点ceph.conf文件的[client]与[client.cinder]字段，以compute01节点为例[root@compute01 ~]# vim /etc/ceph/ceph.conf[client]rbd cache = truerbd cache writethrough until flush = trueadmin socket = /var/run/ceph/guests/$cluster-$type.$id.$pid.$cctid.asoklog file = /var/log/qemu/qemu-guest-$pid.logrbd concurrent management ops = 20[client.cinder]keyring = /etc/ceph/ceph.client.cinder.keyring# 创建ceph.conf文件中指定的socker与log相关的目录，并更改属主[root@compute01 ~]# mkdir -p /var/run/ceph/guests/ /var/log/qemu/[root@compute01 ~]# chown qemu:libvirt /var/run/ceph/guests/ /var/log/qemu/ 配置nova.conf1234567891011121314151617181920212223# 在全部计算节点配置nova后端使用ceph集群的vms池，以compute01节点为例[root@compute01 ~]# vim /etc/nova/nova.conf[libvirt]images_type = rbdimages_rbd_pool = vmsimages_rbd_ceph_conf = /etc/ceph/ceph.confrbd_user = cinder# uuid前后一致rbd_secret_uuid = 10744136-583f-4a9c-ae30-9bfb3515526bdisk_cachemodes=&quot;network=writeback&quot;live_migration_flag=&quot;VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE,VIR_MIGRATE_PERSIST_DEST,VIR_MIGRATE_TUNNELLED&quot;# 禁用文件注入inject_password = falseinject_key = falseinject_partition = -2# 虚拟机临时root磁盘discard功能，”unmap”参数在scsi接口类型磁盘释放后可立即释放空间hw_disk_discard = unmap# 原有配置virt_type=kvm# 变更配置文件，重启计算服务[root@compute01 ~]# systemctl restart libvirtd.service openstack-nova-compute.service[root@compute01 ~]# systemctl status libvirtd.service openstack-nova-compute.service 配置live-migration修改/etc/libvirt/libvirtd.conf1234567891011# 在全部计算节点操作，以compute01节点为例；# 以下给出libvirtd.conf文件的修改处所在的行num[root@compute01 ~]# egrep -vn &quot;^$|^#&quot; /etc/libvirt/libvirtd.conf# 取消以下三行的注释22:listen_tls = 033:listen_tcp = 145:tcp_port = &quot;16509&quot;# 取消注释，并修改监听端口55:listen_addr = &quot;本机ip地址&quot;# 取消注释，同时取消认证158:auth_tcp = &quot;none&quot; 修改/etc/sysconfig/libvirtd12345# 在全部计算节点操作，以compute01节点为例；# 以下给出libvirtd文件的修改处所在的行num[root@compute01 ~]# egrep -vn &quot;^$|^#&quot; /etc/sysconfig/libvirtd# 取消注释9:LIBVIRTD_ARGS=&quot;--listen&quot; 重启服务12345# libvirtd与nova-compute服务都需要重启[root@compute01 ~]# systemctl restart libvirtd.service openstack-nova-compute.service# 查看服务[root@compute01 ~]# netstat -tunlp | grep 16509]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Cinder存储节点]]></title>
    <url>%2Fposts%2F8oij819c.html</url>
    <content type="text"><![CDATA[部署cinder存储节点安装cinder存储节点为ceph的节点，一般会安装在mon所在的节点上 12# 在全部存储节点安装cinder服务，以compute01节点为例[root@compute01 ~]# yum install -y openstack-cinder targetcli python-keystone 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# 在全部存储节点操作，以compute01节点为例；# 注意”my_ip”参数，根据节点修改；# 注意cinder.conf文件的权限：root:cinder[root@compute01 ~]# cp /etc/cinder/cinder.conf /etc/cinder/cinder.conf.bak[root@compute01 ~]# egrep -v &quot;^$|^#&quot; /etc/cinder/cinder.conf[DEFAULT]state_path = /var/lib/cindermy_ip = 存储节点ipglance_api_servers = http://controller:9292auth_strategy = keystoneenabled_backends = cephtransport_url=rabbit://openstack:123456@controller01:5672,controller02:5672[backend][backend_defaults][barbican][brcd_fabric_example][cisco_fabric_example][coordination][cors][database]connection = mysql+pymysql://cinder:123456@controller01/cinder[fc-zone-manager][healthcheck][key_manager][keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller01:11211,controller02:11211auth_type = passwordproject_domain_id = defaultuser_domain_id = defaultproject_name = serviceusername = cinderpassword = cinder[matchmaker_redis][nova][oslo_concurrency]lock_path = $state_path/tmp[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][oslo_reports][oslo_versionedobjects][profiler][sample_remote_file_source][service_user][ssl][vault] 设置开机自启动123## 全部存储节点设置# 开机启动[root@compute01 ~]# systemctl enable openstack-cinder-volume.service target.service 对接ceph做准备创建pool123456789101112131415161718# Ceph默认使用pool的形式存储数据，pool是对若干pg进行组织管理的逻辑划分，pg里的对象被映射到不同的osd，因此pool分布到整个集群里。# 可以将不同的数据存入1个pool，但如此操作不便于客户端数据区分管理，因此一般是为每个客户端分别创建pool。#创建三个pool，volumes，images，vms#我们是90个osd，2个副本，这样结合官网公式，算出pg数[root@computer01 ceph]# ceph osd pool create volumes 2048pool &apos;volumes&apos; created[root@computer01 ceph]# ceph osd pool create vms 1024pool &apos;vms&apos; created[root@computer01 ceph]# ceph osd pool create images 256pool &apos;images&apos; created##新创建的池必须在使用之前进行初始化。使用该rbd工具初始化池：rbd pool init volumesrbd pool init imagesrbd pool init vms 安装Ceph客户端123456# glance-api服务所在节点需要安装python-rbd；# 这里glance-api服务运行在3个控制节点，以controller01节点为例[root@controller01 ~]# yum install python-rbd -y# cinder-volume与nova-compute服务所在节点需要安装ceph-common；cinder-backup也需要安装；[root@compute01 ~]# yum install ceph-common -y 授权设置创建用户12345# ceph默认启用cephx authentication（见ceph.conf），需要为nova/cinder与glance客户端创建新的用户并授权；# 可在ceph的管理节点上分别为运行cinder-volume与glance-api服务的节点创建client.glance与client.cinder用户并设置权限；# 针对pool设置权限，pool名对应创建的pool[root@computer01 ~]# ceph auth get-or-create client.cinder mon &apos;allow r&apos; osd &apos;allow class-read object_prefix rbd_children, allow rwx pool=volumes, allow rwx pool=vms, allow rx pool=images&apos; [root@computer01 ~]# ceph auth get-or-create client.glance mon &apos;allow r&apos; osd &apos;allow class-read object_prefix rbd_children, allow rwx pool=images&apos; 推送client.glance秘钥12345678# 将创建client.glance用户生成的秘钥推送到运行glance-api服务的节点[root@computer01 ceph]# ceph auth get-or-create client.glance | tee /etc/ceph/ceph.client.glance.keyring[root@computer01 ceph]# ceph auth get-or-create client.glance | ssh root@controller01 tee /etc/ceph/ceph.client.glance.keyring[root@computer01 ceph]# ceph auth get-or-create client.glance | ssh root@controller02 tee /etc/ceph/ceph.client.glance.keyring# 同时修改秘钥文件的属主与用户组[root@controller01 ~]# chown glance:glance /etc/ceph/ceph.client.glance.keyring[root@controller02 ~]# chown glance:glance /etc/ceph/ceph.client.glance.keyring 推送client.cinder秘钥1234567# 将创建client.cinder用户生成的秘钥推送到运行cinder-volume服务的节点[root@computer01 ceph]# ceph auth get-or-create client.cinder | ssh root@computer03 tee /etc/ceph/ceph.client.cinder.keyring[root@computer01 ceph]# ceph auth get-or-create client.cinder | ssh root@computer03 tee /etc/ceph/ceph.client.cinder.keyring[root@computer01 ceph]# ceph auth get-or-create client.cinder | ssh root@computer03 tee /etc/ceph/ceph.client.cinder.keyring# 同时修改秘钥文件的属主与用户组chown cinder:cinder /etc/ceph/ceph.client.cinder.keyring 推送client.cinder秘钥(nova-compute)123ceph auth get-or-create client.cinder | ssh &#123;your-nova-compute-server&#125; sudo tee /etc/ceph/ceph.client.cinder.keyringchown cinder:cinder libvirt秘钥123456789101112131415161718192021##nova-compute所在节点需要将client.cinder用户的秘钥文件存储到libvirt中；当基于ceph后端的cinder卷被attach到虚拟机实例时，libvirt需要用到该秘钥以访问ceph集群；[root@computer01 ceph]# ceph auth get-key client.cinder | ssh root@computer13 tee /etc/ceph/client.cinder.key##将秘钥加入libvirt# 首先生成1个uuid，全部计算节点可共用此uuid（其他节点不用操作此步）；# uuid后续配置nova.conf文件时也会用到，请保持一致uuidgen457eb676-33da-42ec-9a8c-9293d545c337cat &gt; secret.xml &lt;&lt;EOF&lt;secret ephemeral=&apos;no&apos; private=&apos;no&apos;&gt; &lt;uuid&gt;457eb676-33da-42ec-9a8c-9293d545c337&lt;/uuid&gt; &lt;usage type=&apos;ceph&apos;&gt; &lt;name&gt;client.cinder secret&lt;/name&gt; &lt;/usage&gt;&lt;/secret&gt;EOFsudo virsh secret-define --file secret.xmlSecret 457eb676-33da-42ec-9a8c-9293d545c337 createdsudo virsh secret-set-value --secret 457eb676-33da-42ec-9a8c-9293d545c337 --base64 $(cat client.cinder.key) &amp;&amp; rm client.cinder.key secret.xml]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Neutron计算节点]]></title>
    <url>%2Fposts%2F8u79la9c.html</url>
    <content type="text"><![CDATA[部署安装neutron-linuxbridge12# 在全部计算节点安装neutro-linuxbridge服务，以compute01节点为例[root@compute01 ~]# yum install openstack-neutron-linuxbridge ebtables ipset -y 配置neutron.conf123456789101112131415161718192021222324252627282930313233343536373839# 在全部计算节点操作，以computer01节点为例；# 注意”bind_host”参数，根据节点修改；# 注意neutron.conf文件的权限：root:neutron[root@compute01 ~]# cp /etc/neutron/neutron.conf /etc/neutron/neutron.conf.bak[root@compute01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/neutron.conf[DEFAULT]state_path = /var/lib/neutronbind_host = 本机ip地址auth_strategy = keystone# 前端采用haproxy时，服务连接rabbitmq会出现连接超时重连的情况，可通过各服务与rabbitmq的日志查看；# transport_url = rabbit://openstack:rabbitmq_pass@controller:5673# rabbitmq本身具备集群机制，官方文档建议直接连接rabbitmq集群；但采用此方式时服务启动有时会报错，原因不明；如果没有此现象，强烈建议连接rabbitmq直接对接集群而非通过前端haproxytransport_url=rabbit://openstack:rabbitmq_pass@controller01:5672,controller02:5672[agent][cors][database][keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller01:11211,controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = neutron_pass[matchmaker_redis][nova][oslo_concurrency]lock_path = $state_path/lock[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][quotas][ssl] 配置linuxbridge_agent.ini1234567891011121314# 在全部计算节点操作，以compute01节点为例；# linuxbridge_agent.ini文件的权限：root:neutron[root@compute01 ~]# cp /etc/neutron/plugins/ml2/linuxbridge_agent.ini /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak [root@compute01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/plugins/ml2/linuxbridge_agent.ini##修改下面的几个配置[linux_bridge]physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME[vxlan]enable_vxlan = false[securitygroup]# ...enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver 12345678# bridge：是否允许桥接；# 如果“sysctl -p”加载不成功，报” No such file or directory”错误，需要加载内核模块“br_netfilter”；# 命令“modinfo br_netfilter”查看内核模块信息；# 命令“modprobe br_netfilter”加载内核模块[root@compute01 ~]# echo &quot;# bridge&quot; &gt;&gt; /etc/sysctl.conf[root@compute01 ~]# echo &quot;net.bridge.bridge-nf-call-iptables = 1&quot; &gt;&gt; /etc/sysctl.conf[root@compute01 ~]# echo &quot;net.bridge.bridge-nf-call-ip6tables = 1&quot; &gt;&gt; /etc/sysctl.conf[root@compute01 ~]# sysctl -p 配置nova.conf123456789101112# 在全部计算节点操作，以compute01节点为例；# 配置只涉及nova.conf的”[neutron]”字段[root@compute ~]# vim /etc/nova/nova.confurl = http://controller:9696auth_url = http://controller:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = NEUTRON_PASS 启动服务12345678# nova.conf文件已变更，首先需要重启全部计算节点的nova服务[root@compute01 ~]# systemctl restart openstack-nova-compute.service# 开机启动[root@compute01 ~]# systemctl enable neutron-linuxbridge-agent.service# 启动[root@compute01 ~]# systemctl restart neutron-linuxbridge-agent.service 验证123456# 任意控制节点（或具备客户端的节点）操作[root@controller01 ~]# . admin-openrc# 查看neutron相关的agent;# 或：openstack network agent list --agent-type linux-bridge[root@controller01 ~]# openstack network agent list]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Nova计算节点]]></title>
    <url>%2Fposts%2F8yj9ra5z.html</url>
    <content type="text"><![CDATA[初始化在所有计算节点，关闭防火墙，selinux，配置hosts，并安装openstack客户端包 123yum install centos-release-openstack-rocky -yyum upgrade -yyum install python-openstackclient openstack-utils openstack-selinux -y 部署安装nova-compute12# 在全部计算节点安装nova-compute服务，以compute01节点为例[root@compute01 ~]# yum install openstack-nova-compute -y 配置nova.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# 在全部计算节点操作，以computer01节点为例；# 注意”my_ip”参数，根据节点修改；# 注意nova.conf文件的权限：root:nova[root@compute01 ~]# cp /etc/nova/nova.conf /etc/nova/nova.conf.bak [root@compute01 ~]# egrep -v &quot;^$|^#&quot; /etc/nova/nova.conf [DEFAULT]my_ip=172.30.200.41use_neutron=truefirewall_driver=nova.virt.firewall.NoopFirewallDriverenabled_apis=osapi_compute,metadata# 前端采用haproxy时，服务连接rabbitmq会出现连接超时重连的情况，可通过各服务与rabbitmq的日志查看；# transport_url=rabbit://openstack:rabbitmq_pass@controller:5673# rabbitmq本身具备集群机制，官方文档建议直接连接rabbitmq集群；但采用此方式时服务启动有时会报错，原因不明；如果没有此现象，强烈建议连接rabbitmq直接对接集群而非通过前端haproxytransport_url=rabbit://openstack:rabbitmq_pass@controller01:5672,controller02:5672[api]auth_strategy=keystone[api_database][barbican][cache][cells][cinder][compute][conductor][console][consoleauth][cors][crypto][database][devices][ephemeral_storage_encryption][filter_scheduler][glance]api_servers=http://controller:9292[guestfs][healthcheck][hyperv][ironic][key_manager][keystone][keystone_authtoken]auth_url = http://controller:5000memcached_servers = controller01:11211,controller02:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = novapassword = 123456[libvirt]# 通过“egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo”命令查看主机是否支持硬件加速，返回1或者更大的值表示支持，返回0表示不支持；# 支持硬件加速使用”kvm”类型，不支持则使用”qemu”类型；# 一般虚拟机不支持硬件加速virt_type=qemu[matchmaker_redis][metrics][mks][neutron][notifications][osapi_v21][oslo_concurrency]lock_path=/var/lib/nova/tmp[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][pci][placement]os_region_name=RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = 123456[quota][rdp][remote_debug][scheduler][serial_console][service_user][spice][upgrade_levels][vault][vendordata_dynamic_auth][vmware][vnc]enabled=truevncserver_listen=0.0.0.0vncserver_proxyclient_address=$my_ip# 因某些未做主机绑定的客户端不能访问”controller”名字，改为使用具体的ip地址novncproxy_base_url=http://controller:6080/vnc_auto.html[workarounds][wsgi][xenserver][xvp] 启动服务1234567891011# 全部计算节点操作；# 开机启动[root@compute01 ~]# systemctl enable libvirtd.service openstack-nova-compute.service# 启动[root@compute01 ~]# systemctl restart libvirtd.service[root@compute01 ~]# systemctl restart openstack-nova-compute.service查看状态[root@compute01 ~]# systemctl status libvirtd.service[root@compute01 ~]# systemctl status openstack-nova-compute.service 向cell数据库添加计算节点12345# 在任意控制节点操作[root@controller01 ~]# . admin-openrc# 确认数据库中含有主机[root@controller01 ~]# openstack compute service list --service nova-compute 手工发现计算节点12# 手工发现计算节点主机，即添加到cell数据库[root@controller01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova 自动发现计算节点12345678910# 在全部控制节点操作；# 为避免新加入计算节点时，手动执行注册操作”nova-manage cell_v2 discover_hosts”，可设置控制节点定时自动发现主机；# 涉及控制节点nova.conf文件的[scheduler]字段；# 如下设置自动发现时间为5min，可根据实际环境调节[root@controller01 ~]# vim /etc/nova/nova.conf[scheduler]discover_hosts_in_cells_interval=300# 重启nova服务，配置生效[root@controller01 ~]# systemctl restart openstack-nova-api.service]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Cinder控制节点集群]]></title>
    <url>%2Fposts%2F4jh98aa9.html</url>
    <content type="text"><![CDATA[Cinder架构原理当有用户或Nova compute提供创建卷的请求时，首先由Cinder API接收请求，然后以消息队列的形式发送给Cinder Scheduler来调用，Cinder Scheduler 侦听到来自Cinder API的消息队列后，到数据库中取查询当前存储节点的状态信息，并根据预定策略选择卷的最佳volume service节点，然后将调度的结果发布出来给volume service来调用，当volume service收到volume scheduler 的调度结果后，会去查找volume providers, 从而在特定存储节点上创建相关的卷，然后将相关结果返回给用户，同时将修改的数据写入到数据库中。 部署创建cinder数据库123456789# 在任意控制节点创建数据库，后台数据自动同步，以controller01节点为例；[root@controller01 ~]# mysql -uroot -pmysql_passMariaDB [(none)]&gt; CREATE DATABASE cinder;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON cinder.* TO &apos;cinder&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON cinder.* TO &apos;cinder&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;MariaDB [(none)]&gt; flush privileges;MariaDB [(none)]&gt; exit; 创建cinder-api123# 在任意控制节点操作，以controller01节点为例；# 调用cinder服务需要认证信息，加载环境变量脚本即可[root@controller01 ~]# . admin-openrc 创建cinder用户123# service项目已在glance章节创建；# neutron用户在”default” domain中[root@controller01 ~]# openstack user create --domain default --password=123456 cinder cinder赋权12# 为cinder用户赋予admin权限[root@controller01 ~]# openstack role add --project service --user cinder admin 创建cinder服务实体1234# cinder服务实体类型”volume”；# 创建v2/v3两个服务实体[root@controller01 ~]# openstack service create --name cinderv2 --description &quot;OpenStack Block Storage&quot; volumev2[root@controller01 ~]# openstack service create --name cinderv3 --description &quot;OpenStack Block Storage&quot; volumev3 创建cinder-api123456789101112# 注意--region与初始化admin用户时生成的region一致；# api地址统一采用vip，如果public/internal/admin分别使用不同的vip，请注意区分；# cinder-api 服务类型为volume；# cinder-api后缀为用户project-id，可通过”openstack project list”查看# v2 public api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev2 public http://controller01:8776/v2/%\(project_id\)s# v2 internal api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev2 internal http://controller01:8776/v2/%\(project_id\)s# v2 admin api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev2 admin http://controller01:8776/v2/%\(project_id\)s 12345678# v3 public api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev3 public http://controller01:8776/v3/%\(project_id\)s# v3 internal api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev3 internal http://controller01:8776/v3/%\(project_id\)s# v3 admin api[root@controller01 ~]# openstack endpoint create --region RegionOne volumev3 admin http://controller01:8776/v3/%\(project_id\)s 安装cinder12# 在全部控制节点安装cinder服务，以controller01节点为例[root@controller01 ~]# yum install openstack-cinder -y 配置cinder.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 在全部控制节点操作，以controller01节点为例；# 注意”my_ip”参数，根据节点修改；# 注意cinder.conf文件的权限：root:cinder[root@controller01 ~]# cp /etc/cinder/cinder.conf /etc/cinder/cinder.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/cinder/cinder.conf# 在全部控制节点操作，以controller01节点为例；# 注意”my_ip”参数，根据节点修改；# 注意cinder.conf文件的权限：root:cinder[root@controller01 ~]# cp /etc/cinder/cinder.conf /etc/cinder/cinder.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/cinder/cinder.conf[DEFAULT]state_path = /var/lib/cindermy_ip = 192.168.182.131glance_api_servers = http://controller:9292auth_strategy = keystoneosapi_volume_listen = $my_iposapi_volume_listen_port = 8776log_dir = /var/log/cinder# 前端采用haproxy时，服务连接rabbitmq会出现连接超时重连的情况，可通过各服务与rabbitmq的日志查看；# transport_url = rabbit://openstack:rabbitmq_pass@controller:5673# rabbitmq本身具备集群机制，官方文档建议直接连接rabbitmq集群；但采用此方式时服务启动有时会报错，原因不明；如果没有此现象，强烈建议连接rabbitmq直接对接集群而非通过前端haproxytransport_url=rabbit://openstack:rabbitmq_pass@controller01:5672,controller02:5672[backend][backend_defaults][barbican][brcd_fabric_example][cisco_fabric_example][coordination][cors][database]connection = mysql+pymysql://cinder:123456@controller/cinder[fc-zone-manager][healthcheck][key_manager][keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller01:11211,controller02:11211auth_type = passwordproject_domain_id = defaultuser_domain_id = defaultproject_name = serviceusername = cinderpassword = cinder_pass[matchmaker_redis][nova][oslo_concurrency]lock_path = $state_path/tmp[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][oslo_reports][oslo_versionedobjects][profiler][service_user][ssl][vault] 配置nova.conf123456# 在全部控制节点操作，以controller01节点为例；# 配置只涉及nova.conf的”[cinder]”字段；# 加入对应region[root@controller01 ~]# vim /etc/nova/nova.conf[cinder]os_region_name=RegionOne 同步cinder数据库123# 任意控制节点操作；# 忽略部分”deprecation”信息[root@controller01 ~]# su -s /bin/sh -c &quot;cinder-manage db sync&quot; cinder 启动服务1234567891011# 全部控制节点操作；# 变更nova配置文件，首先需要重启nova服务[root@controller01 ~]# systemctl restart openstack-nova-api.service# 开机启动[root@controller01 ~]# systemctl enable openstack-cinder-api.service openstack-cinder-scheduler.service# 启动[root@controller01 ~]# systemctl restart openstack-cinder-api.service[root@controller01 ~]# systemctl restart openstack-cinder-scheduler.service 验证12345[root@controller01 ~]# . admin-openrc # 查看agent服务；# 或：cinder service-list[root@controller01 ~]# openstack volume service list]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Horizon集群]]></title>
    <url>%2Fposts%2F08sdlf09.html</url>
    <content type="text"><![CDATA[介绍Horizon是一个web接口，使得云平台管理员以及用户可以管理不同的OpenStack资源以及服务。 提供一个Web界面操作OpenStack系统 使用Django框架基于OpenStack API开发 支持将session存储在DB、Memcached 支持集群 部署安装dashboard12# 在全部控制节点安装dashboard服务，以controller01节点为例[root@controller01 ~]# yum install openstack-dashboard -y 配置local_settings12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# 在全部控制节点操作，以controller01节点为例；# 注意local_settings文件的权限：root:apache[root@controller01 ~]# cp /etc/openstack-dashboard/local_settings /etc/openstack-dashboard/local_settings.bak# 列出修改处的行数[root@controller01 ~]# vim /etc/openstack-dashboard/local_settings# 允许所有主机访问38 ALLOWED_HOSTS = [&apos;*&apos;, &apos;localhost&apos;]# 强制使用相应版本的api64 OPENSTACK_API_VERSIONS = &#123;65 # &quot;data-processing&quot;: 1.1,66 &quot;identity&quot;: 3,67 &quot;image&quot;: 2,68 &quot;volume&quot;: 2,69 # &quot;compute&quot;: 2,70 &#125;# 在多域模式运行时开启，登陆时除账号/密码外还需要输入域75 OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True# 取消注释97 OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &apos;Default&apos;# 取消158~163行注释，并使用memcached集群SESSION_ENGINE = &apos;django.contrib.sessions.backends.cache&apos;158 CACHES = &#123;159 &apos;default&apos;: &#123;160 &apos;BACKEND&apos;: &apos;django.core.cache.backends.memcached.MemcachedCache&apos;,161 &apos;LOCATION&apos;: &apos;controller01:11211,controller02:11211,controller03:11211&apos;,162 &#125;,163 &#125;# 注释165~169行165 #CACHES = &#123;166 # &apos;default&apos;: &#123;167 # &apos;BACKEND&apos;: &apos;django.core.cache.backends.locmem.LocMemCache&apos;,168 # &#125;,169 #&#125;# 监听地址使用vip；# keystone认证使用v3；# 设置通过dashboard创建的用户具有”user”角色权限#选的第一个provider网络，还需要禁用三层的一些网络插件OPENSTACK_NEUTRON_NETWORK = &#123; ... &apos;enable_router&apos;: False, &apos;enable_quotas&apos;: False, &apos;enable_distributed_router&apos;: False, &apos;enable_ha_router&apos;: False, &apos;enable_lb&apos;: False, &apos;enable_firewall&apos;: False, &apos;enable_vpn&apos;: False, &apos;enable_fip_topology_check&apos;: False,&#125;# 修改时区463 TIME_ZONE = &quot;Asia/Shanghai&quot; 配置openstack-dashboard.conf1234# 在全部控制节点操作；# 赋权，在第3行后新增” WSGIApplicationGroup %&#123;GLOBAL&#125;”[root@controller01 ~]# cp /etc/httpd/conf.d/openstack-dashboard.conf /etc/httpd/conf.d/openstack-dashboard.conf.bak[root@controller01 ~]# sed -i &apos;3a WSGIApplicationGroup\ %&#123;GLOBAL&#125;&apos; /etc/httpd/conf.d/openstack-dashboard.conf 启动服务12# 全部控制节点操作；[root@controller01 ~]# systemctl restart httpd.service memcached.service 验证登陆：IP/dashboard 域/账号/密码：default/admin/admin_pass，或：default/demo/demo_pass 想省略dashboard，需要在httpd中添加 123cd /etc/httpd/conf.d/cat openstack-dashboard.conf RedirectMatch permanent ^/$ /dashboard]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Neutron集群]]></title>
    <url>%2Fposts%2F09o18ih4.html</url>
    <content type="text"><![CDATA[Neutron概述​ Neutron是 OpenStack项目中负责提供网络服务的组件，它基于软件定义网络的思想，实现了网络虚拟化下的资源管理。Neutron 的设计目标是实现“网络即服务（Networking as a Service）”，在设计上遵循了基于 SDN 实现网络虚拟化的原则，在实现上充分利用了 Linux 系统上的各种网络相关的技术。 Neutron功能二层交换​ Neutron支持多种虚拟交换机，一般使用Linux Bridge和Open vSwitch创建传统的VLAN网络，以及基于隧道技术的Overlay网络，如VxLAN和GRE（Linux Bridge 目前只支持 VxLAN）。 三层路由​ Neutron从Juno版开始正式加入的DVR(Distributed Virtual Router)服务，它将原本集中在网络节点的部分服务分散到了计算节点上。可以通过namespace中使用ip route或者iptables实现路由或NAT，也可以通过openflow给OpenvSwitch下发流表来实现。 负载均衡​ LBaaS 支持多种负载均衡产品和方案，不同的实现以 Plugin 的形式集成到 Neutron，通过HAProxy来实现。 防火墙​ Neutron有两种方式来保障instance和网络的安全性，分别是安全组以及防火墙功能，均可以通过iptables来实现，前者是限制进出instance的网络包，后者是进出虚拟路由器的网络包。 部署创建neutron数据库123456789# 在任意控制节点创建数据库，后台数据自动同步，以controller01节点为例；[root@controller01 ~]# mysql -u root -p123456MariaDB [(none)]&gt; CREATE DATABASE neutron;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO &apos;neutron&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON neutron.* TO &apos;neutron&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456;MariaDB [(none)]&gt; flush privileges;MariaDB [(none)]&gt; exit; 创建neutron-api123# 在任意控制节点操作，以controller01节点为例；# 调用neutron服务需要认证信息，加载环境变量脚本即可[root@controller01 ~]# . admin-openrc 创建neutron用户12345678910111213# service项目已在glance章节创建；# neutron用户在”default” domain中[root@controller01 ~]# openstack user create --domain default --password=neutron neutron+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 5434a7475b234a5f8c26bfe411640316 || name | neutron || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+ neutron赋权12# 为neutron用户赋予admin权限[root@controller01 ~]# openstack role add --project service --user neutron admin 创建neutron服务实体12# neutron服务实体类型”network”[root@controller01 ~]# openstack service create --name neutron --description &quot;OpenStack Networking&quot; network 创建neutron-api12345# 注意--region与初始化admin用户时生成的region一致；# api地址统一采用vip，如果public/internal/admin分别使用不同的vip，请注意区分；# neutron-api 服务类型为network；# public api[root@controller01 ~]# openstack endpoint create --region RegionOne network public http://controller01:9696 12# internal api[root@controller01 ~]# openstack endpoint create --region RegionTest network internal http://controller:9696 12# admin api[root@controller01 ~]# openstack endpoint create --region RegionTest network admin http://controller:9696 安装neutron1234# 安装Provider networks# 在全部控制节点安装neutron相关服务，以controller01节点为例[root@controller01 ~]# yum install openstack-neutron openstack-neutron-ml2 \ openstack-neutron-linuxbridge ebtables 配置neutron.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 在全部控制节点操作，以controller01节点为例；# 注意”bind_host”参数，根据节点修改；# 注意neutron.conf文件的权限：root:neutron[root@controller01 ~]# cp /etc/neutron/neutron.conf /etc/neutron/neutron.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/neutron.conf[DEFAULT]bind_host = 10.21.0.36auth_strategy = keystonecore_plugin = ml2service_plugins =notify_nova_on_port_status_changes = truenotify_nova_on_port_data_changes = truetransport_url=rabbit://openstack:d&amp;OmJVoX@bjxg-controller01:5672,bjxg-controller02:5672[agent][cors][database]connection = mysql+pymysql://neutron:neutron_d&amp;OmJVoX@bjxg-controller/neutron[keystone_authtoken]www_authenticate_uri = http://bjxg-controller:5000auth_url = http://bjxg-controller:5000memcached_servers = bjxg-controller:11211,bjxg-controller02:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = neutron[matchmaker_redis][nova]auth_url = http://bjxg-controller:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionBjxgproject_name = serviceusername = novapassword = nova[oslo_concurrency]lock_path = /var/lib/neutron/tmp[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][quotas][ssl] 配置ml2_conf.ini1234567891011121314151617181920212223# 在全部控制节点操作，以controller01节点为例；# ml2_conf.ini文件的权限：root:neutron[root@controller01 ~]# cp /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugins/ml2/ml2_conf.ini.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/plugins/ml2/ml2_conf.ini[DEFAULT][l2pop][ml2]type_drivers = flat,vlantenant_network_types =mechanism_drivers = linuxbridgeextension_drivers = port_security[ml2_type_flat]flat_networks = provider[ml2_type_geneve][ml2_type_gre][ml2_type_vlan]network_vlan_ranges = provider:2000:2999[ml2_type_vxlan][securitygroup]enable_ipset = true# 服务初始化调用ml2_conf.ini中的配置，但指向/etc/neutron/olugin.ini文件[root@controller01 ~]# ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini 配置linuxbridge_agent.ini1234567891011121314# 在全部控制节点操作，以controller01节点为例；# linuxbridge_agent.ini文件的权限：root:neutron[root@controller01 ~]# cp /etc/neutron/plugins/ml2/linuxbridge_agent.ini /etc/neutron/plugins/ml2/linuxbridge_agent.ini.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/plugins/ml2/linuxbridge_agent.ini[DEFAULT][agent][linux_bridge]physical_interface_mappings = provider:em1[network_log][securitygroup]enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver[vxlan]enable_vxlan = false 12345678# bridge：是否允许桥接；# 如果“sysctl -p”加载不成功，报” No such file or directory”错误，需要加载内核模块“br_netfilter”；# 命令“modinfo br_netfilter”查看内核模块信息；# 命令“modprobe br_netfilter”加载内核模块[root@controller01 ~]# echo &quot;# bridge&quot; &gt;&gt; /etc/sysctl.conf[root@controller01 ~]# echo &quot;net.bridge.bridge-nf-call-iptables = 1&quot; &gt;&gt; /etc/sysctl.conf[root@controller01 ~]# echo &quot;net.bridge.bridge-nf-call-ip6tables = 1&quot; &gt;&gt; /etc/sysctl.conf[root@controller01 ~]# modprobe br_netfilter &amp;&amp; sysctl -p 配置dhcp_agent.ini1234567891011# 在全部控制节点操作，以controller01节点为例；# 使用dnsmasp提供dhcp服务；# dhcp_agent.ini文件的权限：root:neutron[root@controller01 ~]# cp /etc/neutron/dhcp_agent.ini /etc/neutron/dhcp_agent.ini.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/dhcp_agent.ini[DEFAULT]interface_driver = linuxbridgedhcp_driver = neutron.agent.linux.dhcp.Dnsmasqenable_isolated_metadata = true[agent][ovs] 配置metadata_agent.ini12345678910# 在全部控制节点操作，以controller01节点为例；# metadata_proxy_shared_secret：与/etc/nova/nova.conf文件中参数一致；# metadata_agent.ini文件的权限：root:neutron[root@controller01 ~]# cp /etc/neutron/metadata_agent.ini /etc/neutron/metadata_agent.ini.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/neutron/metadata_agent.ini[DEFAULT]nova_metadata_host = bjxg-controllermetadata_proxy_shared_secret = METADATA_SECRET[agent][cache] 配置nova.conf12345678910111213141516# 在全部控制节点操作，以controller01节点为例；# 配置只涉及nova.conf的”[neutron]”字段；# metadata_proxy_shared_secret：与/etc/neutron/metadata_agent.ini文件中参数一致[root@controller01 ~]# vim /etc/nova/nova.conf[neutron]url = http://bjxg-controller:9696auth_url = http://bjxg-controller:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionBjxgproject_name = serviceusername = neutronpassword = neutronservice_metadata_proxy = truemetadata_proxy_shared_secret = METADATA_SECRET 同步neutron数据库12# 任意控制节点操作；[root@controller01 ~]# su -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron 启动服务12345678910111213141516# 全部控制节点操作；# 变更nova配置文件，首先需要重启nova服务[root@controller01 ~]# systemctl restart openstack-nova-api.service# 开机启动[root@controller01 ~]# systemctl enable neutron-server.service \ neutron-linuxbridge-agent.service neutron-dhcp-agent.service \ neutron-metadata-agent.service# 启动[root@controller01 ~]# systemctl restart neutron-server.service[root@controller01 ~]# systemctl restart neutron-linuxbridge-agent.service[root@controller01 ~]# systemctl restart neutron-l3-agent.service[root@controller01 ~]# systemctl restart neutron-dhcp-agent.service[root@controller01 ~]# systemctl restart neutron-metadata-agent.service 验证1234567[root@controller01 ~]# . admin-openrc # 查看加载的扩展服务[root@controller01 ~]# openstack extension list --network# 查看agent服务[root@controller01 ~]# openstack network agent list]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Nova控制节点集群]]></title>
    <url>%2Fposts%2F6pakda5a.html</url>
    <content type="text"><![CDATA[nova介绍Nova 是 OpenStack 最核心的服务，负责维护和管理云环境的计算资源。OpenStack 作为 IaaS 的云操作系统，虚拟机生命周期管理也就是通过 Nova 来实现的。 用途与功能 :1) 实例生命周期管理2) 管理计算资源3) 网络和认证管理4)REST 风格的 API5) 异步的一致性通信6)Hypervisor 透明:支持Xen,XenServer/XCP,KVM, UML,VMware vSphere and Hyper-V 部署创建nova相关数据库123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 在任意控制节点创建数据库，后台数据自动同步，以controller01节点为例；# nova服务含4个数据库，统一授权到nova用户；# placement主要涉及资源统筹，较常用的api接口是获取备选资源与claim资源等[root@controller01 ~]# mysql -u root -pEnter password: Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 68Server version: 10.2.29-MariaDB-log MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database |+--------------------+| glance || information_schema || keystone || mysql || performance_schema |+--------------------+5 rows in set (0.00 sec)MariaDB [(none)]&gt; CREATE DATABASE nova_api;Query OK, 1 row affected (0.01 sec)MariaDB [(none)]&gt; CREATE DATABASE nova;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; CREATE DATABASE nova_cell0;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; CREATE DATABASE nova_placement;Query OK, 1 row affected (0.01 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_api.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.01 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_cell0.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_placement.* TO &apos;nova&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON nova_placement.* TO &apos;nova&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)MariaDB [(none)]&gt; exit; Bye 创建计算服务凭据创建nova用户1234567891011121314151617181920212223[root@controller01 ~]# . admin-openrc[root@controller01 ~]# openstack user create --domain default --password=123456 nova +---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | de3f2e2741ec4fe594df50947b15c679 || name | nova || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+[root@controller01 ~]# openstack user create --domain default --password=123456 placement +---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | b9c6f0054cbb4f84877eb285bef57ced || name | placement || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+ 赋权12[root@controller01 ~]# openstack role add --project service --user nova admin [root@controller01 ~]# openstack role add --project service --user placement admin 创建nova/placement服务实体1234567891011121314151617181920[root@controller01 ~]# openstack service create --name nova --description &quot;OpenStack Compute&quot; compute+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | OpenStack Compute || enabled | True || id | f3b0b1d757c7426bb2863a9128fef978 || name | nova || type | compute |+-------------+----------------------------------+[root@controller01 ~]# openstack service create --name placement --description &quot;Placement API&quot; placement+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Placement API || enabled | True || id | 94fd6d420f4348aaad3abd682c7b473b || name | placement || type | placement |+-------------+----------------------------------+ 创建nova/placement-api1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 注意--region与初始化admin用户时生成的region一致；# api地址统一采用vip，如果public/internal/admin分别使用不同的vip，请注意区分；# nova-api 服务类型为compute，placement-api服务类型为placement；# nova public api[root@controller01 ~]# openstack endpoint create --region RegionOne compute public http://controller01:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | a22329b89cba44a997b50da400c0843d || interface | public || region | RegionOne || region_id | RegionOne || service_id | f3b0b1d757c7426bb2863a9128fef978 || service_name | nova || service_type | compute || url | http://controller01:8774/v2.1 |+--------------+----------------------------------+[root@controller01 ~]# openstack endpoint create --region RegionOne compute internal http://controller01:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 38b56b4c5bf742fbbdbcee017b8d6eb7 || interface | internal || region | RegionOne || region_id | RegionOne || service_id | f3b0b1d757c7426bb2863a9128fef978 || service_name | nova || service_type | compute || url | http://controller01:8774/v2.1 |+--------------+----------------------------------+[root@controller01 ~]# openstack endpoint create --region RegionOne compute admin http://controller01:8774/v2.1+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 978179c1c3a6453da009429d6e7017d2 || interface | admin || region | RegionOne || region_id | RegionOne || service_id | f3b0b1d757c7426bb2863a9128fef978 || service_name | nova || service_type | compute || url | http://controller01:8774/v2.1 |+--------------+----------------------------------+ 123[root@controller01 ~]# openstack endpoint create --region RegionOne placement public http://controller01:8778[root@controller01 ~]# openstack endpoint create --region RegionOne placement internal http://controller01:8778[root@controller01 ~]# openstack endpoint create --region RegionOne placement admin http://controller01:8778 安装nova1234# 在全部控制节点安装nova相关服务，以controller01节点为例[root@controller01 ~]# yum install openstack-nova-api openstack-nova-conductor \ openstack-nova-console openstack-nova-novncproxy \ openstack-nova-scheduler openstack-nova-placement-api -y 配置nova.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106# 在全部控制节点操作，以controller01节点为例；# 注意”my_ip”参数，根据节点修改；# 注意nova.conf文件的权限：root:nova[root@controller01 ~]# cp /etc/nova/nova.conf /etc/nova/nova.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/nova/nova.conf[DEFAULT]my_ip=10.21.0.36use_neutron=truefirewall_driver=nova.virt.firewall.NoopFirewallDriverenabled_apis=osapi_compute,metadataosapi_compute_listen=$my_iposapi_compute_listen_port=8774metadata_listen=$my_ipmetadata_listen_port=8775# 前端采用haproxy时，服务连接rabbitmq会出现连接超时重连的情况，可通过各服务与rabbitmq的日志查看；# # transport_url=rabbit://openstack:rabbitmq_pass@controller:5673# # rabbitmq本身具备集群机制，官方文档建议直接连接rabbitmq集群；但采用此方式时服务启动有时会报错，原因不明；如果没有此现象，强烈建议连接rabbitmq直接对接集群而非通过前端haproxytransport_url=rabbit://openstack:123456@controller01:5672,controller02:5672[api]auth_strategy=keystone[api_database]connection=mysql+pymysql://nova:123456@controller01/nova_api[barbican][cache]backend=oslo_cache.memcache_poolenabled=Truememcache_servers=controller01:11211,controller02:11211[cells][cinder][compute][conductor][console][consoleauth][cors][crypto][database]connection = mysql+pymysql://nova:nova_d&amp;OmJVoX@controller01/nova[devices][ephemeral_storage_encryption][filter_scheduler][glance]api_servers = http://controller01:9292[guestfs][healthcheck][hyperv][ironic][key_manager][keystone][keystone_authtoken]auth_url = http://controller:5000/v3#auth_url = http://controller:35357memcached_servers = controller01:11211,controller02:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = novapassword = nova[libvirt][matchmaker_redis][metrics][mks][neutron][notifications][osapi_v21][oslo_concurrency]lock_path=/var/lib/nova/tmp[oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][pci][placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = placement[quota][rdp][remote_debug][scheduler][serial_console][service_user][spice][upgrade_levels][vault][vendordata_dynamic_auth][vmware][vnc]enabled=trueserver_listen=$my_ipserver_proxyclient_address=$my_ipnovncproxy_base_url=http://$my_ip:6080/vnc_auto.htmlnovncproxy_host=$my_ipnovncproxy_port=6080[workarounds][wsgi][xenserver][xvp] 配置00-nova-placement-api.conf123456789101112131415161718192021# 在全部控制节点操作，以controller01节点为例；# 注意根据不同节点修改监听地址[root@controller01 ~]# cp /etc/httpd/conf.d/00-nova-placement-api.conf /etc/httpd/conf.d/00-nova-placement-api.conf.bak[root@controller01 ~]# sed -i &quot;s/Listen\ 8778/Listen\ 192.168.182.131:8778/g&quot; /etc/httpd/conf.d/00-nova-placement-api.conf[root@controller01 ~]# sed -i &quot;s/*:8778/192.168.182.131:8778/g&quot; /etc/httpd/conf.d/00-nova-placement-api.conf[root@controller01 ~]# echo &quot;#Placement API&lt;Directory /usr/bin&gt; &lt;IfVersion &gt;= 2.4&gt; Require all granted &lt;/IfVersion&gt; &lt;IfVersion &lt; 2.4&gt; Order allow,deny Allow from all &lt;/IfVersion&gt;&lt;/Directory&gt;&quot; &gt;&gt; /etc/httpd/conf.d/00-nova-placement-api.conf# 重启httpd服务，启动placement-api监听端口[root@controller01 ~]# systemctl restart httpd 同步nova相关数据库同步nova相关数据库12345678910111213# 任意控制节点操作；# 同步nova-api数据库[root@controller01 ~]# su -s /bin/sh -c &quot;nova-manage api_db sync&quot; nova# 注册cell0数据库[root@controller01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova# 创建cell1 cell[root@controller01 ~]# su -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova# 同步nova数据库；# 忽略”deprecated”信息[root@controller01 ~]# su -s /bin/sh -c &quot;nova-manage db sync&quot; nova 补充： 此版本在向数据库同步导入数据表时，报错：/usr/lib/python2.7/site-packages/oslo_db/sqlalchemy/enginefacade.py:332: NotSupportedWarning: Configuration option(s) [‘use_tpool’] not supported exception.NotSupportedWarning 解决方案如下： bug：https://bugs.launchpad.net/nova/+bug/1746530 pacth：https://github.com/openstack/oslo.db/commit/c432d9e93884d6962592f6d19aaec3f8f66ac3a2 验证123456789Verify nova cell0 and cell1 are registered correctly:# su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova+-------+--------------------------------------+| Name | UUID |+-------+--------------------------------------+| cell1 | 109e1d4b-536a-40d0-83c6-5f121b82b650 || cell0 | 00000000-0000-0000-0000-000000000000 |+-------+--------------------------------------+ 启动服务123456789101112131415161718192021222324# 在全部控制节点操作，以controller01节点为例；# 开机启动[root@controller01 ~]# systemctl enable openstack-nova-api.service \ openstack-nova-consoleauth.service \openstack-nova-scheduler.service \openstack-nova-conductor.service \openstack-nova-novncproxy.service# 启动[root@controller01 ~]# systemctl restart openstack-nova-api.service[root@controller01 ~]# systemctl restart openstack-nova-consoleauth.service[root@controller01 ~]# systemctl restart openstack-nova-scheduler.service[root@controller01 ~]# systemctl restart openstack-nova-conductor.service[root@controller01 ~]# systemctl restart openstack-nova-novncproxy.service# 查看状态[root@controller01 ~]# systemctl status openstack-nova-api.service \openstack-nova-consoleauth.service \openstack-nova-scheduler.service \openstack-nova-conductor.service \openstack-nova-novncproxy.service# 查看端口[root@controller01 ~]# netstat -tunlp | egrep &apos;8774|8775|8778|6080&apos; 验证123456789[root@controller01 ~]# . admin-openrc# 列出各服务组件，查看状态；# 也可使用命令” nova service-list”[root@controller01 ~]# openstack compute service list# 展示api端点[root@controller01 ~]# openstack catalog list# 检查cell与placement api运行正常[root@controller01 ~]# nova-status upgrade check]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—glance集群]]></title>
    <url>%2Fposts%2F4dls875a.html</url>
    <content type="text"><![CDATA[Glance的概述Glance是为虚拟机的创建提供镜像的服务，我们基于Openstack是构建基本的IaaS平台对外提供虚拟机，而虚拟机在创建时必须为选择需要安装的操作系统，Glance服务就是为该选择提供不同的操作系统镜像。 Glance的组件 Glance-API 主要用来响应各种REST请求然后通过其它模块（主要是glance-registry组件和后端存储接口）完成镜像的上传、删除、查询等操作。可以简单的再分为两部分：一层中间件，它主要是做一些对请求的解析工作（如分析出版本号）， 另外一部分提供实际的服务（如与镜像上传下载的后端存储接口交互）。默认绑定端口是9292。 Glance-Registry 镜像注册服务用于提供镜像元数据的REST接口。主要工作是存储或者获取镜像的元数据，与MySQL数据库进行交互。也可以简单的再细分为两部分，API和具体的Server。元数据是指镜像相关的一些信息（如id，size， status，location，checksum，min_disk，min_ram，owner等）真正的镜像数据保存在实际所使用的后端存储里（如Swift，S3，Filesystem等）。默认绑定的端口是9191。 Image Store 严格来说Image Store不属于Glance的组件，这里把它单独分出来只是为了方便理解，它只是一个接口层，提供镜像存储和查询的接口。具体的实现则需要外部存储（Swift，S3）的支持。 部署glance创建数据库1234567891011121314151617181920212223[root@controller01 ~]# mysql -u root -p123456Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 47Server version: 10.2.29-MariaDB-log MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; CREATE DATABASE glance;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO &apos;glance&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.01 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON glance.* TO &apos;glance&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; exit;Bye 创建glance-api创建service项目12345678910111213141516#创建service项目#创建1个project，glance/nova/neutron等服务加入到此project；# service项目在”Default” domain中[root@controller01 ~]# openstack project create --domain Default --description &quot;Service Project&quot; service+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Service Project || domain_id | default || enabled | True || id | 327a7a4e418140108a8b4fed767e9ffe || is_domain | False || name | service || parent_id | default || tags | [] |+-------------+----------------------------------+ 创建glance用户12345678910111213141516171819202122232425262728[root@controller01 ~]# openstack user create --domain Default --password-prompt glance User Password:Repeat User Password:+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 2d1a3f9658474db795a7f8834a83a16f || name | glance || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+# 为glance用户赋予admin权限[root@controller01 ~]# openstack role add --project service --user glance admin# 服务实体类型”image”[root@controller01 ~]# openstack service create --name glance --description &quot;OpenStack Image&quot; image+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | OpenStack Image || enabled | True || id | c28d6edb3ea04e11add10d410bfca9b9 || name | glance || type | image |+-------------+----------------------------------+ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 注意--region与初始化admin用户时生成的region一致；# api地址统一采用vip，如果public/internal/admin分别使用不同的vip，请注意区分；如果没vip，写单个控制节点的# 服务类型为image；# public api[root@controller01 ~]# openstack endpoint create --region RegionOne image public http://controller01:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | f07aab17f01c4d3b8c82e229835fee7f || interface | public || region | RegionOne || region_id | RegionOne || service_id | c28d6edb3ea04e11add10d410bfca9b9 || service_name | glance || service_type | image || url | http://controller01:9292 |+--------------+----------------------------------+# internal api[root@controller01 ~]# openstack endpoint create --region RegionOne image internal http://controller01:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 45fd0b57fda148bcbb112a7be056e73a || interface | internal || region | RegionOne || region_id | RegionOne || service_id | c28d6edb3ea04e11add10d410bfca9b9 || service_name | glance || service_type | image || url | http://controller01:9292 |+--------------+----------------------------------+# admin api[root@controller01 ~]# openstack endpoint create --region RegionOne image admin http://controller01:9292+--------------+----------------------------------+| Field | Value |+--------------+----------------------------------+| enabled | True || id | 0278bf6855614b159ed7d7eeaecd0639 || interface | admin || region | RegionOne || region_id | RegionOne || service_id | c28d6edb3ea04e11add10d410bfca9b9 || service_name | glance || service_type | image || url | http://controller01:9292 |+--------------+----------------------------------+ 安装glance12# 在全部控制节点安装glance，以controller01节点为例[root@controller01 ~]# yum install openstack-glance python-glance python-glanceclient -y 配置glance-api.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445# 在全部控制节点操作，以controller01节点为例；# 注意”bind_host”参数，根据节点修改；# 注意glance-api.conf文件的权限：root:glance[root@controller01 ~]# cp /etc/glance/glance-api.conf /etc/glance/glance-api.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/glance/glance-api.conf[DEFAULT]ble_v1_api = falsebind_host = 192.168.182.131[cors][database]connection = mysql+pymysql://glance:123456@controller01/glance[glance_store]stores = file,httpdefault_store = filefilesystem_store_datadir = /var/lib/glance/images/[image_format][keystone_authtoken]auth_url = http://controller01:5000memcached_servers = controller01:11211,controller02:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = glancepassword = 123456[matchmaker_redis][oslo_concurrency][oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][paste_deploy]flavor = keystone[profiler][store_type_location_strategy][task][taskflow_executor]# 创建镜像存储目录并赋权限；# /var/lib/glance/images是默认的存储目录[root@controller01 ~]# mkdir -p /var/lib/glance/images[root@controller01 ~]# chown glance:nobody /var/lib/glance/images 12345 #注意Queens版本中已弃用Glance Registry Service及其API，并且将遵循OpenStack标准弃用策略在“ S”开发周期开始时将其删除。有关更多信息，请参见Glance规范文档实际上不推荐使用Glance注册表。 同步glance数据库123456789101112131415161718192021222324252627282930313233343536373839# 任意控制节点操作；# 忽略输出的“deprecated”信息[root@controller01 ~]# su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance[root@controller01 glance]# su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance/usr/lib/python2.7/site-packages/oslo_db/sqlalchemy/enginefacade.py:1352: OsloDBDeprecationWarning: EngineFacade is deprecated; please use oslo_db.sqlalchemy.enginefacade expire_on_commit=expire_on_commit, _conf=conf)INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.INFO [alembic.runtime.migration] Running upgrade -&gt; liberty, liberty initialINFO [alembic.runtime.migration] Running upgrade liberty -&gt; mitaka01, add index on created_at and updated_at columns of &apos;images&apos; tableINFO [alembic.runtime.migration] Running upgrade mitaka01 -&gt; mitaka02, update metadef os_nova_serverINFO [alembic.runtime.migration] Running upgrade mitaka02 -&gt; ocata_expand01, add visibility to imagesINFO [alembic.runtime.migration] Running upgrade ocata_expand01 -&gt; pike_expand01, empty expand for symmetry with pike_contract01INFO [alembic.runtime.migration] Running upgrade pike_expand01 -&gt; queens_expand01INFO [alembic.runtime.migration] Running upgrade queens_expand01 -&gt; rocky_expand01, add os_hidden column to images tableINFO [alembic.runtime.migration] Running upgrade rocky_expand01 -&gt; rocky_expand02, add os_hash_algo and os_hash_value columns to images tableINFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.Upgraded database to: rocky_expand02, current revision(s): rocky_expand02INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.Database migration is up to date. No migration needed.INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.INFO [alembic.runtime.migration] Running upgrade mitaka02 -&gt; ocata_contract01, remove is_public from imagesINFO [alembic.runtime.migration] Running upgrade ocata_contract01 -&gt; pike_contract01, drop glare artifacts tablesINFO [alembic.runtime.migration] Running upgrade pike_contract01 -&gt; queens_contract01INFO [alembic.runtime.migration] Running upgrade queens_contract01 -&gt; rocky_contract01INFO [alembic.runtime.migration] Running upgrade rocky_contract01 -&gt; rocky_contract02INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.Upgraded database to: rocky_contract02, current revision(s): rocky_contract02INFO [alembic.runtime.migration] Context impl MySQLImpl.INFO [alembic.runtime.migration] Will assume non-transactional DDL.Database is synced successfully. 123456789101112131415161718192021# 查看验证[root@controller01 ~]# mysql -h controller01 -uglance -p123456 -e &quot;use glance;show tables;&quot;+----------------------------------+| Tables_in_glance |+----------------------------------+| alembic_version || image_locations || image_members || image_properties || image_tags || images || metadef_namespace_resource_types || metadef_namespaces || metadef_objects || metadef_properties || metadef_resource_types || metadef_tags || migrate_version || task_info || tasks |+----------------------------------+ 启动服务123# 在全部控制节点操作，以controller01节点为例；# systemctl enable openstack-glance-api.service # systemctl start openstack-glance-api.service]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—Keystone集群]]></title>
    <url>%2Fposts%2F0dsa918a.html</url>
    <content type="text"><![CDATA[概述Keystone（OpenStack Identity Service）是 OpenStack 框架中负责管理身份验证、服务访问规则和服务令牌功能的组件。用户访问资源需要验证用户的身份与权限，服务执行操作也需要进行权限检测，这些都需要通过 Keystone 来处理。Keystone 类似一个服务总线， 或者说是整个 Openstack 框架的注册表，OpenStack 服务通过 Keystone 来注册其 Endpoint（服务访问的URL），任何服务之间的相互调用，都需要先经过 Keystone 的身份验证，获得目标服务的 Endpoint ，然后再调用。 Keystone 的主要功能如下： 管理用户及其权限；维护 OpenStack 服务的 Endpoint；Authentication（认证）和 Authorization（鉴权）。 安装创建keystone数据库1234567891011121314151617181920212223# 在任意控制节点创建数据库，数据库自动同步，以controller01节点为例；[root@controller01 ~]# mysql -uroot -p123456Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 12Server version: 10.2.29-MariaDB-log MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; CREATE DATABASE keystone;Query OK, 1 row affected (0.01 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &apos;keystone&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON keystone.* TO &apos;keystone&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)MariaDB [(none)]&gt; exit;Bye 安装keystone12# 在全部控制节点安装keystone，以controller01节点为例；[root@controller01 ~]# yum install openstack-keystone httpd mod_wsgi mod_ssl -y 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455在全部控制节点设置[root@controller01 ~]# cp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bak[root@controller01 ~]# egrep -v &quot;^$|^#&quot; /etc/keystone/keystone.conf[DEFAULT][application_credential][assignment][auth][cache]backend = oslo_cache.memcache_poolenabled = truememcache_servers = controller01:11211,controller02:11211[catalog][cors][credential][database]connection = mysql+pymysql://keystone:123456@controller01/keystone[domain_config][endpoint_filter][endpoint_policy][eventlet_server][federation][fernet_tokens][healthcheck][identity][identity_mapping][ldap][matchmaker_redis][memcache][oauth1][oslo_messaging_amqp][oslo_messaging_kafka][oslo_messaging_notifications][oslo_messaging_rabbit][oslo_messaging_zmq][oslo_middleware][oslo_policy][paste_deploy][policy][profiler][resource][revoke][role][saml][security_compliance][shadow_users][signing][token]provider = fernet[tokenless_auth][trust][unified_limit]配置文件里面只需改memcache和mysql配置 同步keystone数据库123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# 任意控制节点操作[root@controller02 ~]# su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone[root@controller02 ~]# mysql -h controller01 -ukeystone -p123456 -e &quot;use keystone;show tables;&quot; +-----------------------------+| Tables_in_keystone |+-----------------------------+| access_token || application_credential || application_credential_role || assignment || config_register || consumer || credential || endpoint || endpoint_group || federated_user || federation_protocol || group || id_mapping || identity_provider || idp_remote_ids || implied_role || limit || local_user || mapping || migrate_version || nonlocal_user || password || policy || policy_association || project || project_endpoint || project_endpoint_group || project_tag || region || registered_limit || request_token || revocation_event || role || sensitive_config || service || service_provider || system_assignment || token || trust || trust_role || user || user_group_membership || user_option || whitelisted_config |+-----------------------------+ 初始化fernet秘钥12345678910111213#在任意控制节点操作[root@controller01 ~]# keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone[root@controller01 ~]# keystone-manage credential_setup --keystone-user keystone --keystone-group keystone[root@controller01 ~]# scp -r /etc/keystone/fernet-keys/ /etc/keystone/credential-keys/ root@192.168.182.132:/etc/keystone/root@192.168.182.132&apos;s password: 1 100% 44 32.3KB/s 00:00 0 100% 44 31.0KB/s 00:00 1 100% 44 30.7KB/s 00:00 0 100% 44 34.6KB/s 00:00# 同步后，注意controller02节点上秘钥权限[root@controller02 ~]# chown keystone:keystone /etc/keystone/credential-keys/ -R[root@controller02 ~]# chown keystone:keystone /etc/keystone/fernet-keys/ -R 配置httpd.conf12345678#在全部控制节点设置[root@controller01 ~]# cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak[root@controller01 ~]# sed -i &quot;s/#ServerName www.example.com:80/ServerName $&#123;HOSTNAME&#125;/&quot; /etc/httpd/conf/httpd.conf[root@controller01 ~]# sed -i &quot;s/Listen\ 80/Listen\ 192.168.182.131:80/g&quot; /etc/httpd/conf/httpd.conf [root@controller02 ~]# cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak[root@controller02 ~]# sed -i &quot;s/#ServerName www.example.com:80/ServerName $&#123;HOSTNAME&#125;/&quot; /etc/httpd/conf/httpd.conf[root@controller02 ~]# sed -i &quot;s/Listen\ 80/Listen\ 192.168.182.132:80/g&quot; /etc/httpd/conf/httpd.conf 配置wsgi-keystone.conf12345678#在全部控制节点设置[root@controller01 ~]# cp /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/[root@controller01 ~]# sed -i &quot;s/Listen\ 5000/Listen\ 192.168.182.131:5000/g&quot; /etc/httpd/conf.d/wsgi-keystone.conf[root@controller01 ~]# sed -i &quot;s/*:5000/192.168.182.131:5000/g&quot; /etc/httpd/conf.d/wsgi-keystone.conf[root@controller02 ~]# cp /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/[root@controller02 ~]# sed -i &quot;s/Listen\ 5000/Listen\ 192.168.182.132:5000/g&quot; /etc/httpd/conf.d/wsgi-keystone.conf[root@controller02 ~]# sed -i &quot;s/*:5000/192.168.182.132:5000/g&quot; /etc/httpd/conf.d/wsgi-keystone.conf 认证引导123456#任意节点操作keystone-manage bootstrap --bootstrap-password 123456 \ --bootstrap-admin-url http://controller01:5000/v3/ \ --bootstrap-internal-url http://controller01:5000/v3/ \ --bootstrap-public-url http://controller01:5000/v3/ \ --bootstrap-region-id RegionOne 启动1234# 在全部控制节点操作，以controller01节点为例[root@controller01 ~]# systemctl enable httpd.service[root@controller01 ~]# systemctl restart httpd.service[root@controller01 ~]# systemctl status httpd.service 创建domain, projects, users, 与rolesdomain1234567891011121314151617181920212223242526#domain[root@controller01 ~]# openstack domain list+---------+---------+---------+--------------------+| ID | Name | Enabled | Description |+---------+---------+---------+--------------------+| default | Default | True | The default domain |+---------+---------+---------+--------------------+# 如果需要生成新的domain，[root@controller01 conf.d]# openstack domain create --description &quot;An Example Domain&quot; example+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | An Example Domain || enabled | True || id | 6e77b351784b479b8fba509ac96a7648 || name | example || tags | [] |+-------------+----------------------------------+[root@controller01 conf.d]# openstack domain list+----------------------------------+---------+---------+--------------------+| ID | Name | Enabled | Description |+----------------------------------+---------+---------+--------------------+| 6e77b351784b479b8fba509ac96a7648 | example | True | An Example Domain || default | Default | True | The default domain |+----------------------------------+---------+---------+--------------------+ projects123456789101112131415# project属于某个domain；# 以创建demo项目为例，demo项目属于”default” domain[root@controller01 conf.d]# openstack project create --domain default --description &quot;Demo Project&quot; demo+-------------+----------------------------------+| Field | Value |+-------------+----------------------------------+| description | Demo Project || domain_id | default || enabled | True || id | ceb19536c29f4e2094c1a729e7121b50 || is_domain | False || name | demo || parent_id | default || tags | [] |+-------------+----------------------------------+ users12345678910111213# user属于某个domain；# 以创建demo用户为例，demo用户属于”default” domain[root@controller01 conf.d]# openstack user create --domain default --password=123456 demo+---------------------+----------------------------------+| Field | Value |+---------------------+----------------------------------+| domain_id | default || enabled | True || id | 4e1b497157304132baf57bdb054aa251 || name | demo || options | &#123;&#125; || password_expires_at | None |+---------------------+----------------------------------+ roles123456789# 创建普通用户角色（区别于admin用户）[root@controller01 conf.d]# openstack role create user+-----------+----------------------------------+| Field | Value |+-----------+----------------------------------+| domain_id | None || id | 2f37516c3592405eb0c55736560d8419 || name | user |+-----------+----------------------------------+ 12345678910111213141516171819202122232425262728# 向demo项目的demo用户赋予user权限[root@controller01 conf.d]# openstack role add --project demo --user demo user#查看[root@controller01 conf.d]# openstack user list+----------------------------------+-------+| ID | Name |+----------------------------------+-------+| 4e1b497157304132baf57bdb054aa251 | demo || 9a997ebdd0244ce1ab07c970f5941e5a | admin |+----------------------------------+-------+[root@controller01 conf.d]# openstack role list+----------------------------------+--------+| ID | Name |+----------------------------------+--------+| 2f37516c3592405eb0c55736560d8419 | user || 2f915bf9da734edda88c55f59bd49c56 | member || 7f26aba8e14842b184a8e5b3d63f566b | admin || ff1613d93721433582e10d320fb2f468 | reader |+----------------------------------+--------+[root@controller01 conf.d]# openstack role assignment list+----------------------------------+----------------------------------+-------+----------------------------------+--------+--------+-----------+| Role | User | Group | Project | Domain | System | Inherited |+----------------------------------+----------------------------------+-------+----------------------------------+--------+--------+-----------+| 2f37516c3592405eb0c55736560d8419 | 4e1b497157304132baf57bdb054aa251 | | ceb19536c29f4e2094c1a729e7121b50 | | | False || 7f26aba8e14842b184a8e5b3d63f566b | 9a997ebdd0244ce1ab07c970f5941e5a | | a1f6ca90da2f4562b9c1388a95f3bd00 | | | False || 7f26aba8e14842b184a8e5b3d63f566b | 9a997ebdd0244ce1ab07c970f5941e5a | | | | all | False |+----------------------------------+----------------------------------+-------+----------------------------------+--------+--------+-----------+ openstack client 环境变量脚本admin-openrc12345678910[root@controller01 ~]# cat admin-openrc export OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller01:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2[root@controller01 ~]# chmod u+x admin-openrc 1234567891011121314151617[root@controller01 ~]# source admin-openrc [root@controller01 ~]# openstack domain list+----------------------------------+---------+---------+--------------------+| ID | Name | Enabled | Description |+----------------------------------+---------+---------+--------------------+| 6e77b351784b479b8fba509ac96a7648 | example | True | An Example Domain || default | Default | True | The default domain |+----------------------------------+---------+---------+--------------------+[root@controller01 ~]# openstack token issue+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Field | Value |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| expires | 2019-11-25T10:05:48+0000 || id | gAAAAABd25lsHXz8Evv_EIWYXweY-I8c67ZKz4W9ztKO9P75edhiHw5kVGE2vIKZWdjUz2jhUms7mHHXGGlYfFAmPh6Kin0a2mWvAg36jd9OzkQxP_vVgn-e_G2--IrEdkF6jyLrcBdT-mu57tcqcXKXc5kk0JaxV33fGZhk_xAS0FxXffsWErc || project_id | a1f6ca90da2f4562b9c1388a95f3bd00 || user_id | 9a997ebdd0244ce1ab07c970f5941e5a |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ demo-openrc123456789101112131415161718192021[root@controller01 ~]# cat demo-openrc export OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=demoexport OS_USERNAME=demoexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller01:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2[root@controller01 ~]# chmod u+x demo-openrc [root@controller01 ~]# openstack token issue+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Field | Value |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| expires | 2019-11-25T10:06:48+0000 || id | gAAAAABd25moqldgU1V3KGU3sfAMs9atlKOWXaVTzP3HlSXAfXT0hlYE-AHsEoXiR4lE1ShSTrppHv8c1BmKsvwaLkStDbM7sECHTcZrTCt4AFooGVQUzsjW6rccG6FsiplJeNN0p5rK19EzmRIiaSWYs-zMLds3nfDerYdQZxBZki4ys1hIIjs || project_id | ceb19536c29f4e2094c1a729e7121b50 || user_id | 4e1b497157304132baf57bdb054aa251 |+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—基础服务]]></title>
    <url>%2Fposts%2F087llks5.html</url>
    <content type="text"><![CDATA[mariadb集群部署mariadb服务注意: 以下步骤在二台服务器都要进行 12345678910[root@controller01 ~]# yum install libaio galera rsync lsof -y[root@controller01 ~]# useradd mysql -s /sbin/nologin -M[root@controller01 ~]# cd /usr/local/src/[root@controller01 ~]# tar xf mariadb-10.2.29-linux-x86_64.tar.gz -C /usr/local/[root@controller01 ~]# ln -s /usr/local/mariadb-10.2.29-linux-x86_64/ /usr/local/mysql[root@controller01 ~]# cd /usr/local/mysql/[root@controller01 mysql]# cp support-files/my-medium.cnf my.cnf[root@controller01 mysql]# chown -R mysql.mysql /usr/local/mariadb-10.2.29-linux-x86_64[root@controller01 mysql]# mkdir -pv /DB/data/mysql[root@controller01 mysql]# chown -R mysql.mysql /DB/data/mysql 编辑系统文件 123456789[root@controller01 mysql]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld[root@controller01 ~]# vim /etc/init.d/mysqldbasedir=/usr/local/mysqldatadir=/DB/data/mysql[root@controller01 ~]# vim /etc/profileexport MYSQL_HOME=/usr/local/mysqlPATH=":$MYSQL_HOME/bin:$PATH"[root@controller01 ~]# source /etc/profile 编辑controller01配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@controller01 mysql]# cat /usr/local/mysql/my.cnf| grep -v "#" | grep -v "^$"[client]port = 3306socket = /tmp/mysql.sock[mysqld]port = 3306socket = /tmp/mysql.sockbasedir = /usr/local/mysqldatadir = /DB/data/mysqlskip-external-lockingkey_buffer_size = 16Mmax_allowed_packet = 1Mtable_open_cache = 64sort_buffer_size = 512Knet_buffer_length = 8Kread_buffer_size = 256Kread_rnd_buffer_size = 512Kmyisam_sort_buffer_size = 8M[galera]wsrep_on=ONwsrep_provider=/usr/lib64/galera/libgalera_smm.sowsrep_cluster_address="gcomm://192.168.182.131,192.168.182.132"wsrep_node_name= controller01wsrep_node_address=192.168.182.131binlog_format=rowdefault_storage_engine=InnoDBinnodb_autoinc_lock_mode=2wsrep_slave_threads=1innodb_flush_log_at_trx_commit=0innodb_buffer_pool_size=120Mwsrep_sst_method=rsyncwsrep_causal_reads=ONlog-bin=mysql-binbinlog_format=rowserver-id = 1[mysqldump]quickmax_allowed_packet = 16M[mysql]no-auto-rehash[myisamchk]key_buffer_size = 20Msort_buffer_size = 20Mread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout 编辑controller02配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@controller02 ~]# cat /usr/local/mysql/my.cnf| grep -v "#" | grep -v "^$"[client]port = 3306socket = /tmp/mysql.sock[mysqld]port = 3306socket = /tmp/mysql.sockbasedir = /usr/local/mysqldatadir = /DB/data/mysqlskip-external-lockingkey_buffer_size = 16Mmax_allowed_packet = 1Mtable_open_cache = 64sort_buffer_size = 512Knet_buffer_length = 8Kread_buffer_size = 256Kread_rnd_buffer_size = 512Kmyisam_sort_buffer_size = 8M[galera]wsrep_on=ONwsrep_provider=/usr/lib64/galera/libgalera_smm.sowsrep_cluster_address="gcomm://192.168.182.131,192.168.182.132"wsrep_node_name= controller02wsrep_node_address=192.168.182.132binlog_format=rowdefault_storage_engine=InnoDBinnodb_autoinc_lock_mode=2wsrep_slave_threads=1innodb_flush_log_at_trx_commit=0innodb_buffer_pool_size=120Mwsrep_sst_method=rsyncwsrep_causal_reads=ONlog-bin=mysql-binbinlog_format=rowserver-id = 1[mysqldump]quickmax_allowed_packet = 16M[mysql]no-auto-rehash[myisamchk]key_buffer_size = 20Msort_buffer_size = 20Mread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout 配置MariaDB Galera Cluster1.mariadb第一个节点进行初始化(192.168.182.131) 1[root@controller01 ~]# /usr/local/mysql/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/DB/data/mysql --defaults-file=/usr/local/mysql/my.cnf 2.在192.168.182.131节点上通过bootstrap启动(第一次启动一定要使用--wsrep-new-cluster,再次启动就不需要) 1[root@controller01 ~]# mysqld_safe --defaults-file=/usr/local/mysql/my.cnf --user=mysql --wsrep-new-cluster &amp; 3.在192.168.182.131节点上设置root密码以及安全设置 1[root@controller01 ~]# mysql_secure_installation Enter current password for root (enter for none): 回车Set root password? [Y/n] yRemove anonymous users? [Y/n] yDisallow root login remotely? [Y/n] nRemove test database and access to it? [Y/n] yReload privilege tables now? [Y/n] y 4.在其他节点上(192.168.182.132)上启动mariadb 1[root@controller02 ~]# mysqld_safe --defaults-file=/usr/local/mysql/my.cnf --user=mysql &amp; 5.检查服务 123456[root@controller01 ~]# netstat -lntup|grep mysqldtcp 0 0 0.0.0.0:4567 0.0.0.0:* LISTEN 28589/mysqldtcp6 0 0 :::3306 :::* LISTEN 28589/mysqld[root@controller02 ~]# netstat -lntup|grep mysqldtcp 0 0 0.0.0.0:4567 0.0.0.0:* LISTEN 15798/mysqldtcp6 0 0 :::3306 :::* LISTEN 15798/mysqld 校验MariaDB Galera Cluster登录数据库进行查看: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586[root@controller01 ~]# mysql -pEnter password:Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 23Server version: 10.2.24-MariaDB-log MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; SHOW STATUS LIKE &apos;wsrep_cluster_size&apos;;+--------------------+-------+| Variable_name | Value |+--------------------+-------+| wsrep_cluster_size | 2 |+--------------------+-------+1 row in set (0.00 sec)MariaDB [(none)]&gt; show global status like &apos;ws%&apos;;+-------------------------------+-------------------------------------------+| Variable_name | Value |+-------------------------------+-------------------------------------------+| wsrep_applier_thread_count | 1 || wsrep_apply_oooe | 0.000000 || wsrep_apply_oool | 0.000000 || wsrep_apply_window | 1.000000 || wsrep_causal_reads | 1 || wsrep_cert_deps_distance | 1.000000 || wsrep_cert_index_size | 2 || wsrep_cert_interval | 0.000000 || wsrep_cluster_conf_id | 2 || wsrep_cluster_size | 2 || wsrep_cluster_state_uuid | 34db925e-0dd1-11ea-899d-de432d301557 || wsrep_cluster_status | Primary || wsrep_commit_oooe | 0.000000 || wsrep_commit_oool | 0.000000 || wsrep_commit_window | 1.000000 || wsrep_connected | ON || wsrep_desync_count | 0 || wsrep_evs_delayed | || wsrep_evs_evict_list | || wsrep_evs_repl_latency | 0/0/0/0/0 || wsrep_evs_state | OPERATIONAL || wsrep_flow_control_paused | 0.000000 || wsrep_flow_control_paused_ns | 0 || wsrep_flow_control_recv | 0 || wsrep_flow_control_sent | 0 || wsrep_gcomm_uuid | 34da0224-0dd1-11ea-abba-97637e178a34 || wsrep_incoming_addresses | 192.168.182.131:3306,192.168.182.132:3306 || wsrep_last_committed | 3 || wsrep_local_bf_aborts | 0 || wsrep_local_cached_downto | 1 || wsrep_local_cert_failures | 0 || wsrep_local_commits | 0 || wsrep_local_index | 0 || wsrep_local_recv_queue | 0 || wsrep_local_recv_queue_avg | 0.166667 || wsrep_local_recv_queue_max | 2 || wsrep_local_recv_queue_min | 0 || wsrep_local_replays | 0 || wsrep_local_send_queue | 0 || wsrep_local_send_queue_avg | 0.000000 || wsrep_local_send_queue_max | 1 || wsrep_local_send_queue_min | 0 || wsrep_local_state | 4 || wsrep_local_state_comment | Synced || wsrep_local_state_uuid | 34db925e-0dd1-11ea-899d-de432d301557 || wsrep_protocol_version | 7 || wsrep_provider_name | Galera || wsrep_provider_vendor | Codership Oy &lt;info@codership.com&gt; || wsrep_provider_version | 3.16(r5c765eb) || wsrep_ready | ON || wsrep_received | 6 || wsrep_received_bytes | 440 || wsrep_repl_data_bytes | 1077 || wsrep_repl_keys | 3 || wsrep_repl_keys_bytes | 93 || wsrep_repl_other_bytes | 0 || wsrep_replicated | 3 || wsrep_replicated_bytes | 1362 || wsrep_rollbacker_thread_count | 1 || wsrep_thread_count | 2 |+-------------------------------+-------------------------------------------+60 rows in set (0.00 sec)MariaDB [(none)]&gt; RabbitMQ集群安装rabbitmq123456# 在全部控制节点，使用aliyun的epel镜像，以controller01节点为例[root@controller01 ~]# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo[root@controller01 ~]# yum install erlang rabbitmq-server -y# 设置开机启动[root@controller01 ~]# systemctl enable rabbitmq-server.service 构建rabbitmq集群1234567891011121314151617181920212223# 任选1个控制节点首先启动rabbitmq服务，这里选择controller01节点[root@controller01 ~]# systemctl start rabbitmq-server.service[root@controller01 ~]# rabbitmqctl cluster_status# 分发.erlang.cookie[root@controller01 ~]# scp /var/lib/rabbitmq/.erlang.cookie root@192.168.182.132:/var/lib/rabbitmq/# 修改controller02节点.erlang.cookie文件的用户/组，以controller02节点为例[root@controller02 ~]# chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie# 注意修改全部控制节点.erlang.cookie文件的权限，默认即400权限，可不修改[root@controller02 ~]# ll /var/lib/rabbitmq/.erlang.cookie# 启动controller02节点的rabbitmq服务 [root@controller02 ~]# systemctl start rabbitmq-server# 构建集群，controller02节点以ram节点的形式加入集群[root@controller02 mysql]# rabbitmqctl stop_appStopping rabbit application on node rabbit@controller02[root@controller02 mysql]# rabbitmqctl join_cluster --ram rabbit@controller01Clustering node rabbit@controller02 with rabbit@controller01[root@controller02 mysql]# rabbitmqctl start_appStarting node rabbit@controller02 rabbitmq账号1234567891011# 在任意节点新建账号并设置密码，以controller01节点为例[root@controller01 ~]# rabbitmqctl add_user openstack rabbitmq# 设置新建账号的状态[root@controller01 ~]# rabbitmqctl set_user_tags openstack administrator# 设置新建账号的权限[root@controller01 ~]# rabbitmqctl set_permissions -p &quot;/&quot; openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;# 查看账号[root@controller01 ~]# rabbitmqctl list_users 镜像队列ha1234567891011# 设置镜像队列高可用[root@controller01 ~]# rabbitmqctl set_policy ha-all &quot;^&quot; &apos;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&apos;# 查看镜像队列策略[root@controller01 ~]# rabbitmqctl list_policies # 在全部控制节点安装web管理插件，以controller01节点为例[root@controller01 ~]# rabbitmq-plugins enable rabbitmq_management#访问：http://192.168.182.131:15672 Memcached集群 Memcached是无状态的，各控制节点独立部署，openstack各服务模块统一调用多个控制节点的memcached服务即可。 123456789101112131415#所有控制节点都安装[root@controller01 ~]# yum install memcached python-memcached -y[root@controller01 ~]# sed -i &apos;s|127.0.0.1,::1|0.0.0.0|g&apos; /etc/sysconfig/memcached [root@controller01 ~]# systemctl enable memcached.serviceCreated symlink from /etc/systemd/system/multi-user.target.wants/memcached.service to /usr/lib/systemd/system/memcached.service.[root@controller01 ~]# systemctl start memcached.service[root@controller01 ~]# systemctl status memcached.service● memcached.service - memcached daemon Loaded: loaded (/usr/lib/systemd/system/memcached.service; enabled; vendor preset: disabled) Active: active (running) since Mon 2019-11-25 10:09:55 CST; 12s ago Main PID: 3653 (memcached) CGroup: /system.slice/memcached.service └─3653 /usr/bin/memcached -p 11211 -u memcached -m 64 -c 1024 -l 0.0.0.0Nov 25 10:09:55 controller01 systemd[1]: Started memcached daemon. keepalived和haproxy集群yum安装就可以 配置如下： 123456789101112131415161718192021222324global_defs &#123; router_id LVS_openstack&#125;vrrp_instance VI_1 &#123; state MASTER interface em3 # 本地网卡名称 virtual_router_id 61 priority 120 # 权重,要唯一 advert_int 1 mcast_src_ip 192.168.182.131 # 本地IP nopreempt authentication &#123; auth_type PASS auth_pass sqP05dQgMSlzrxHj &#125; unicast_peer &#123; 192.168.182.132 &#125; virtual_ipaddress &#123; 192.168.182.130/24 # VIP &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143global chroot /var/lib/haproxy daemon group haproxy user haproxy maxconn 4000 pidfile /var/run/haproxy.piddefaults log global maxconn 4000 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout check 10s# mysql服务；#listen mysql_cluster# bind 192.168.182.130:3306# balance source# mode tcp# server controller01 192.168.182.131:3306 check inter 2000 rise 2 fall 5# server controller02 192.168.182.132:3306 backup check inter 2000 rise 2 fall 5# haproxy监控页listen stats bind 0.0.0.0:1080 mode http stats enable stats uri / stats realm OpenStack\ Haproxy stats auth admin:admin stats refresh 30s stats show-node stats show-legends stats hide-version# horizon服务 listen dashboard_cluster bind 192.168.182.130:80 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:80 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:80 check inter 2000 rise 2 fall 5# 为rabbirmq提供ha集群访问端口，供openstack各服务访问；# 如果openstack各服务直接连接rabbitmq集群，这里可不设置rabbitmq的负载均衡 listen rabbitmq_cluster bind 192.168.182.130:5673 mode tcp option tcpka balance roundrobin timeout client 3h timeout server 3h option clitcpka server controller01 192.168.182.131:5672 check inter 10s rise 2 fall 5 server controller02 192.168.182.132:5672 check inter 10s rise 2 fall 5# glance_api服务 listen glance_api_cluster bind 192.168.182.130:9292 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:9292 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:9292 check inter 2000 rise 2 fall 5# keystone_public _api服务 listen keystone_public_cluster bind 192.168.182.130:5000 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:5000 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:5000 check inter 2000 rise 2 fall 5# 兼容aws ec2-api# listen nova_ec2_api_cluster# bind 192.168.182.130:8773# balance source# option tcpka# option tcplog# server controller01 192.168.182.131:8773 check inter 2000 rise 2 fall 5# server controller02 192.168.182.132:8773 check inter 2000 rise 2 fall 5 listen nova_compute_api_cluster bind 192.168.182.130:8774 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:8774 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:8774 check inter 2000 rise 2 fall 5 listen nova_placement_cluster bind 192.168.182.130:8778 balance source option tcpka option tcplog server controller01 192.168.182.131:8778 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:8778 check inter 2000 rise 2 fall 5 listen nova_metadata_api_cluster bind 192.168.182.130:8775 balance source option tcpka option tcplog server controller01 192.168.182.131:8775 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:8775 check inter 2000 rise 2 fall 5 listen nova_vncproxy_cluster bind 192.168.182.130:6080 balance source option tcpka option tcplog server controller01 192.168.182.131:6080 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:6080 check inter 2000 rise 2 fall 5 listen neutron_api_cluster bind 192.168.182.130:9696 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:9696 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:9696 check inter 2000 rise 2 fall 5 listen cinder_api_cluster bind 192.168.182.130:8776 balance source option tcpka option httpchk option tcplog server controller01 192.168.182.131:8776 check inter 2000 rise 2 fall 5 server controller02 192.168.182.132:8776 check inter 2000 rise 2 fall 5 后面实验环境没拿vip，自己做时候，手动替换下就可以，就能做集群了]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[openstack集群部署—集群环境]]></title>
    <url>%2Fposts%2F001dll5a.html</url>
    <content type="text"><![CDATA[环境信息相关主机信息: IP地址 主机名 192.168.182.131 controller01 192.168.182.132 controller02 环境准备设置hosts机器都需执行 12345[root@bogon yum.repos.d]# cat /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.182.131 controller01192.168.182.132 controller02 12[root@localhost ~]# hostnamectl set-hostname controller01[root@localhost ~]# hostnamectl set-hostname controller02 ntp可以使用chrony，自己做ntp 这里直接ntpdate同步阿里云的时间服务器 1[root@localhost ~]# ntpdate ntp1.aliyun.com 关防火墙，关selinux 设置openstack packages1234[root@controller01 yum.repos.d]# yum install centos-release-openstack-rocky -y将openstack的yum源换成阿里的https://mirrors.aliyun.com/centos/7.7.1908/cloud/x86_64/ 123456[root@controller01 ~]# yum upgrade -y# 安装openstackclient[root@controller01 ~]# yum install python-openstackclient -y# selinux开启时需要安装openstack-selinux，这里已将seliux设置为默认关闭[root@controller01 ~]# yum install openstack-selinux -y]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s里面java获取真实cpu]]></title>
    <url>%2Fposts%2F0adfldl5.html</url>
    <content type="text"><![CDATA[问题开发同学发现，容器里获取不到真实的cpu，最开始以为是没有挂载lxcfs，后来挂载了lxcfs也没解决，jdk获取不到真实cpu的情况 解决升级jdk，至 8u192 验证12345[root@test-limit-85ddd57d4c-rjqt8 /]# curl 127.0.0.1:6080/springboot-demo/test/getcpu=1freeMemory=2373890008maxMemory=2717908992totalMemory=2717908992]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控端口]]></title>
    <url>%2Fposts%2F6aope55k.html</url>
    <content type="text"><![CDATA[环境依赖12345678910111213依赖:python3.*pyyaml==5.1.2prometheus_client==0.7.1flask==1.1.1安装依赖:1、安装python3.*2、pip3 install -r requirements.txt安装路径:可安装至任意路径将 export_moniotr_port.py 、 host_port_conf.yaml 放在同级路径 配置文件 export_monitor_port.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# Prometheus monitor server port.# -*- coding:utf-8 -*-import socketimport osimport yamlimport prometheus_clientfrom prometheus_client import Gaugefrom prometheus_client.core import CollectorRegistryfrom flask import Response, Flaskapp = Flask(__name__)def Getconfigdic(): &quot;&quot;&quot; 将 yaml 配置文件中数据格式化为字典 &quot;&quot;&quot; proPath = os.path.dirname(os.path.realpath(__file__)) yamlPath = os.path.join(proPath, &quot;host_port_conf.yaml&quot;) f = open(yamlPath, &quot;r&quot;, encoding=&quot;utf-8&quot;) sdata = yaml.full_load(f) f.close() return sdatadef Exploreport(sertype,ip,port): &quot;&quot;&quot; 检查端口是否存在 &quot;&quot;&quot; try: tel = socket.socket() tel.connect((ip, int(port))) socket.setdefaulttimeout(0.5) result_dic = &#123;&quot;sertype&quot;: sertype, &quot;host&quot;: ip, &quot;port&quot;: str(port), &quot;status&quot;: 1&#125; return result_dic except: result_dic = &#123;&quot;sertype&quot;: sertype, &quot;host&quot;: ip, &quot;port&quot;: str(port), &quot;status&quot;: 0&#125; return result_dicdef Checkport(): &quot;&quot;&quot; Getconfigdic()函数拿到的数据格式 sdic = &#123;&apos;zookeeper&apos;: &#123;&apos;host&apos;: [&apos;192.168.7.51&apos;, &apos;192.168.7.52&apos;, &apos;192.168.7.53&apos;], &apos;port&apos;: [2181, 22]&#125;, &apos;harbor&apos;: &#123;&apos;host&apos;: [&apos;192.168.7.41&apos;, &apos;192.168.7.42&apos;, &apos;192.168.7.43&apos;], &apos;port&apos;: [9200, 9301]&#125;&#125; &quot;&quot;&quot; sdic = Getconfigdic() result_list = [] for sertype in sdic.keys(): iplist = sdic.get(sertype).get(&quot;host&quot;) portlist = sdic.get(sertype).get(&quot;port&quot;) for ip in iplist: for port in portlist: result_dic = Exploreport(sertype, ip, port) result_list.append(result_dic) return result_list@app.route(&quot;/metrics&quot;)def ApiResponse(): &quot;&quot;&quot; Checkport() 取出来的数据是这样的 checkport = [&#123;&quot;sertype&quot;:&quot;zookeeper&quot;,&quot;host&quot;: &quot;192.168.1.22&quot;, &quot;port&quot;: &quot;2181&quot;, &quot;status&quot;: 0&#125;, &#123;&quot;sertype&quot;:&quot;zookeeper&quot;,&quot;host&quot;: &quot;192.168.1.23&quot;, &quot;port&quot;: &quot;2181&quot;, &quot;status&quot;: 1&#125;] &quot;&quot;&quot; checkport = Checkport() # 定义metrics仓库，存放多条数据 REGISTRY = CollectorRegistry(auto_describe=False) muxStatus = Gauge(&quot;server_port_up&quot;, &quot;Api response stats is:&quot;, [&quot;sertype&quot;,&quot;host&quot;, &quot;port&quot;], registry=REGISTRY) for datas in checkport: sertype = &quot;&quot;.join(datas.get(&quot;sertype&quot;)) host = &quot;&quot;.join(datas.get(&quot;host&quot;)) port = &quot;&quot;.join(datas.get(&quot;port&quot;)) status = datas.get(&quot;status&quot;) muxStatus.labels(sertype,host, port).set(status) return Response(prometheus_client.generate_latest(REGISTRY), mimetype=&quot;text/plain&quot;)if __name__ == &quot;__main__&quot;: app.run(host=&quot;0.0.0.0&quot;, port=31672, debug=True) host_port_conf.yaml 12345678910111213141516# Prometheus monitor server port config.zookeeper: host: - &quot;192.168.7.51&quot; - &quot;192.168.7.52&quot; - &quot;192.168.7.53&quot; port: - 2181elasticsearch: host: - &quot;192.168.7.41&quot; - &quot;192.168.7.42&quot; - &quot;192.168.7.43&quot; port: - 9200 - 9300 requirements.txt 123pyyaml==5.1.2prometheus_client==0.7.1flask==1.1.1 说明: 1234567最外层key为服务名称，自定义服务名称 host:为固定key，不可以变 - &quot;服务器ip&quot; port: - 端口注意: 新增或者删除某项端口监控,不需要重启端口监控服务 prometheus配置123456scrape_configs: - job_name: &apos;monitor-port&apos; scrape_interval: 10s static_configs: - targets: - &quot;ip:port&quot;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[grafana重置admin密码]]></title>
    <url>%2Fposts%2Fdf81973d.html</url>
    <content type="text"><![CDATA[已知admin密码修改新密码API 接口12345curl -X PUT -H &quot;Content-Type: application/json&quot; -d &apos;&#123; &quot;oldPassword&quot;: &quot;admin&quot;, &quot;newPassword&quot;: &quot;newpass&quot;, &quot;confirmNew&quot;: &quot;newpass&quot;&#125;&apos; http://admin:admin@&lt;your_grafana_host&gt;:3000/api/user/password ui界面直接进界面修改 忘记admin密码重置密码命令行1grafana-cli admin reset-admin-password ... If running the command returns this error: Could not find config defaults, make sure homepath command line parameter is set or working directory is homepath then there are two flags that can be used to set homepath and the config file path. 1grafana-cli --homepath &quot;/usr/share/grafana&quot; admin reset-admin-password newpass 修改数据库1update user set password = &apos;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&apos;, salt = &apos;F3FAxVm33R&apos; where login = &apos;admin&apos;;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx日志计算带宽]]></title>
    <url>%2Fposts%2F9dfl28ic.html</url>
    <content type="text"><![CDATA[概述nginx的日志中记录了$body_bytes_sent 字段，表示发送给客户端的字节数（不包括响应头的大小），通过计算该字段，然后乘以合理的TCP和HTTP损耗，就可以得出带宽的值。 实现方法12345678910#!/bin/bash#get dateDATE=`date +%d/%b/%Y:%H:%M -d &quot;2 min ago&quot;`TOTALBYTE1=`grep &quot;$DATE&quot; /data/nginxlog/aaa.com.log |awk &apos;&#123;print $11&#125;&apos; | cut -d &apos;[&apos; -f2|cut -d &apos;]&apos; -f1 | grep -v - | awk &apos;&#123;sum+=$1&#125; END &#123;printf (&quot;%.2f\n&quot;,sum*8/60/1024/1024*1.09)&#125;&apos; `TOTALBYTE2=`grep &quot;$DATE&quot; /data/nginxlog/bbb.log |awk &apos;&#123;print $11&#125;&apos; | cut -d &apos;[&apos; -f2|cut -d &apos;]&apos; -f1 |grep -v -| awk &apos;&#123;sum+=$1&#125; END &#123;printf (&quot;%.2f\n&quot;,sum*8/60/1024/1024*1.09)&#125;&apos; `#TCP损耗+9%，最终单位是Mbpsecho &quot;aaa.com : $TOTALBYTE1 Mbps&quot;echo &quot;bbb.com: $TOTALBYTE2 Mbps&quot;]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pod的安全策略]]></title>
    <url>%2Fposts%2F7fdlafl5.html</url>
    <content type="text"><![CDATA[简述最近在给k8s的一些java应用，包括lua项目，做火焰图的安装，后经仔细研究发现，火焰图安装需要打开docker的安全限制，由于我的环境基本都是在k8s中不熟的，所以找了一些文档，总结了下pod的安全策略。 PSPPod Security Policy, 是用于检查 Pod 安全的对象。他可以限制 Pod 是否可以使用特权模式，挂载主机目录等等。 限制范围 是否特权模式 Running of privileged containers privileged 是否root namespace Usage of the root namespaces hostPID, hostIPC 是否主机网络模式 Usage of host networking and ports hostNetwork, hostPorts 可以选择存储类型 Usage of volume types volumes 可以挂载主机哪些目录 Usage of the host filesystem allowedHostPaths lvm? White list of FlexVolume drivers allowedFlexVolumes Allocating an FSGroup that owns the pod’s volumes fsGroup read only root file Requiring the use of a read only root file system readOnlyRootFilesystem user in ctr The user and group IDs of the container runAsUser, supplementalGroups Restricting escalation to root privileges allowPrivilegeEscalation, defaultAllowPrivilegeEscalation Linux capabilities defaultAddCapabilities, requiredDropCapabilities, allowedCapabilities SELinux The SELinux context of the container seLinux The AppArmor profile used by containers annotations The seccomp profile used by containers annotations The sysctl profile used by containers annotations 策略实例最宽松策略 123456789101112131415161718192021222324252627apiVersion: policy/v1beta1kind: PodSecurityPolicymetadata: name: privileged annotations: seccomp.security.alpha.kubernetes.io/allowedProfileNames: &apos;*&apos;spec: privileged: true allowPrivilegeEscalation: true allowedCapabilities: - &apos;*&apos; volumes: - &apos;*&apos; hostNetwork: true hostPorts: - min: 0 max: 65535 hostIPC: true hostPID: true runAsUser: rule: &apos;RunAsAny&apos; seLinux: rule: &apos;RunAsAny&apos; supplementalGroups: rule: &apos;RunAsAny&apos; fsGroup: rule: &apos;RunAsAny&apos; 最严格的限制 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748apiVersion: policy/v1beta1kind: PodSecurityPolicymetadata: name: restricted annotations: seccomp.security.alpha.kubernetes.io/allowedProfileNames: &apos;docker/default&apos; apparmor.security.beta.kubernetes.io/allowedProfileNames: &apos;runtime/default&apos; seccomp.security.alpha.kubernetes.io/defaultProfileName: &apos;docker/default&apos; apparmor.security.beta.kubernetes.io/defaultProfileName: &apos;runtime/default&apos;spec: privileged: false # Required to prevent escalations to root. allowPrivilegeEscalation: false # This is redundant with non-root + disallow privilege escalation, # but we can provide it for defense in depth. requiredDropCapabilities: - ALL # Allow core volume types. volumes: - &apos;configMap&apos; - &apos;emptyDir&apos; - &apos;projected&apos; - &apos;secret&apos; - &apos;downwardAPI&apos; # Assume that persistentVolumes set up by the cluster admin are safe to use. - &apos;persistentVolumeClaim&apos; hostNetwork: false hostIPC: false hostPID: false runAsUser: # Require the container to run without root privileges. rule: &apos;MustRunAsNonRoot&apos; seLinux: # This policy assumes the nodes are using AppArmor rather than SELinux. rule: &apos;RunAsAny&apos; supplementalGroups: rule: &apos;MustRunAs&apos; ranges: # Forbid adding the root group. - min: 1 max: 65535 fsGroup: rule: &apos;MustRunAs&apos; ranges: # Forbid adding the root group. - min: 1 max: 65535 readOnlyRootFilesystem: false 开启 PSP 功能管理员需要关心这一章节。普通用户可以跳过。 Pod 安全检查的功能已经编译在 kube-apiserver 中。当 api server 接收到创建 Pod 的请求，他会检查 Pod 的各个参数，匹配创建者所能使用的策略。如果没有策略可以匹配，则 Pod 不会被创建。 只需要在 kube-apiserver 启动参数 --admission-control= 的值列表中加入 PodSecurityPolicy 就会开启检查。 从 1.10 开始，当 kube-apiserver 使用 Static Pod 的方式启动时会有一些问题。kube-apiserver 启动参数加入 PodSecurityPolicy 之后，他本身的 Pod 会因为没有匹配的策略而无法启动。 启动 kube-apiserver 的创建者是 group system:node。所以需要提前给他绑定绑定一个拥有 PSP 策略的角色。 创建规则 创建上一章节中的 最宽松策略。或者其他你觉得合适的规则。 创建角色。 1234567891011apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRolemetadata: name: privileged-userrules:- apiGroups: [&quot;extensions&quot;] resourceNames: - privileged # &lt;-- 上文中 `最宽松策略` resources: [&quot;podsecuritypolicies&quot;] verbs: - use 绑定账户和角色 12345678910111213apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBindingmetadata: name: privileged-users namespace: kube-systemroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: privileged-user # &lt;-- 上一步中创建的角色subjects:- kind: Group apiGroup: rbac.authorization.k8s.io name: system:nodes # &lt;-- 创建 kube-apiserver 的账户 修改 kube-apiserver 参数 cp /etc/kubernetes/manifests/kube-apiserver.yaml ./ vim kube-apiserver.yaml 在 --admission-control= 末尾加 ,PodSecurityPolicy cp kube-apiserver.yaml /etc/kubernetes/manifests/kube-apiserver.yaml 确保 kube-apiserver 启动 kubectl -n kube-system get pods | grep api 能看到 pod 。 如果看不到，请从头看一遍文章。 如果还不行请参考 k8s 最新文档。 使用 用户创建 Pod Service Account 创建 Pod 用户创建 Pod通常我们并不直接创建 Pod。这里只是为了理解各对象之间的关系。 可以快速浏览至下一小节[Service Account 创建 Pod] 确定使用哪个用户 1kubectl config view 可以看到当前命令行的配置。参考 current-context, context 可以知道默认用的那个用户。 这里如下用户作为例子。 12345678910111213141516171819apiVersion: v1clusters:- cluster: certificate-authority-data: REDACTED server: https://*.*.*.*:* name: kubernetescontexts:- context: cluster: kubernetes user: kubernetes-admin # &lt;--- 3. 具体使用的用户 name: kubernetes-admin@kubernetes # &lt;--- 2. current-context: kubernetes-admin@kubernetes # &lt;--- 1. current-contextkind: Configpreferences: &#123;&#125;users:- name: kubernetes-admin user: client-certificate-data: REDACTED client-key-data: REDACTED 这里看到 kubectl 使用的就是 user kubernetes-admin@kubernetes。我们假设 kubernetes-admin@kubernetes 是个普通用户，目前不能创建 Pod 。 创建规则 这里说的规则就是 PodSecutityPolicy 对象本身，也可以说是 psp 资源。psp 资源是 cluster scoped，不分 namespace。 这里使用前文中的 最宽松策略。也可以使用其他你觉得合适的规则。如果已经创建，则不需要重复创建。 kubectl get psp 查看已有 psp 资源。 最宽松策略 123456789101112131415161718192021222324252627apiVersion: policy/v1beta1kind: PodSecurityPolicymetadata: name: privileged annotations: seccomp.security.alpha.kubernetes.io/allowedProfileNames: &apos;*&apos;spec: privileged: true allowPrivilegeEscalation: true allowedCapabilities: - &apos;*&apos; volumes: - &apos;*&apos; hostNetwork: true hostPorts: - min: 0 max: 65535 hostIPC: true hostPID: true runAsUser: rule: &apos;RunAsAny&apos; seLinux: rule: &apos;RunAsAny&apos; supplementalGroups: rule: &apos;RunAsAny&apos; fsGroup: rule: &apos;RunAsAny&apos; 创建角色 在 default namespace 下创建一个角色。 123456789101112kind: RoleapiVersion: rbac.authorization.k8s.io/v1metadata: namespace: default name: privileged-userrules:- apiGroups: [&quot;extensions&quot;] resourceNames: - privileged # &lt;--- psp 资源 resources: [&quot;podsecuritypolicies&quot;] verbs: - use 绑定角色和用户 12345678910111213kind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: name: a-privileged-user namespace: defaultsubjects:- kind: User name: kubernetes-admin@kubernetes # &lt;--- 我们假设的用户 apiGroup: rbac.authorization.k8s.ioroleRef: kind: Role name: privileged-user # &lt;--- 要绑的角色 apiGroup: rbac.authorization.k8s.io 创建 Pod 1234567891011apiVersion: v1kind: Podmetadata: name: my-podspec: containers: - name: nginx image: hub.xfyun.cn/devops/alpine-curl:3.6 command: [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;sleep 1000000&quot;] ports: - containerPort: 80 Service Account 创建 Pod当用命令行直接创建 Pod 时(kubectl apply -f pod.yaml)。通常都是用某个 User 作为创建者。 当通过 Deployment，StatefulSet 这类对象创建 Pod 时。Pod 的创建者是 Service Account 类型的。 当没有明确指定 Service Account 时，将会使用所在 namespace 下名为 default 的 Service Account。所以只要给 default Service Account 绑定 privileged-user 就可以了。 当在 Pod 的 spec 中明确定义了所使用的 serviceAccountName ，那么将会使用指定的。 所以只要给对应的 Service Account 绑定 privileged-user 就可以了。可以参考如下绑定。 绑定 default Service Account 123456789101112apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBindingmetadata: name: defaultroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: privileged-usersubjects:- kind: ServiceAccount name: default # &lt;--- 或者其他 sa namespace: default 以上是 psp 的基本使用。下边是扩展技巧。 绑定角色使用 ClusterRoleRole 资源是 namespace scoped。仅限所在的 namespace 使用。当在不同 namespace 中使用同一个 psp 策略时，需要创建不同的 Role。这个时候可以使用 ClusterRole。 ClusterRole 是 cluster scoped 资源。当用 ClusterRoleBinding 绑定 ClusterRole 和账户时。此账户就在集群范围内拥有了 ClusterRole 定义的权限。 当在 RoleBinding 中绑定 ClusterRole 和账户时。此账户就只在 RoleBinding 所在 namespace 中拥有 ClusterRole 定义的权限。 这样就可以给不同账户绑定同一个角色。 123456789101112apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBinding # &lt;--- RoleBindingmetadata: name: defaultroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole # &lt;--- ClusterRole name: privileged-usersubjects:- kind: ServiceAccount name: default namespace: default 绑定账户使用 Group当使用 RoleBinding 时可以在 namespace 范围内给所有 Service Account 或者所有认证用户绑定角色。 123456789101112131415161718apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBinding # &lt;--- RoleBindingmetadata: name: default namespace: defaultroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: privileged-usersubjects:# Authorize all service accounts in a namespace:- kind: Group apiGroup: rbac.authorization.k8s.io name: system:serviceaccounts# Or equivalently, all authenticated users in a namespace:- kind: Group apiGroup: rbac.authorization.k8s.io name: system:authenticated 对于 kube-system ns 和集群管理方的 ns 可以直接授权所有 service account 高权限角色。 1234567891011121314apiVersion: rbac.authorization.k8s.io/v1beta1kind: RoleBinding # &lt;--- RoleBindingmetadata: name: default namespace: kube-systemroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: privileged-usersubjects:# Authorize all service accounts in a namespace:- kind: Group apiGroup: rbac.authorization.k8s.io name: system:serviceaccounts 火焰图123456一个简单的基于cpu的火焰图https://github.com/jvm-profiling-tools/async-profiler虚拟机使用:./profiler.sh -d 30 -f /tmp/flamegraph.svg 8983docker使用:--security-opt=seccomp:unconfined 123psp出自：https://github.com/fanux/fist/blob/master/namespace/psp.mdhttps://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s的event信息存在es]]></title>
    <url>%2Fposts%2Faov65voo.html</url>
    <content type="text"><![CDATA[eventer配置123456789101112131415161718192021222324apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: kube-eventer namespace: kube-systemspec: replicas: 1 template: metadata: labels: task: monitoring k8s-app: kube-eventer annotations: scheduler.alpha.kubernetes.io/critical-pod: &apos;&apos; spec: serviceAccount: dashboard-admin containers: - name: kube-eventer image: registry.cn-hangzhou.aliyuncs.com/acs/kube-eventer-amd64:v1.1.0-c93a835-aliyun imagePullPolicy: IfNotPresent command: - /kube-eventer - --source=kubernetes:https://kubernetes.default - --sink=elasticsearch:http://10.16.16.13:9200?sniff=false&amp;ver=6 参考链接 https://github.com/AliyunContainerService/kube-eventer/blob/master/docs/en/elasticsearch-sink.md]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[(转载)k8s部署npd和eventer]]></title>
    <url>%2Fposts%2Fal716c5c.html</url>
    <content type="text"><![CDATA[前言在kubernetes中，会将交付场景中的大部分实体都抽象为一个逻辑的概念，例如：接入层抽象为Service，存储层抽象为PV/PVC，不同种类的应用抽象为Deployment、StatefulSet等等。这种抽象的方式不仅仅将交付变成了软件定义式的配置，更多的是规约了一种标准化，这种标准化不仅仅是交付内容的标准化，也包括了交付方式的标准化，甚至交付生命周期的标准化。 交付内容的标准化与交付方式的标准化是非常好理解的，那么交付生命周期的标准化怎么理解呢。我们可以通过kubectl describe deploy [deploy name]的方式查看一个Deployment的状态描述。 NPDNode的主要影响kuberntes稳定性的因素硬件错误 CPU坏了 Memory坏了 磁盘坏了 kernel问题 kernel deadlock (内核死锁) corrupted file systems (文件系统崩溃) unresponsive runtime daemons (系统运行后台进程无响应) docker问题 unresponsive runtime daemons (docker后台进程无响应) docker image error (docker文件系统错误) Node问题上报机制Kubernetes支持两种上报机制： NodeCondition(节点状况): 这是指永久性的错误，它将造成pod无法在这个节点运行。这个节点状况只有在节点重启后才会被重置 Event(事件): 影响节点的临时性问题，但是它是对于系统诊断是有意义的 Node Problem Detector(NPD)NPD就是利用kubernetes的上报机制，通过检测系统的日志（例如centos中journal），把错误的信息上报到kuberntes的node上。 安装12345git clone https://github.com/vipdocker/npd-centos.gitcd npd-centoschmod +x init-configmap.sh./init-configmap.shkubectl create -f npd.yaml eventer钉钉报警123456789101112131415161718192021222324apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: kube-eventer namespace: kube-systemspec: replicas: 1 template: metadata: labels: task: monitoring k8s-app: kube-eventer annotations: scheduler.alpha.kubernetes.io/critical-pod: &apos;&apos; spec: serviceAccount: admin containers: - name: kube-eventer image: registry.cn-hangzhou.aliyuncs.com/acs/kube-eventer-amd64:v1.0.0-d9898e1-aliyun imagePullPolicy: IfNotPresent command: - /kube-eventer - --source=kubernetes:https://kubernetes.default - --sink=dingtalk:[your_webhook_url]&amp;label=[your_cluster_id]&amp;level=[可选参数:Normal或者Warning，默认值为：Warning] sls报警123456789101112131415161718192021222324apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: kube-eventer namespace: kube-systemspec: replicas: 1 template: metadata: labels: task: monitoring k8s-app: kube-eventer annotations: scheduler.alpha.kubernetes.io/critical-pod: &apos;&apos; spec: serviceAccount: admin containers: - name: kube-eventer image: registry.cn-hangzhou.aliyuncs.com/acs/kube-eventer-amd64:v1.0.0-d9898e1-aliyun imagePullPolicy: IfNotPresent command: - /kube-eventer - --source=kubernetes:https://kubernetes.default - --sink=sls:https://sls.aliyuncs.com?logStore=[your_logstore]&amp;project=[your_project] 文章出自https://yq.aliyun.com/articles/653451?spm=a2c4e.11153940.0.0.2ae96c9dHfwXlu https://yq.aliyun.com/articles/656266?spm=a2c4e.11155435.0.0.6cbe5749apvHLq]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[docker打基础镜像处理僵尸进程]]></title>
    <url>%2Fposts%2Fkd0d98lk.html</url>
    <content type="text"><![CDATA[在使用docker容器的时候，应该了解“PID1僵尸进程reap”问题。如果使用的时候不加注意，可能会导致出现一些意想不到的问题。 问题僵尸进程僵尸进程是指完成执行（通过exit系统调用，或运行时发生致命错误或收到终止信号所致），但在操作系统进程表中仍然有一个表项，处于“终止状态”的进程。这发生于子进程需要保留表项以允许其父进程读取子进程的exit status：一旦退出态通过wait系统调用读取，僵尸进程条目就从进程表中删除，这个过程被称为reap。正常情况下，进程直接被其父进程wait并由系统回收，进程长时间保持僵尸状态一般是错误的并导致资源泄漏。 英语中的zombie process源自丧尸–不死之人，隐喻进程已死大但没有被reap。与正常进程不同，kill命令对僵尸进程无效。孤儿进程不同于僵尸进程，其父进程已经死掉，但孤儿进程仍能正常执行，并不会变为僵尸进程，因为init进程会收养并wait其退出。 子进程死后，系统会发送SIGCHLD信号给父进程，父进程对其默认处理是忽略。如果想响应这个消息，父进程通常在SIGCHLD信号处理程序中，使用wait系统调用来响应子进程的终止。 僵尸进程被reap后，其进程号与在进程表中的表项都可以被系统重用。但如果父进程没有调用wait，僵尸进程将保留进程表中的表项，导致资源泄漏。 reap僵尸进程的方式是通过kill命令手工向其父进程发送SIGCHLD信号，如果其父进程仍然拒绝reap僵尸进程，则终止父进程，使得init进程收养僵尸进程。init进程周期执行wait系统调用reap其所收养的所有僵尸进程。 为避免产生僵尸进程，实际应用中一般采取的方式是： 将父进程中对SIGCHLD信号的处理函数设置SIG_IGN fork两次并杀死一级自进程，令二级子进程成为孤儿进程而被init所“收养”、清理 解决办法Tini是能想到的最简单的init。 Tini一般在容器中运行，用于生成子进程，等待它推出，reap僵尸进程，并执行信号转发。 在github上是这么介绍的： 123456Why Tini?Using Tini has several benefits:It protects you from software that accidentally creates zombie processes, which can (over time!) starve your entire system for PIDs (and make it unusable).It ensures that the default signal handlers work for the software you run in your Docker image. For example, with Tini, SIGTERM properly terminates your process even if you didn&apos;t explicitly install a signal handler for it.It does so completely transparently! Docker images that work without Tini will work with Tini without any changes. docker打一个tomcat镜像措施 基于以上要求我们构建出一下镜像 首先使用apline作为基础镜像足够小只有5M 由于alpine自带支持中文的字符集，这里我们只需要将LANG设置为C.UTF-8即可完美的支持中文。 国内软件源首选阿里云啦，顺道配置一下阿里云的镜像源，加速我们的镜像构建速度。 配置UTC+8时区需要安装tzdata，安装完成之后配置一下即可。 使用tini 包装java进程。 dockerfiletini的dockerfile12345678910111213FROM alpine:3.8ENV LANG=C.UTF-8 \ JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk/jre \ PATH=$PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin \ TZ=Asia/ShanghaiRUN echo &quot;&quot; &gt; /etc/apk/repositories \&amp;&amp; echo &quot;https://mirrors.aliyun.com/alpine/v3.8/main/&quot; &gt;&gt; /etc/apk/repositories \&amp;&amp; echo &quot;https://mirrors.aliyun.com/alpine/v3.8/community/&quot; &gt;&gt; /etc/apk/repositories \&amp;&amp; apk update &amp;&amp; apk add --no-cache openjdk8-jre openjdk8 ca-certificates tzdata tini \&amp;&amp; apk add --update procps \&amp;&amp; rm -rf /var/cache/apk/* \&amp;&amp; ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezoneENTRYPOINT [&quot;tini&quot;] tomcat的dockerfile12345FROM sy:tiniADD apache-tomcat-8.5.43.tar.gz /opt/CMD [&quot;/sbin/tini&quot;, &quot;--&quot;,&quot;/opt/apache-tomcat-8.5.43/bin/catalina.sh&quot;,&quot;run&quot;] 1docker build -t sy-tomcat:tini -f Dockerfile . 这样打完的镜像不仅小，也解决了僵尸进程，包括jmap等命令用不了的问题]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubectl的替代工具kubeman]]></title>
    <url>%2Fposts%2Fal019dlf.html</url>
    <content type="text"><![CDATA[介绍一个很有意思的小工具叫 kubeman，野心倒是不小，励志成为 kubectl 的替代品，用于实时监控和管理 kubernetes 集群，还可以调试与 Istio 相关的问题。 如果只使用 kubectl，当网格中的服务出现问题时，可能需要运行很多命令，而且要交叉引用来自多个命令的输出信息，这就会导致问题分析的过程很复杂。kubeman 将这些交叉引用和相关信息分析的复杂逻辑隐藏起来，只暴露一个 UI 界面，针对每一种资源对象封装了一些常用的操作项，这样可以简化很多操作流程。 windows和mac安装windows和mac安装很简单，到 release 页面下载相应的二进制，然后直接运行就好了 。 要是windows想执行linux的k8s集群，把.kube目录拷贝到/user/administrator下面就可以 linux安装1234567891011121314下载kubeman.0.5.0.appimagechmod a+x *.appimagewget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -ivh epel-release-latest-7.noarch.rpmyum --enablerepo=epel -y install fuse-sshfsuser=&quot;$(whoami)&quot;usermod -a -G fuse &quot;$user&quot;yum provides */libgtk-3.so.0yum -y install /usr/lib64/libgtk-3.so.0 /usr/lib/libgtk-3.so.0./kubeman.0.5.0.appimage --appimage-extract启动的话，如果linux没开display，就需要用xmanager执行就可以命令是：./kubeman.0.5.0.appimage 效果命令 日志 测服务可达]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[harbor修改了docker默认网卡失效原因]]></title>
    <url>%2Fposts%2Fdf013ja9.html</url>
    <content type="text"><![CDATA[问题修改了docker的默认网段，但是harbor启动时候又会出现docker默认的网段，故现找下原因 Docker修改默认的网段删除原有配置1234service docker stopip link set dev docker0 downbrctl delbr docker0iptables -t nat -F POSTROUTING 创建新的网桥123brctl addbr docker0ip addr add 192.17.10.1/24 dev docker0ip link set dev docker0 up 配置Docker的文件注意： 这里是 增加下面的配置 123456vi /etc/docker/daemon.json[root@bogon ~]# cat /etc/docker/daemon.json ##追加的即可&#123;&quot;registry-mirrors&quot;: [&quot;http://224ac393.m.daocloud.io&quot;], &quot;bip&quot;: &quot;192.17.10.1/24&quot;&#125;[root@bogon ~]# systemctl restart docker 启动harbor12345678910111213141516171819202122232425262728293031[root@ceph harbor]# docker-compose up -dCreating network &quot;harbor_harbor&quot; with the default driverCreating harbor-log ... doneCreating registry ... doneCreating harbor-db ... doneCreating harbor-adminserver ... doneCreating harbor-ui ... doneCreating nginx ... doneCreating harbor-jobservice ... done[root@ceph harbor]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:50:56:b1:6e:40 brd ff:ff:ff:ff:ff:ff inet 192.168.6.101/24 brd 192.168.6.255 scope global noprefixroute ens160 valid_lft forever preferred_lft forever inet6 fe80::250:56ff:feb1:6e40/64 scope link valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:47:80:80:47 brd ff:ff:ff:ff:ff:ff inet 192.17.10.1/24 brd 172.17.10.255 scope global docker0 valid_lft forever preferred_lft forever4: br-0b90f672a48b: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:c0:31:37:91 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.18.255.255 scope global br-0b90f672a48b valid_lft forever preferred_lft forever inet6 fe80::42:c0ff:fe31:3791/64 scope link 可以看到又启动了docker的默认网段，由于docker-compose up创建新的网桥的时候都是使用默认的172网段的 解决12345678910[root@ceph harbor]# cat /etc/docker/daemon.json&#123; &quot;debug&quot; : true, &quot;default-address-pools&quot; : [ &#123; &quot;base&quot; : &quot;12.11.0.0/16&quot;, &quot;size&quot; : 24 &#125; ]&#125; 1234567891011121314151617181920212223[root@ceph harbor]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:50:56:b1:6e:40 brd ff:ff:ff:ff:ff:ff inet 192.168.6.101/24 brd 192.168.6.255 scope global noprefixroute ens160 valid_lft forever preferred_lft forever inet6 fe80::250:56ff:feb1:6e40/64 scope link valid_lft forever preferred_lft forever19: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:b5:b4:c9:0b brd ff:ff:ff:ff:ff:ff inet 12.11.0.1/24 brd 12.11.0.255 scope global docker0 valid_lft forever preferred_lft forever20: br-6a72f517b541: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default link/ether 02:42:e4:23:a8:f5 brd ff:ff:ff:ff:ff:ff inet 12.11.1.1/24 brd 12.11.1.255 scope global br-6a72f517b541 valid_lft forever preferred_lft forever inet6 fe80::42:e4ff:fe23:a8f5/64 scope link valid_lft forever preferred_lft forever 也可以直接修改docker-compose文件 123456networks: harbor: external: false ipam: config: - subnet: 10.48.255.120/24]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控bind-dns]]></title>
    <url>%2Fposts%2Fpa8193ja.html</url>
    <content type="text"><![CDATA[监控dnsExport BIND(named/dns) v9+ service metrics to Prometheus. 监控bind的dns，需要先检查下支不支持libxml2 ，另外： Configure BIND to open a statistics channel. It’s recommended to run the bind_exporter next to BIND, so it’s only necessary to open a port locally. 1234567go get github.com/digitalocean/bind_exportercd $GOPATH/src/github.com/digitalocean/bind_exportermake./bind_exporter [flags]启动：nohup /root/gopath/bin/bind_exporter --bind.pid-file=/var/run/named/named.pid --bind.timeout=20s --web.listen-address=0.0.0.0:9119 --web.telemetry-path=/metrics --bind.stats-url=http://localhost:53/ --bind.stats-groups=server,view,tasks &amp; prometheus配置12345- job_name: &apos;dns-master&apos; scrape_interval: 10s static_configs: - targets: - &apos;192.168.xx.xx:9119&apos; grafana模板quot;__inputs&quot;: [ &#123; &quot;name&quot;: &quot;DS_PROMETHEUS&quot;, &quot;label&quot;: &quot;Prometheus&quot;, &quot;description&quot;: &quot;&quot;, &quot;type&quot;: &quot;datasource&quot;, &quot;pluginId&quot;: &quot;prometheus&quot;, &quot;pluginName&quot;: &quot;Prometheus&quot; &#125; ], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.4.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;datasource&quot;, &quot;id&quot;: &quot;prometheus&quot;, &quot;name&quot;: &quot;Prometheus&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot;Bind DNS Service Statistics.\r\n&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 1666, &quot;graphTooltip&quot;: 0, &quot;id&quot;: null, &quot;iteration&quot;: 1567133451901, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 19, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Dashboard Row&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 3, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 1 &#125;, &quot;id&quot;: 3, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 3, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_process_cpu_seconds_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Named CPU Time&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;s&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 10 &#125;, &quot;id&quot;: 20, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Dashboard Row&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 11 &#125;, &quot;id&quot;: 4, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;Max File Descriptors&quot;, &quot;fill&quot;: 0 &#125; ], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;bind_process_max_fds&#123;alias=\&quot;$alias\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Max&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;bind_process_open_fds&#123;alias=\&quot;$alias\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Open&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;File Descriptors&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 32, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123; &quot;Resident&quot;: &quot;#890F02&quot;, &quot;Virtual&quot;: &quot;#0A437C&quot;, &quot;Virtual Memory&quot;: &quot;#0A437C&quot; &#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 2, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 11 &#125;, &quot;id&quot;: 5, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 3, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;bind_process_virtual_memory_bytes&#123;alias=\&quot;$alias\&quot;&#125;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Virtual&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;bind_process_resident_memory_bytes&#123;alias=\&quot;$alias\&quot;&#125;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Resident&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Memory&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 18 &#125;, &quot;id&quot;: 21, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Dashboard Row&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 19 &#125;, &quot;id&quot;: 6, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_incoming_queries_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; type &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Incoming Queries&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 19 &#125;, &quot;id&quot;: 7, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_incoming_requests_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; opcode &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Incoming Request Opcodes&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 26 &#125;, &quot;id&quot;: 8, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_responses_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; result &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Response Results&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 33 &#125;, &quot;id&quot;: 22, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Dashboard Row&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 34 &#125;, &quot;id&quot;: 9, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_query_duplicates_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Duplicates&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_query_errors_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; error &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_query_recursions_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;Recursions&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Queries&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 41 &#125;, &quot;id&quot;: 23, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Resolver&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 42 &#125;, &quot;id&quot;: 10, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;bind_resolver_cache_rrsets&#123;alias=\&quot;$alias\&quot;&#125;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; type &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Resolver Cache RR Sets&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 42 &#125;, &quot;id&quot;: 11, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_resolver_dnssec_validation_errors_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / ValErr&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_dnssec_validation_success_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; result &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;DNSSEC Validation&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 8, &quot;x&quot;: 0, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 12, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_resolver_queries_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; type &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Resolver Queries&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 8, &quot;x&quot;: 8, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 13, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_resolver_query_errors_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; error &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_query_edns0_errors_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / EDNS0&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_query_retries_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / Retry&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Query Errors&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 8, &quot;x&quot;: 16, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 14, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_resolver_query_duration_seconds_bucket&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; le &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Query By Duration&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 56 &#125;, &quot;id&quot;: 15, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(bind_resolver_response_errors_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / &#123;&#123; error &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_response_lame_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / LAME&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_response_mismatch_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / MISMATCH&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;increase(bind_resolver_response_truncated_total&#123;alias=\&quot;$alias\&quot;&#125;[120s])&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; view &#125;&#125; / TRUNCATED&quot;, &quot;refId&quot;: &quot;D&quot;, &quot;step&quot;: 4, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Resolver Response Errors&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;dns&quot;, &quot;bind&quot;, &quot;prometheus&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;definition&quot;: &quot;&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;Host&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;alias&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(bind_up, alias)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-15m&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;DNS&quot;, &quot;uid&quot;: &quot;5vjIqbKZk&quot;, &quot;version&quot;: 5&#125;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控kafka]]></title>
    <url>%2Fposts%2Fda383afl.html</url>
    <content type="text"><![CDATA[监控方式默认情况下, Kafka metrics 所有的 metric 都可以通过 JMX 获取，暴露kafka metrics 支持两种方式1.在 Kafka Broker 外部, 作为一个独立进程, 通过 JMX 的 RMI 接口读取数据. 这种方式的好处是有任何调整不需要重启 Kafka Broker 进程, 缺点是多维护了一个独立的进程。2.在 Kafka Broker 进程内部读取 JMX 数据, 这样解析数据的逻辑就在 Kafka Broker 进程内部, 如果有任何调整, 需要重启 Broker。选择暴露 kafka-metric 方式。 选择暴露 kafka-metric 方式第一种需要外部多维护一个程序，而且还要考虑之后各种版本升级，实现起来比较繁琐，还好的是github上有许多优秀的开源kafka_exporter 下载过来直接启动就好了。简单介绍下 git项目地址：https://github.com/danielqsj/kafka_exporter 读取 JMX 的数据jmx_prometheus_httpserver 通过独立进程读取 JMX 的数据jmx_prometheus_javaagent 使用 Java Agent 方式, 尽量无侵入(仅需在 java 命令行中使用 -javaagent 参数)的启动 in-process library, 读取 JMX 数据.Prometheus 采用了 PULL 方式, Prometheus 主动抓取 metrics 数据, 而不是靠客户端主动 PUSH 数据, 因此 jmx_prometheus 都是通过暴露 HTTP 端口的方式暴露 metrics 数据, 方便 Prometheus 抓取数据. 选第二种方式监控123wget https://raw.githubusercontent.com/prometheus/jmx_exporter/master/example_configs/kafka-2_0_0.ymlwget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.12.0/jmx_prometheus_javaagent-0.12.0.jar 在kafka-server-start.sh添加几行 12export JMX_PORT=&quot;9999&quot;export KAFKA_OPTS=&quot;-javaagent:/path/jmx_prometheus_javaagent-0.6.jar=9991:/path/kafka-2_0_0.yml&quot; prometheus配置123456- job_name: &apos;kafka-cluster&apos; static_configs: - targets: - &apos;192.168.xx.xx:9991&apos; - &apos;192.168.xx.xx:9991&apos; - &apos;192.168.xx.xx:9991&apos; grafana模板quot;__inputs&quot;: [ &#123; &quot;name&quot;: &quot;DS_PROMETHEUS&quot;, &quot;label&quot;: &quot;Prometheus&quot;, &quot;description&quot;: &quot;&quot;, &quot;type&quot;: &quot;datasource&quot;, &quot;pluginId&quot;: &quot;prometheus&quot;, &quot;pluginName&quot;: &quot;Prometheus&quot; &#125; ], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.4.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;datasource&quot;, &quot;id&quot;: &quot;prometheus&quot;, &quot;name&quot;: &quot;Prometheus&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;singlestat&quot;, &quot;name&quot;: &quot;Singlestat&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot;Example of an Kafka Dashboard for DC/OS 1.12&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 9018, &quot;graphTooltip&quot;: 0, &quot;id&quot;: null, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 114, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(process_cpu_seconds_total&#123;job=\&quot;kafka-cluster\&quot;&#125;[1m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;CPU Usage&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 118, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum without(gc)(rate(jvm_gc_collection_seconds_sum&#123;job=\&quot;kafka-cluster\&quot;&#125;[5m]))&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Time spent in GC&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 17, &quot;x&quot;: 3, &quot;y&quot;: 10 &#125;, &quot;id&quot;: 116, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum without(area)(jvm_memory_bytes_used&#123;job=\&quot;kafka-cluster\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;JVM Memory Used&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 19 &#125;, &quot;id&quot;: 38, &quot;panels&quot;: [], &quot;title&quot;: &quot;&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 20 &#125;, &quot;id&quot;: 120, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum without(instance)(rate(kafka_server_brokertopicmetrics_bytesin_total&#123;job=\&quot;kafka-cluster\&quot;,topic!=\&quot;\&quot;&#125;[5m]))&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Bytes In Per Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 20 &#125;, &quot;id&quot;: 122, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum without(instance)(rate(kafka_server_brokertopicmetrics_bytesout_total&#123;job=\&quot;kafka-cluster\&quot;,topic!=\&quot;\&quot;&#125;[5m]))&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Bytes Out Per Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: true, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 2, &quot;description&quot;: &quot;Average messages per second per Kafka broker&quot;, &quot;fill&quot;: 0, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 8, &quot;x&quot;: 0, &quot;y&quot;: 29 &#125;, &quot;id&quot;: 108, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(irate(kafka_server_brokertopicmetrics_messagesin_total[1m])) by (topic)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Kafka avg msg/sec (1m) by Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: true, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 2, &quot;description&quot;: &quot;Average messages per second per Kafka broker&quot;, &quot;fill&quot;: 0, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 8, &quot;x&quot;: 8, &quot;y&quot;: 29 &#125;, &quot;id&quot;: 110, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(irate(kafka_server_brokertopicmetrics_messagesin_total[5m])) by (topic)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Kafka avg msg/sec (5m) by Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: true, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 1, &quot;description&quot;: &quot;Average messages per second per Kafka broker&quot;, &quot;fill&quot;: 0, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 8, &quot;x&quot;: 16, &quot;y&quot;: 29 &#125;, &quot;id&quot;: 109, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: false, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;hideEmpty&quot;: false, &quot;hideZero&quot;: false, &quot;max&quot;: true, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(irate(kafka_server_brokertopicmetrics_messagesin_total[15m])) by (topic)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: false, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Kafka avg msg/sec (15m) by Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: true, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Number of leaders on this broker. This should be mostly even across all brokers. If not, set auto.leader.rebalance.enable to true on all brokers in the cluster.&quot;, &quot;fill&quot;: 2, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 39 &#125;, &quot;id&quot;: 50, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 5, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_server_replicamanager_leadercount)by(instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Number of Leaders per Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Number of partitions on this broker. This should be mostly even across all brokers.&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 39 &#125;, &quot;id&quot;: 60, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;(kafka_server_replicamanager_partitioncount)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Partition Count Across Brokers&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 48 &#125;, &quot;id&quot;: 40, &quot;panels&quot;: [], &quot;title&quot;: &quot;Broker Info&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;The first node to boot in a Kafka cluster automatically becomes the controller, and there can be only one. The controller in a Kafka cluster is responsible for maintaining the list of partition leaders, and coordinating leadership transitions (in the event a partition leader becomes unavailable). If it becomes necessary to replace the controller, a new controller is randomly chosen by ZooKeeper from the pool of brokers. In general, it is not possible for this value to be greater than one, but you should definitely alert on a value of zero that lasts for more than a short period (&lt; 1s) of time.&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 0, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 26, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_controller_kafkacontroller_activecontrollercount)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;true,false&quot;, &quot;title&quot;: &quot;ActiveControllerCount&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;True&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;False&quot;, &quot;value&quot;: &quot;0&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;description&quot;: &quot;In a healthy cluster, the number of in sync replicas (ISRs) should be exactly equal to the total number of replicas. If partition replicas fall too far behind their leaders, the follower partition is removed from the ISR pool, and you should see a corresponding increase in IsrShrinksPerSec. Since Kafka’s high-availability guarantees cannot be met without replication, investigation is certainly warranted should this metric value exceed zero for extended time periods.\n\nIf this metric has a value greater than 1 it means that data is not being replicated to enough number of brokers thereby increasing the probability of data loss.&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 3, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 28, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_cluster_partition_underreplicated)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;1,1&quot;, &quot;title&quot;: &quot;Under Replicated Partitions&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 6, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 30, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_controller_kafkacontroller_offlinepartitionscount)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;1,1&quot;, &quot;title&quot;: &quot;Offline Partitions&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#d44a3a&quot;, &quot;#629e51&quot;, &quot;#c15c17&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: false &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 9, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 44, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_replicamanager_partitioncount)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: false, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Total Partition Count&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#d44a3a&quot;, &quot;#629e51&quot;, &quot;#c15c17&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;description&quot;: &quot;The number of in-sync replicas (ISRs) for a particular partition should remain fairly static, the only exceptions are when you are expanding your broker cluster or removing partitions. In order to maintain high availability, a healthy Kafka cluster requires a minimum number of ISRs for failover. A replica could be removed from the ISR pool for a couple of reasons: it is too far behind the leader’s offset (user-configurable by setting the replica.lag.max.messages configuration parameter), or it has not contacted the leader for some time (configurable with the replica.socket.timeout.ms parameter). No matter the reason, an increase in IsrShrinksPerSec without a corresponding increase in IsrExpandsPerSec shortly thereafter is cause for concern and requires user intervention.The Kafka documentation provides a wealth of information on the user-configurable parameters for brokers.&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 12, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 34, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_replicamanager_isrexpands_total)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;ISR Expansion Rate&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#d44a3a&quot;, &quot;#629e51&quot;, &quot;#299c46&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;description&quot;: &quot;The number of in-sync replicas (ISRs) for a particular partition should remain fairly static, the only exceptions are when you are expanding your broker cluster or removing partitions. In order to maintain high availability, a healthy Kafka cluster requires a minimum number of ISRs for failover. A replica could be removed from the ISR pool for a couple of reasons: it is too far behind the leader’s offset (user-configurable by setting the replica.lag.max.messages configuration parameter), or it has not contacted the leader for some time (configurable with the replica.socket.timeout.ms parameter). No matter the reason, an increase in IsrShrinksPerSec without a corresponding increase in IsrExpandsPerSec shortly thereafter is cause for concern and requires user intervention.The Kafka documentation provides a wealth of information on the user-configurable parameters for brokers.&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 2, &quot;x&quot;: 15, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 32, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_replicamanager_isrshrinks_total)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;ISR Shrink Rate&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#629e51&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Number of requests waiting in the producer purgatory. This should be non-zero when acks=all is used on the producer.&quot;, &quot;format&quot;: &quot;short&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 17, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 103, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_delayedoperationpurgatory_numdelayedoperations)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Producer Purgatory Requests Waiting&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#d44a3a&quot;, &quot;#629e51&quot;, &quot;#299c46&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 20, &quot;y&quot;: 49 &#125;, &quot;id&quot;: 36, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_server_delayedoperationpurgatory_purgatorysize)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Delayed Fetch Operation Purgatory Size&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Generally, disk throughput tends to be the main bottleneck in Kafka performance. However, that’s not to say that the network is never a bottleneck. Depending on your use case, hardware, and configuration, the network can quickly become the slowest segment of a message’s trip, especially if you are sending messages across data centers. Tracking network throughput on your brokers gives you more information as to where potential bottlenecks may lie, and can inform decisions like whether or not you should enable end-to-end compression of your messages.&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 53 &#125;, &quot;id&quot;: 20, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(kafka_server_brokertopicmetrics_bytesin_total[1m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;15s&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;All Bytes In (1min) per Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: &quot;0&quot;, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Generally, disk throughput tends to be the main bottleneck in Kafka performance. However, that’s not to say that the network is never a bottleneck. Depending on your use case, hardware, and configuration, the network can quickly become the slowest segment of a message’s trip, especially if you are sending messages across data centers. Tracking network throughput on your brokers gives you more information as to where potential bottlenecks may lie, and can inform decisions like whether or not you should enable end-to-end compression of your messages.&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 53 &#125;, &quot;id&quot;: 22, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(kafka_server_brokertopicmetrics_bytesout_total[1m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;All Bytes Out (1min) per Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Generally, disk throughput tends to be the main bottleneck in Kafka performance. However, that’s not to say that the network is never a bottleneck. Depending on your use case, hardware, and configuration, the network can quickly become the slowest segment of a message’s trip, especially if you are sending messages across data centers. Tracking network throughput on your brokers gives you more information as to where potential bottlenecks may lie, and can inform decisions like whether or not you should enable end-to-end compression of your messages.&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 62 &#125;, &quot;id&quot;: 51, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: true, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(kafka_server_brokertopicmetrics_bytesin_total[15m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;15s&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;All Bytes In (15min) per Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Generally, disk throughput tends to be the main bottleneck in Kafka performance. However, that’s not to say that the network is never a bottleneck. Depending on your use case, hardware, and configuration, the network can quickly become the slowest segment of a message’s trip, especially if you are sending messages across data centers. Tracking network throughput on your brokers gives you more information as to where potential bottlenecks may lie, and can inform decisions like whether or not you should enable end-to-end compression of your messages.&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 62 &#125;, &quot;id&quot;: 52, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(kafka_server_brokertopicmetrics_bytesout_total[15m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;All Bytes Out (15min) per Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 71 &#125;, &quot;id&quot;: 93, &quot;panels&quot;: [], &quot;title&quot;: &quot;Leaders&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: null, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 6, &quot;x&quot;: 0, &quot;y&quot;: 72 &#125;, &quot;id&quot;: 64, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_controller_controllerstats_leaderelectionrateandtimems)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Max Recorded Leader Election Latency&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: null, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 6, &quot;x&quot;: 6, &quot;y&quot;: 72 &#125;, &quot;id&quot;: 65, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;#629e51&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_controller_controllerstats_uncleanleaderelectionenablerateandtimems)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Unclean Leader Elections (15min)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 6, &quot;x&quot;: 12, &quot;y&quot;: 72 &#125;, &quot;id&quot;: 69, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_server_replicafetchermanager_maxlag)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Max Lag - Follower/Leader Replicas&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Time the request waits for the follower. This is non-zero for produce requests when acks=all&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 6, &quot;x&quot;: 18, &quot;y&quot;: 72 &#125;, &quot;id&quot;: 85, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_totaltimems&#123;request=\&quot;FetchFollower\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;hide&quot;: false, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg Time Request Waits for Follower (ms)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 74 &#125;, &quot;id&quot;: 91, &quot;panels&quot;: [], &quot;title&quot;: &quot;Requests&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#508642&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Size of the request queue. A congested request queue will not be able to process incoming or outgoing requests&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 0, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 83, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_network_requestchannel_requestqueuesize)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Current Request Queue Size&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#508642&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 3, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 81, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_totaltimems&#123;request=\&quot;Produce\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg Produce Time (ms)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#508642&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 6, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 89, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_responsesendtimems&#123;request=\&quot;FetchConsumer\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg FetchConsumer Time (ms)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Time the request is processed at the leader&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 5, &quot;x&quot;: 9, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 77, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_localtimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg Request Processing Time (ms) at Leader&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Time the request waits in the request queue&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 5, &quot;x&quot;: 14, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 79, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_requestqueuetimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg Request Waiting Time in Request Queue (ms)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;ms&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 5, &quot;x&quot;: 19, &quot;y&quot;: 75 &#125;, &quot;id&quot;: 87, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_requestmetrics_responsequeuetimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Avg Request Waiting Time in Response Queue (ms)&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 79 &#125;, &quot;id&quot;: 56, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_brokertopicmetrics_totalproducerequests_total) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: false, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Produce Request Rate / sec (15min) by Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 79 &#125;, &quot;id&quot;: 58, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_brokertopicmetrics_totalfetchrequests_total) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Fetch Request Rate / sec (15min) by Broker&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 88 &#125;, &quot;id&quot;: 111, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_brokertopicmetrics_totalproducerequests_total) by (topic)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Produce Request Rate / sec (15min) by Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 88 &#125;, &quot;id&quot;: 112, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(kafka_server_brokertopicmetrics_totalfetchrequests_total) by (topic)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;topic&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Fetch Request Rate / sec (15min) by Topic&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 97 &#125;, &quot;id&quot;: 46, &quot;panels&quot;: [], &quot;title&quot;: &quot;Network Info&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 98 &#125;, &quot;id&quot;: 54, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;max(kafka_server_fetcherstats_requests_total) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Network Request Rate / sec (15min)&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Average fraction of time the network processor threads are idle. Values are between 0 (all resources are used) and 1 (all resources are available)&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 98 &#125;, &quot;id&quot;: 48, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(kafka_network_processor_idlepercent) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-networkprocessor_0&quot;, &quot;refId&quot;: &quot;A&quot; &#125;, &#123; &quot;expr&quot;: &quot;avg(kafka_network_processor_idlepercent) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-networkprocessor_1&quot;, &quot;refId&quot;: &quot;B&quot; &#125;, &#123; &quot;expr&quot;: &quot;avg(kafka_network_processor_idlepercent) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-networkprocessor_2&quot;, &quot;refId&quot;: &quot;C&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Network Processor Idle (%)&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;percent&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;请求(producer,Fetch-Consumer,Fetch-Follower)在请求队列中的等待时间&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 107 &#125;, &quot;id&quot;: 126, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_requestqueuetimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;请求在请求队列等待时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;请求(producer,Fetch-Consumer,Fetch-Follower)等待follower花费的时间&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 107 &#125;, &quot;id&quot;: 134, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_remotetimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[15m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;等待follower花费的时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Time the request waits in the response queue&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 116 &#125;, &quot;id&quot;: 132, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_responsequeuetimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;请求在响应队列中等待的时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;请求(producer,Fetch-Consumer,Fetch-Follower)在leader处理请求花的时间&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 116 &#125;, &quot;id&quot;: 124, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_localtimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;leader处理请求花费的时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;一个请求(producer,Fetch-Consumer,Fetch-Follower)耗费的所有时间&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 125 &#125;, &quot;id&quot;: 128, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_totaltimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;(producer,Fetch-Consumer,Fetch-Follower)请求耗费的所有时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;Time to send the response&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 125 &#125;, &quot;id&quot;: 130, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(kafka_network_requestmetrics_responsesendtimems&#123;request =~ \&quot;Produce|FetchConsumer|FetchFollower\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;instance&#125;&#125;-&#123;&#123;request&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;发送响应花费的时间&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;refresh&quot;: &quot;1m&quot;, &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [], &quot;templating&quot;: &#123; &quot;list&quot;: [] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-15m&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;&quot;, &quot;title&quot;: &quot;Kafka Dashboard&quot;, &quot;uid&quot;: &quot;Vbm7Botmk&quot;, &quot;version&quot;: 5&#125;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[es的导出与导入]]></title>
    <url>%2Fposts%2Fdkl0afl6.html</url>
    <content type="text"><![CDATA[elasticdump迁移，导出，导入es数据的工具 命令安装node，npm install elasticdump 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Copy an index from production to staging with analyzer and mapping:elasticdump \ --input=http://production.es.com:9200/my_index \ --output=http://staging.es.com:9200/my_index \ --type=analyzerelasticdump \ --input=http://production.es.com:9200/my_index \ --output=http://staging.es.com:9200/my_index \ --type=mappingelasticdump \ --input=http://production.es.com:9200/my_index \ --output=http://staging.es.com:9200/my_index \ --type=data# Backup index data to a file:elasticdump \ --input=http://production.es.com:9200/my_index \ --output=/data/my_index_mapping.json \ --type=mappingelasticdump \ --input=http://production.es.com:9200/my_index \ --output=/data/my_index.json \ --type=data# Backup and index to a gzip using stdout:elasticdump \ --input=http://production.es.com:9200/my_index \ --output=$ \ | gzip &gt; /data/my_index.json.gz# Backup the results of a query to a fileelasticdump \ --input=http://production.es.com:9200/my_index \ --output=query.json \ --searchBody=&apos;&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;username&quot;: &quot;admin&quot;&#125;&#125;&#125;&apos;# Copy a single shard data:elasticdump \ --input=http://es.com:9200/api \ --output=http://es.com:9200/api2 \ --params=&apos;&#123;&quot;preference&quot; : &quot;_shards:0&quot;&#125;&apos;# Backup aliases to a fileelasticdump \ --input=http://es.com:9200/index-name/alias-filter \ --output=alias.json \ --type=alias# Import aliases into ESelasticdump \ --input=./alias.json \ --output=http://es.com:9200 \ --type=alias# Backup templates to a fileelasticdump \ --input=http://es.com:9200/template-filter \ --output=templates.json \ --type=template# Import templates into ESelasticdump \ --input=./templates.json \ --output=http://es.com:9200 \ --type=template# Split files into multiple partselasticdump \ --input=http://production.es.com:9200/my_index \ --output=/data/my_index.json \ --fileSize=10mb# Import data from S3 into ES (using s3urls)elasticdump \ --s3AccessKeyId &quot;$&#123;access_key_id&#125;&quot; \ --s3SecretAccessKey &quot;$&#123;access_key_secret&#125;&quot; \ --input &quot;s3://$&#123;bucket_name&#125;/$&#123;file_name&#125;.json&quot; \ --output=http://production.es.com:9200/my_index# Export ES data to S3 (using s3urls)elasticdump \ --s3AccessKeyId &quot;$&#123;access_key_id&#125;&quot; \ --s3SecretAccessKey &quot;$&#123;access_key_secret&#125;&quot; \ --input=http://production.es.com:9200/my_index \ --output &quot;s3://$&#123;bucket_name&#125;/$&#123;file_name&#125;.json&quot;]]></content>
      <categories>
        <category>elk</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubeadm安装1.15版本]]></title>
    <url>%2Fposts%2Fdal17dfj.html</url>
    <content type="text"><![CDATA[环境准备hosts12[root@node1 ~]# cat /etc/hosts192.168.3.195 node1 创建/etc/sysctl.d/k8s.conf文件12345[root@node1 ~]# cat /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness=0 12modprobe br_netfiltersysctl -p /etc/sysctl.d/k8s.conf 添加ipvs12345678 cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF&gt; #!/bin/bash&gt; modprobe -- ip_vs&gt; modprobe -- ip_vs_rr&gt; modprobe -- ip_vs_wrr&gt; modprobe -- ip_vs_sh&gt; modprobe -- nf_conntrack_ipv4&gt; EOF 1chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4 安装ipset和ipvsadm包 1yum install ipset ipvsadm -y 关闭swap1swapoff -a 安装docker123yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 123yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 安最新的版本： 1yum install docker-ce-19.03.1-3.el7 -y 安加速，并且修改cgroup driver根据文档CRI installation中的内容，对于使用systemd作为init system的Linux的发行版，使用systemd作为docker的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。 123456789101112131415systemctl start docker[root@node1 ~]# cat /etc/docker/daemon.json &#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;registry-mirrors&quot; : [ &quot;https://ot2k4d59.mirror.aliyuncs.com/&quot; ]&#125;[root@node1 ~]# systemctl restart docker[root@node1 ~]# systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. 安装k8s配置yum源12345678910cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF 安装 kubeadm、kubelet、kubectl12yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable kubelet.service 看下版本： 12[root@node1 ~]# kubeadm versionkubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;15&quot;, GitVersion:&quot;v1.15.3&quot;, GitCommit:&quot;2d3c76f9091b6bec110a5e63777c332469e0cba2&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2019-08-19T11:11:18Z&quot;, GoVersion:&quot;go1.12.9&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125; 注意：如果是多master，多节点，以上操作是所有节点都操作 初始化集群导出初始化配置1kubeadm config print init-defaults &gt; kubeadm.yaml 修改文件： 12345678910111213141516171819202122232425262728293031323334353637383940414243[root@node1 ~]# vim kubeadm.yaml apiVersion: kubeadm.k8s.io/v1beta2bootstrapTokens:- groups: - system:bootstrappers:kubeadm:default-node-token token: abcdef.0123456789abcdef ttl: 24h0m0s usages: - signing - authenticationkind: InitConfigurationlocalAPIEndpoint: advertiseAddress: 192.168.3.195 bindPort: 6443nodeRegistration: criSocket: /var/run/dockershim.sock name: node1 taints: - effect: NoSchedule key: node-role.kubernetes.io/master---apiServer: timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: type: CoreDNSetcd: local: dataDir: /var/lib/etcdimageRepository: gcr.azk8s.cn/google_containerskind: ClusterConfigurationkubernetesVersion: v1.15.3networking: dnsDomain: cluster.local serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;---apiVersion: kubeproxy.config.k8s.io/v1alpha1kind: KubeProxyConfigurationmode: ipvs 初始化1234567[root@node1 ~]# kubeadm init --config kubeadm.yaml[init] Using Kubernetes version: v1.15.3[preflight] Running pre-flight checks [WARNING SystemVerification]: this Docker version is not on the list of validated versions: 19.03.1. Latest validated version: 18.09[preflight] Pulling images required for setting up a Kubernetes cluster[preflight] This might take a minute or two, depending on the speed of your internet connection[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos; kubeconfig123[root@node1 ~]# mkdir -p $HOME/.kube[root@node1 ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config[root@node1 ~]# chown $(id -u):$(id -g) $HOME/.kube/config 添加节点12kubeadm join 192.168.3.195:6443 --token abcdef.0123456789abcdef \ --discovery-token-ca-cert-hash sha256:d7a1b3c27a35944a335dfdf7c1a9de051d8ab0dc20510516c75efe7f77721301 如果忘记了上面的 join 命令可以使用命令kubeadm token create --print-join-command重新获取。 123[root@node1 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONnode1 NotReady master 2m34s v1.15.3 calico下载 1wget https://docs.projectcalico.org/v3.8/manifests/calico.yaml 修改下yaml文件 12345678910111213141516171819202122- name: calico-node image: calico/node:v3.8.2 env: # Use Kubernetes API as the backing datastore. - name: DATASTORE_TYPE value: &quot;kubernetes&quot; - name: IP_AUTODETECTION_METHOD # DaemonSet中添加该环境变量 value: interface=ens160 # Wait for the datastore. - name: WAIT_FOR_DATASTORE value: &quot;true&quot; # Set based on the k8s node name. - name: NODENAME valueFrom: fieldRef: fieldPath: spec.nodeName # Choose the backend to use. - name: CALICO_NETWORKING_BACKEND valueFrom: configMapKeyRef: name: calico-config key: calico_backend 123456789101112131415161718192021222324[root@node1 ~]# kubectl apply -f calico.yaml configmap/calico-config createdcustomresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org createdcustomresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org createdclusterrole.rbac.authorization.k8s.io/calico-kube-controllers createdclusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers createdclusterrole.rbac.authorization.k8s.io/calico-node createdclusterrolebinding.rbac.authorization.k8s.io/calico-node createddaemonset.apps/calico-node createdserviceaccount/calico-node createddeployment.apps/calico-kube-controllers createdserviceaccount/calico-kube-controllers created 1234567891011[root@node1 ~]# kubectl get pods -n kube-system NAME READY STATUS RESTARTS AGEcalico-kube-controllers-65b8787765-dv7m6 1/1 Running 0 82scalico-node-gzggt 1/1 Running 0 82scoredns-cf8fb6d7f-hm8jn 1/1 Running 0 10mcoredns-cf8fb6d7f-jff7n 1/1 Running 0 10metcd-node1 1/1 Running 0 9m23skube-apiserver-node1 1/1 Running 0 9m25skube-controller-manager-node1 1/1 Running 0 9m20skube-proxy-2mjhd 1/1 Running 0 10mkube-scheduler-node1 1/1 Running 0 9m7s 123[root@node1 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONnode1 Ready master 10m v1.15.3]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubectl-debug]]></title>
    <url>%2Fposts%2F028aakr3.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s-pod工作流程]]></title>
    <url>%2Fposts%2Fdl1039sa.html</url>
    <content type="text"><![CDATA[组件之间的通信我们知道在Kubernetes集群中apiserver是整个集群的控制入口，etcd在集群中充当数据库的作用，只有apiserver才可以直接去操作etcd集群，而我们的apiserver无论是对内还是对外都提供了统一的REST API服务，包括一个8080端口的非安全服务和6443端口的安全服务。组件之间当然也是通过apiserver进行通信的，其中kube-controller-manager、kube-scheduler、kubelet是通过apiserver watch API来监控我们的资源变化，并且对资源的相关状态更新操作也都是通过apiserver进行的，所以说白了组件之间的通信就是通过apiserver REST API和apiserver watch API进行的。 pod工作流程 第一步通过apiserver REST API创建一个Pod 然后apiserver接收到数据后将数据写入到etcd中 由于kube-scheduler通过apiserver watch API一直在监听资源的变化，这个时候发现有一个新的Pod，但是这个时候该Pod还没和任何Node节点进行绑定，所以kube-scheduler就经过一系列复杂的调度策略，选择出一个合适的Node节点，将该Pod和该目标Node进行绑定，当然也会更新到etcd中去的 这个时候一样的目标Node节点上的kubelet通过apiserver watch API检测到有一个新的Pod被调度过来了，他就将该Pod的相关数据传递给后面的容器运行时(container runtime)，比如Docker，让他们去运行该Pod 而且kubelet还会通过container runtime获取Pod的状态，然后更新到apiserver中，当然最后也是写入到etcd中去的。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s-ControllerManager工作流程]]></title>
    <url>%2Fposts%2Fdl657gr1.html</url>
    <content type="text"><![CDATA[Controller Manager简介Controller Manager在Pod工作流中起着管理和控制整个集群的作用，主要对资源对象进行管理，当Node节点中运行的Pod对象或是Node自身发生意外或故障时，Controller Manager会及时发现并处理，以确保整个集群处于理想工作状态。 Replication ControllerReplication Controller称为副本控制器，在Pod工作流中主要用于保证集群中Replication Controller所关联的Pod副本数始终保持在预期值，比如若发生节点故障的情况导致Pod被意外杀死，Replication Controller会重新调度保证集群仍然运行指定副本数，另外还可通过调整Replication Controller中spec.replicas属性值来实现扩容或缩容。 Endpoint ControllerEndpoint用来表示kubernetes集群中Service对应的后端Pod副本的访问地址，Endpoint Controller则是用来生成和维护Endpoints对象的控制器，其主要负责监听Service和对应Pod副本变化。如果监测到Service被删除，则删除和该Service同名的Endpoints对象；如果监测到新的Service被创建或是被修改，则根据该Service信息获得相关的Pod列表，然后创建或更新对应的Endpoints对象；如果监测到Pod的事件，则更新它对应的Service的Endpoints对象。 Node Controller123456controller manager 判断是否有 --cluster-cidr 参数, 如果有在每个节点设置spec.PodCIDR 并保障cidr 不冲突逐个读取Node 信息, 多次尝试修改nodeStatusMap中的节点状态信息, 将该节点信息和 Node Controller 的 nodeStatusMap 中保存的信息作比较.如果判断出没有收到 kubelet 发送的信息, 第一次收到 kubelet 发送的的节点信息, 或在该处理过程中节点状态编程非&quot;健康&quot;, 则在 nodeStatusMap 中保存该节点状态信息, 并用 Node Controller 所在节点的系统时间,作为探测时间和节点状态变化时间.如果判断出在指定时间内受到的新的节点信息, 且节点状态发生变化, 则在 nodeStatusMap 中保存该界节点的状态信息. 并用 Node Controller 所在节点的系统时间,作为探测时间和节点状态变化时间.如果判断出在指定时间内收到新的节点信息, 但状态没有变化则在 nodeStatusMap 中保存该节点的状态信息. 并用 Node Controller 所在节点的系统时间作为探测时间, 将上次节点信息中的节点状态变化时间作为该节点的状态变化时间. 如果判断出某段时间(gracePeriod) 内没有收到节点状态信息, 则设置节点状态为&quot;位置&quot;, 并通过api server 保存节点状态.]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s-schedule工作流程]]></title>
    <url>%2Fposts%2Fdk8k79hg.html</url>
    <content type="text"><![CDATA[调度流程kube-scheduler 是 kubernetes 的调度器，它的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 PodSpec.NodeName 为空的 Pod，对每个 Pod 都会创建一个 binding。 123456789调度器需要充分考虑诸多的因素：- 公平调度- 资源高效利用- QoS- affinity 和 anti-affinity- 数据本地化（data locality）- 内部负载干扰（inter-workload interference）- deadlines 调度主要分为以下几个部分： 首先是预选过程，过滤掉不满足条件的节点，这个过程称为Predicates 然后是优选过程，对通过的节点按照优先级排序，称之为Priorities 最后从中选择优先级最高的节点，如果中间任何一步骤有错误，就直接返回错误 PredicatesPredicates阶段首先遍历全部节点，过滤掉不满足条件的节点，属于强制性规则，这一阶段输出的所有满足要求的 Node 将被记录并作为第二阶段的输入，如果所有的节点都不满足条件，那么 Pod 将会一直处于 Pending 状态，直到有节点满足条件，在这期间调度器会不断的重试。 PrioritiesPriorities阶段即再次对节点进行筛选，如果有多个节点都满足条件的话，那么系统会按照节点的优先级(priorites)大小对节点进行排序，最后选择优先级最高的节点来部署 Pod 应用。 流程12345671、首先，客户端通过 API Server 的 REST API 或者 kubectl 工具创建 Pod 资源2、API Server 收到用户请求后，存储相关数据到 etcd 数据库中3、调度器监听 API Server 查看为调度(bind)的 Pod 列表，循环遍历地为每个 Pod 尝试分配节点，这个分配过程就是我们上面提到的两个阶段： 预选阶段(Predicates)，过滤节点，调度器用一组规则过滤掉不符合要求的 Node 节点，比如 Pod 设置了资源的 request，那么可用资源比 Pod 需要的资源少的主机显然就会被过滤掉 优选阶段(Priorities)，为节点的优先级打分，将上一阶段过滤出来的 Node 列表进行打分，调度器会考虑一些整体的优化策略，比如把 Deployment 控制的多个 Pod 副本分布到不同的主机上，使用最低负载的主机等等策略4、经过上面的阶段过滤后选择打分最高的 Node 节点和 Pod 进行 binding 操作，然后将结果存储到 etcd 中5、最后被选择出来的 Node 节点对应的 kubelet 去执行创建 Pod 的相关操作 其中Predicates过滤有一系列的算法可以使用： PodFitsResources：节点上剩余的资源是否大于 Pod 请求的资源 PodFitsHost：如果 Pod 指定了 NodeName，检查节点名称是否和 NodeName 匹配 PodFitsHostPorts：节点上已经使用的 port 是否和 Pod 申请的 port 冲突 PodSelectorMatches：过滤掉和 Pod 指定的 label 不匹配的节点 NoDiskConflict：已经 mount 的 volume 和 Pod 指定的 volume 不冲突，除非它们都是只读的 CheckNodeDiskPressure：检查节点磁盘空间是否符合要求 CheckNodeMemoryPressure：检查节点内存是否够用 Priorities优先级是由一系列键值对组成的，键是该优先级的名称，值是它的权重值： LeastRequestedPriority：通过计算 CPU 和内存的使用率来决定权重，使用率越低权重越高，当然正常肯定也是资源是使用率越低权重越高，能给别的 Pod 运行的可能性就越大 SelectorSpreadPriority：为了更好的高可用，对同属于一个 Deployment 或者 RC 下面的多个 Pod 副本，尽量调度到多个不同的节点上，当一个 Pod 被调度的时候，会先去查找该 Pod 对应的 controller，然后查看该 controller 下面的已存在的 Pod，运行 Pod 越少的节点权重越高 ImageLocalityPriority：就是如果在某个节点上已经有要使用的镜像节点了，镜像总大小值越大，权重就越高 NodeAffinityPriority：这个就是根据节点的亲和性来计算一个权重值，后面我们会详细讲解亲和性的使用方法 优先级源码函数： 1finalScoreNode = (weight1 * priorityFunc1) + (weight2 * priorityFunc2) + … + (weightn * priorityFuncn) 自定义调度调度器扩展kube-scheduler在启动的时候可以通过 --policy-config-file参数来指定调度策略文件，我们可以根据我们自己的需要来组装Predicates和Priority函数。选择不同的过滤函数和优先级函数、控制优先级函数的权重、调整过滤函数的顺序都会影响调度过程。 下面是官方的 Policy 文件示例： 123456789101112131415161718&#123; &quot;kind&quot; : &quot;Policy&quot;, &quot;apiVersion&quot; : &quot;v1&quot;, &quot;predicates&quot; : [ &#123;&quot;name&quot; : &quot;PodFitsHostPorts&quot;&#125;, &#123;&quot;name&quot; : &quot;PodFitsResources&quot;&#125;, &#123;&quot;name&quot; : &quot;NoDiskConflict&quot;&#125;, &#123;&quot;name&quot; : &quot;NoVolumeZoneConflict&quot;&#125;, &#123;&quot;name&quot; : &quot;MatchNodeSelector&quot;&#125;, &#123;&quot;name&quot; : &quot;HostName&quot;&#125; ], &quot;priorities&quot; : [ &#123;&quot;name&quot; : &quot;LeastRequestedPriority&quot;, &quot;weight&quot; : 1&#125;, &#123;&quot;name&quot; : &quot;BalancedResourceAllocation&quot;, &quot;weight&quot; : 1&#125;, &#123;&quot;name&quot; : &quot;ServiceSpreadingPriority&quot;, &quot;weight&quot; : 1&#125;, &#123;&quot;name&quot; : &quot;EqualPriority&quot;, &quot;weight&quot; : 1&#125; ]&#125; 自定义调度自定义调度器主要的功能是查询未调度的 Pod，按照自定义的调度策略选择新的 Node，并将其更新到 Pod 的 Node Binding 上。 比如，一个最简单的调度器可以用 shell 来编写（假设 Kubernetes 监听在 localhost:8001）： 12345678910111213141516#!/bin/bashSERVER=&apos;localhost:8001&apos;while true;do for PODNAME in $(kubectl --server $SERVER get pods -o json | jq &apos;.items[] | select(.spec.schedulerName ==&quot;my-scheduler&quot;) | select(.spec.nodeName == null) | .metadata.name&apos; | tr -d &apos;&quot;&apos;); do NODES=($(kubectl --server $SERVER get nodes -o json | jq &apos;.items[].metadata.name&apos; | tr -d &apos;&quot;&apos;)) NUMNODES=$&#123;#NODES[@]&#125; CHOSEN=$&#123;NODES[$[ $RANDOM % $NUMNODES]]&#125; curl --header &quot;Content-Type:application/json&quot; --request POST --data &apos;&#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;:&quot;Binding&quot;,&quot;metadata&quot;: &#123;&quot;name&quot;:&quot;&apos;$PODNAME&apos;&quot;&#125;,&quot;target&quot;: &#123;&quot;apiVersion&quot;:&quot;v1&quot;,&quot;kind&quot;: &quot;Node&quot;, &quot;name&quot;: &quot;&apos;$CHOSEN&apos;&quot;&#125;&#125;&apos; http://$SERVER/api/v1/namespaces/default/pods/$PODNAME/binding/ echo &quot;Assigned $PODNAME to $CHOSEN&quot; done sleep 1done 使用自定义调度器123456789101112apiVersion: v1kind: Podmetadata: name: nginx labels: app: nginxspec: # 选择使用自定义调度器 my-scheduler schedulerName: my-scheduler containers: - name: nginx image: nginx:1.10 优先级调度Pod优先级、抢占功能，在kubernetes v1.8引入，在v1.11版本进入beta状态，并在v1.14版本进入GA阶段，已经是一个成熟的特性了。 顾名思义，Pod优先级、抢占功能，通过将应用细分为不同的优先级，将资源优先提供给高优先级的应用，从而提高了资源可用率，同时保障了高优先级的服务质量。 我们先来简单使用下Pod优先级、抢占功能。 我的集群版本是 v1.14，因此feature PodPriority 默认是开启的。抢占模式的使用分为两步： 定义PriorityClass，不同PriorityClass的value不同，value越大优先级越高。 创建Pod，并设置Pod的priorityClassName字段为期待的PriorityClass。 查看当前系统默认的优先级： 1234[root@master101 scripts]# kubectl get priorityclasses.scheduling.k8s.ioNAME VALUE GLOBAL-DEFAULT AGEsystem-cluster-critical 2000000000 false 7dsystem-node-critical 2000001000 false 7d 在指定 Pod 的优先级之前需要先定义一个 PriorityClass（非 namespace 资源），如 1234567apiVersion: v1kind: PriorityClassmetadata: name: high-priorityvalue: 1000000globalDefault: falsedescription: &quot;This priority class should be used for XYZ service pods only.&quot; 其中 value 为 32 位整数的优先级，该值越大，优先级越高 globalDefault 用于未配置 PriorityClassName 的 Pod，整个集群中应该只有一个 PriorityClass 将其设置为 true 然后，在 PodSpec 中通过 PriorityClassName 设置 Pod 的优先级： 123456789101112apiVersion: v1kind: Podmetadata: name: nginx labels: env: testspec: containers: - name: nginx image: nginx imagePullPolicy: IfNotPresent priorityClassName: high-priority]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kustomize管理Kubernetes应用]]></title>
    <url>%2Fposts%2Fpjaj999a.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s做命名空间配额]]></title>
    <url>%2Fposts%2Fldfl76la.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.12以上版本设置LXCFS]]></title>
    <url>%2Fposts%2F9jdfjdja.html</url>
    <content type="text"><![CDATA[安装依赖包1yum -y install fuse-devel fuse fuse-libs 使用k8s Daemonsets部署lxcfs123456789101112131415161718192021222324252627282930313233343536373839404142434445apiVersion: apps/v1beta2kind: DaemonSetmetadata: name: lxcfs namespace: default labels: app: lxcfsspec: selector: matchLabels: app: lxcfs template: metadata: labels: app: lxcfs spec: hostPID: true tolerations: - key: node-role.kubernetes.io/master effect: NoSchedule containers: - name: lxcfs image: registry.cn-hangzhou.aliyuncs.com/denverdino/lxcfs:3.0.4 imagePullPolicy: Always securityContext: privileged: true volumeMounts: - name: cgroup mountPath: /sys/fs/cgroup - name: lxcfs mountPath: /var/lib/lxcfs mountPropagation: Bidirectional - name: usr-local mountPath: /usr/local volumes: - name: cgroup hostPath: path: /sys/fs/cgroup - name: usr-local hostPath: path: /usr/local - name: lxcfs hostPath: path: /var/lib/lxcfs type: DirectoryOrCreate 例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768apiVersion: apps/v1kind: Deploymentmetadata: annotations: &quot;initializer.kubernetes.io/lxcfs&quot;: &quot;true&quot; labels: app: web name: webspec: replicas: 1 selector: matchLabels: app: web template: metadata: labels: app: web spec: containers: - name: web image: httpd:2.4.32 volumeMounts: - name: cpuinfo mountPath: /proc/cpuinfo - name: meminfo mountPath: /proc/meminfo - name: diskstats mountPath: /proc/diskstats - name: stat mountPath: /proc/stat - name: swaps mountPath: /proc/swaps - name: uptime mountPath: /proc/uptime imagePullPolicy: Always resources: requests: memory: &quot;1024Mi&quot; cpu: &quot;100m&quot; limits: memory: &quot;1024Mi&quot; cpu: &quot;100m&quot; volumes: - name: cpuinfo hostPath: path: /var/lib/lxcfs/proc/cpuinfo type: File - name: meminfo hostPath: path: /var/lib/lxcfs/proc/meminfo type: File - name: diskstats hostPath: path: /var/lib/lxcfs/proc/diskstats type: File - name: stat hostPath: path: /var/lib/lxcfs/proc/stat type: File - name: swaps hostPath: path: /var/lib/lxcfs/proc/swaps type: File - name: uptime hostPath: path: /var/lib/lxcfs/proc/uptime type: File]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.12以下版本设置LXCFS]]></title>
    <url>%2Fposts%2Fdd6348aa.html</url>
    <content type="text"><![CDATA[LXCFS简介社区中常见的做法是利用lxcfs来提供容器中的资源可见性。lxcfs 是一个开源的FUSE（用户态文件系统）实现来支持LXC容器，它也可以支持Docker容器。 LXCFS通过用户态文件系统，在容器中提供下列 procfs 的文件。 123456/proc/cpuinfo/proc/diskstats/proc/meminfo/proc/stat/proc/swaps/proc/uptime 比如，把宿主机的 /var/lib/lxcfs/proc/memoinfo 文件挂载到Docker容器的/proc/meminfo位置后。容器中进程读取相应文件内容时，LXCFS的FUSE实现会从容器对应的Cgroup中读取正确的内存限制。从而使得应用获得正确的资源约束设定。 Docker环境下LXCFS使用安装 lxcfs 的RPM包 12wget https://copr-be.cloud.fedoraproject.org/results/ganto/lxd/epel-7-x86_64/00486278-lxcfs/lxcfs-2.0.5-3.el7.centos.x86_64.rpmyum install lxcfs-2.0.5-3.el7.centos.x86_64.rpm 启动 lxcfs 1lxcfs /var/lib/lxcfs &amp; 测试 12345678docker run -it -m 256m \ -v /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw \ -v /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw \ -v /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw \ -v /var/lib/lxcfs/proc/stat:/proc/stat:rw \ -v /var/lib/lxcfs/proc/swaps:/proc/swaps:rw \ -v /var/lib/lxcfs/proc/uptime:/proc/uptime:rw \ ubuntu:16.04 /bin/bash 结果 12345678910111213[root@node1 ~]# docker run -it -m 256m \&gt; -v /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw \&gt; -v /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw \&gt; -v /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw \&gt; -v /var/lib/lxcfs/proc/stat:/proc/stat:rw \&gt; -v /var/lib/lxcfs/proc/swaps:/proc/swaps:rw \&gt; -v /var/lib/lxcfs/proc/uptime:/proc/uptime:rw \&gt; ubuntu:16.04 /bin/bashroot@6bcd804eef79:/# free -m total used free shared buff/cache availableMem: 256 0 254 189 0 254Swap: 256 0 256root@6bcd804eef79:/# 我们可以看到total的内存为256MB，配置已经生效。 lxcfs 的 Kubernetes实践在kubernetes中使用lxcfs需要解决两个问题： 第一个问题是每个node上都要启动lxcfs，这个简单，部署一个daemonset就可以了。 第二个问题是将lxcfs维护的/proc文件挂载到每个容器中 在集群节点上安装并启动lxcfs，我们将用Kubernetes的方式，用利用容器和DaemonSet方式来运行 lxcfs FUSE文件系统。 12git clone https://github.com/denverdino/lxcfs-initializercd lxcfs-initializer lxcfs-daemonset1234567891011121314151617181920212223242526272829303132333435363738394041424344apiVersion: apps/v1beta2kind: DaemonSetmetadata: name: lxcfs labels: app: lxcfsspec: selector: matchLabels: app: lxcfs template: metadata: labels: app: lxcfs spec: hostPID: true tolerations: - key: node-role.kubernetes.io/master effect: NoSchedule containers: - name: lxcfs image: registry.cn-hangzhou.aliyuncs.com/denverdino/lxcfs:3.0.4 imagePullPolicy: Always securityContext: privileged: true volumeMounts: - name: cgroup mountPath: /sys/fs/cgroup - name: lxcfs mountPath: /var/lib/lxcfs mountPropagation: Bidirectional - name: usr-local mountPath: /usr/local volumes: - name: cgroup hostPath: path: /sys/fs/cgroup - name: usr-local hostPath: path: /usr/local - name: lxcfs hostPath: path: /var/lib/lxcfs type: DirectoryOrCreate 1kubectl apply -f lxcfs-daemonset.yaml Kubernetes提供了 Initializer 扩展机制，可以用于对资源创建进行拦截和注入处理，我们可以借助它优雅地完成对lxcfs文件的自动化挂载。 lxcfs-initializerInitializer功能开启在Kubernetes 1.13中initializers还是一个alpha特性，需要在Kube-apiserver中添加参数开启。 这里使用的是kubernets 1.12，设置方法是一样的： 12--enable-admission-plugins=&quot;Initializers,NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;--runtime-config=admissionregistration.k8s.io/v1alpha1 --enable-admission-plugins和--admission-control互斥，如果同时设置，kube-apiserver启动报错： 12error: [admission-control and enable-admission-plugins/disable-admission-plugins flags are mutually exclusive, enable-admission-plugins plugin &quot;--runtime-config=admissionregistration.k8s.io/v1alpha1&quot; is unknown] InitializerConfigurationInitializerConfiguration资源中定义了一组的initializers。 每个initializer有一个名字和多个规则，规则中是它要作用的资源，例如下面的initializers中只有一个initializer，名称为podimage.example.com，作用于v1版本的pods。 12345678910111213141516apiVersion: admissionregistration.k8s.io/v1alpha1kind: InitializerConfigurationmetadata: name: example-configinitializers: # the name needs to be fully qualified, i.e., containing at least two &quot;.&quot; - name: podimage.example.com rules: # apiGroups, apiVersion, resources all support wildcard &quot;*&quot;. # &quot;*&quot; cannot be mixed with non-wildcard. - apiGroups: - &quot;&quot; apiVersions: - v1 resources: - pods 在kubernets中创建了上面的initializers之后，新建的pod在pending阶段，metadata中会添加一个initializer列表： 123456metadata: creationTimestamp: 2019-01-09T08:56:36Z generateName: echo-7cfbbd7d49- initializers: pending: - name: podimage.example.com 注意需要加上参数--include-uninitialized=true才能看到处于这个阶段的Pod: 1./kubectl.sh -n demo-echo get pod --include-uninitialized=true -o yaml metadata中initializers列表不为空的Pod，处于正在等待初始化状态，需要部署一个initializer controller对处于这个阶段中的pod完成初始化后， pod才能退出pending状态。。 initializer controller需要自己根据需要实现。 Initializer Controllerinitializer controller监听指定类型的resource，当发现有新创建的resouce创建时，通过检查resource的metadata中的initializer名单，决定是否要对resource进行初始化设置，并且在完成设置之后，需要将对应的initializer名单从resource的metadata中删除，否则resource就一直处于等待初始化设置的状态。 具体实现可以参考lxcfs-initializer。 如果有多个InitializerConfiguration和多个Initializer Controller，会怎样？ 没有在文档中找到具体的说明，k8s的文档中Initializer章节的内容很少，这里通过实验，判断一下。 创建了两个不同名的但是包含相同rule的InitializerConfiguration： 12345678910111213141516apiVersion: admissionregistration.k8s.io/v1alpha1kind: InitializerConfigurationmetadata: name: example-configinitializers: # the name needs to be fully qualified, i.e., containing at least two &quot;.&quot; - name: podimage.example.com rules: # apiGroups, apiVersion, resources all support wildcard &quot;*&quot;. # &quot;*&quot; cannot be mixed with non-wildcard. - apiGroups: - &quot;&quot; apiVersions: - v1 resources: - pods 12345678910111213141516171819202122232425apiVersion: admissionregistration.k8s.io/v1alpha1kind: InitializerConfigurationmetadata: name: example-config-2initializers: # the name needs to be fully qualified, i.e., containing at least two &quot;.&quot; - name: podimage-2.example.com rules: # apiGroups, apiVersion, resources all support wildcard &quot;*&quot;. # &quot;*&quot; cannot be mixed with non-wildcard. - apiGroups: - &quot;&quot; apiVersions: - v1 resources: - pods - name: podimage.example.com rules: # apiGroups, apiVersion, resources all support wildcard &quot;*&quot;. # &quot;*&quot; cannot be mixed with non-wildcard. - apiGroups: - &quot;&quot; apiVersions: - v1 resources: - pods Pod中的metadata是这样的： 12345678metadata: creationTimestamp: 2019-01-10T04:03:12Z generateName: echo-7cfbbd7d49- initializers: pending: - name: podimage.example.com - name: podimage-2.example.com - name: podimage.example.com 之后又通过调整InitializerConfiguration的名称排序、创建的先后顺序、内部的rules的顺序，多次试验之后发现，多个InitializerConfiguration的在metadata中是按照它们的名称排序的，和创建时间无关。 每个InitializerConfiguration中的rules在metadata中顺序与它们定义的顺序一致。 根据lxcfs-initializer的实现以及k8s的文档，Initializer Controller对目标Resource完成设置之后，需要从metadata中移除对应的Initializer。 如果定义了多个Initializer，并且有多个Initializer Controller各自负责不同的Initializer，这时候需要小心设计，既要防止“漏掉”应当处理的Resource，导致Resource长期不落地，又要防止已经被删除的Initializer又被重新写上了，重复处理时出现错误。 根据现在掌握的信息，目前比较稳妥的做法是，将多个Initializer设计为顺序无关，谁先执行都可以，否则只有创建一个InitializerConfiguration，rules的顺序就是Initiliazer的顺序。只设计一个Initializer Controller,或者将多个Initializer Controller设计成串行执行，让它们监测Resource的创建和变化，不仅仅是刚创建，否则一些Initializer可能被漏掉。 lxcfs-initializer这个Initializer只关心ADD事件，如果同时有其它的Initializer Controller存在，可能会漏掉一些Resource。 12345678910_, controller := cache.NewInformer(includeUninitializedWatchlist, &amp;v1.Deployment&#123;&#125;, resyncPeriod, cache.ResourceEventHandlerFuncs&#123; AddFunc: func(obj interface&#123;&#125;) &#123; err := initializeDeployment(obj.(*v1.Deployment), c, clientset) if err != nil &#123; log.Println(err) &#125; &#125;, &#125;,) 实例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: lxcfs-initializer-default namespace: defaultrules:- apiGroups: [&quot;*&quot;] resources: [&quot;pods&quot;] verbs: [&quot;initialize&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;watch&quot;, &quot;list&quot;]---apiVersion: v1kind: ServiceAccountmetadata: name: lxcfs-initializer-service-account namespace: default---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: name: lxcfs-initializer-role-bindingsubjects:- kind: ServiceAccount name: lxcfs-initializer-service-account namespace: defaultroleRef: kind: ClusterRole name: lxcfs-initializer-default apiGroup: rbac.authorization.k8s.io---apiVersion: apps/v1kind: Deploymentmetadata: initializers: pending: [] labels: app: lxcfs-initializer name: lxcfs-initializerspec: replicas: 1 selector: matchLabels: app: lxcfs-initializer template: metadata: labels: app: lxcfs-initializer spec: serviceAccountName: lxcfs-initializer-service-account containers: - name: lxcfs-initializer image: registry.cn-hangzhou.aliyuncs.com/denverdino/lxcfs-initializer:0.0.4 imagePullPolicy: Always args: - &quot;-annotation=initializer.kubernetes.io/lxcfs&quot; - &quot;-require-annotation=true&quot;---apiVersion: admissionregistration.k8s.io/v1alpha1kind: InitializerConfigurationmetadata: name: lxcfs.initializerinitializers: - name: lxcfs.initializer.kubernetes.io rules: - apiGroups: - &quot;*&quot; apiVersions: - &quot;*&quot; resources: - pods 首先我们创建了service account lxcfs-initializer-service-account，并对其授权了 “pod” 资源的查找、更改等权限。然后我们部署了一个名为 “lxcfs-initializer” 的Initializer，利用上述SA启动一个容器来处理对 “pod” 资源的创建，如果deployment中包含 initializer.kubernetes.io/lxcfs为true的注释，就会对该应用中容器进行文件挂载 1kubectl apply -f lxcfs-initializer.yaml 下面我们部署一个简单的Apache应用为其分配256MB内存，并且声明了如下注释 &quot;initializer.kubernetes.io/lxcfs&quot;: &quot;true&quot; web.yaml: 1234567891011121314151617181920212223242526272829apiVersion: apps/v1kind: Deploymentmetadata: labels: app: web name: webspec: replicas: 1 selector: matchLabels: app: web template: metadata: annotations: &quot;initializer.kubernetes.io/lxcfs&quot;: &quot;true&quot; labels: app: web spec: containers: - name: web image: httpd:2.4.32 imagePullPolicy: Always resources: requests: memory: &quot;256Mi&quot; cpu: &quot;500m&quot; limits: memory: &quot;256Mi&quot; cpu: &quot;500m&quot; 1kubectl apply -f web.yaml 验证12345kubectl exec web-7f6bc6797c-rb9sk free total used free shared buffers cachedMem: 262144 2876 259268 2292 0 304-/+ buffers/cache: 2572 259572Swap: 0 0 0 注意： 如果自己的k8s版本跟我的不一样，可以kubectl api-versions看看版本]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kubelet资源预留]]></title>
    <url>%2Fposts%2Fak013ldk.html</url>
    <content type="text"><![CDATA[Kubelet Node Allocatable Kubelet Node Allocatable用来为Kube组件和System进程预留资源，从而保证当节点出现满负荷时也能保证Kube和System进程有足够的资源。 目前支持cpu, memory, ephemeral-storage三种资源预留。 Node Capacity是Node的所有硬件资源，kube-reserved是给kube组件预留的资源，system-reserved是给System进程预留的资源， eviction-threshold是kubelet eviction的阈值设定，allocatable才是真正scheduler调度Pod时的参考值（保证Node上所有Pods的request resource不超过Allocatable）。 Node Allocatable Resource = Node Capacity - Kube-reserved - system-reserved - eviction-threshold 如何配置 –enforce-node-allocatable，默认为pods，要为kube组件和System进程预留资源，则需要设置为pods,kube-reserved,system-reserve。 –cgroups-per-qos，Enabling QoS and Pod level cgroups，默认开启。开启后，kubelet会将管理所有workload Pods的cgroups。 –cgroup-driver，默认为cgroupfs，另一可选项为systemd。取决于容器运行时使用的cgroup driver，kubelet与其保持一致。比如你配置docker使用systemd cgroup driver，那么kubelet也需要配置–cgroup-driver=systemd。 –kube-reserved,用于配置为kube组件（kubelet,kube-proxy,dockerd等）预留的资源量，比如—kube-reserved=cpu=1000m,memory=8Gi，ephemeral-storage=16Gi。 –kube-reserved-cgroup，如果你设置了–kube-reserved，那么请一定要设置对应的cgroup，并且该cgroup目录要事先创建好，否则kubelet将不会自动创建导致kubelet启动失败。比如设置为kube-reserved-cgroup=/kubelet.service 。 –system-reserved，用于配置为System进程预留的资源量，比如—system-reserved=cpu=500m,memory=4Gi,ephemeral-storage=4Gi。 –system-reserved-cgroup，如果你设置了–system-reserved，那么请一定要设置对应的cgroup，并且该cgroup目录要事先创建好，否则kubelet将不会自动创建导致kubelet启动失败。比如设置为system-reserved-cgroup=/system.slice。 –eviction-hard，用来配置kubelet的hard eviction条件，只支持memory和ephemeral-storage两种不可压缩资源。当出现MemoryPressure时，Scheduler不会调度新的Best-Effort QoS Pods到此节点。当出现DiskPressure时，Scheduler不会调度任何新Pods到此节点。 Sample123456789101112kubeadm安装的k8s：[root@node1 kubelet.service.d]# systemctl status kubelet● kubelet.service - kubelet: The Kubernetes Node Agent Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled) Drop-In: /usr/lib/systemd/system/kubelet.service.d └─10-kubeadm.conf Active: active (running) since Mon 2019-09-09 13:55:37 CST; 18min ago Docs: https://kubernetes.io/docs/ Main PID: 7768 (kubelet) Tasks: 20 Memory: 43.7M CGroup: /system.slice/kubelet.service 123456789101112[root@node1 kubelet.service.d]# cat 10-kubeadm.conf # Note: This dropin only works with kubeadm and kubelet v1.11+[Service]Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;# This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamicallyEnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.EnvironmentFile=-/etc/sysconfig/kubeletExecStart=ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS 12[root@node1 kubelet.service.d]# cat /var/lib/kubelet/kubeadm-flags.envKUBELET_KUBEADM_ARGS=&quot;--system-reserved=memory=300Mi --kube-reserved=memory=400Mi --eviction-hard=imagefs.available&lt;15%,memory.available&lt;300Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% --cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=gcr.azk8s.cn/google_containers/pause:3.1&quot;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes垃圾回收机制]]></title>
    <url>%2Fposts%2Fladj543a8.html</url>
    <content type="text"><![CDATA[问题发现测试环境上，node节点上面镜像，突然被删除，故查明下删除的原理机制 垃圾回收机制Kubelet的GC功能将清理未使用的image和container。Kubelet每分钟对container执行一次GC，每5分钟对image执行一次GC。不建议使用外部垃圾收集工具，因为这些工具可能破坏Kubelet。 image12Kubernetes与Cadvisor配合，通过ImageManager管理所有image的生命周期。image的GC策略包含高阈值和低阈值，高于高阈值的磁盘使用率将触发GC,删除最近最少使用的图像，直到满足低阈值为止。 container12345678910container的GC主要有3个用户定义变量：MinAge：容器被GC的最短时间MaxPerPodContainer: 允许每个PodContainer中死容器的最大数目,PodContainer指1个Container而非podMaxContainers：死容器的最大数目Minage=0，MaxPerPodContainer和MaxContainers &lt;0, 表示禁用这些变量GC用于unidentified、deleted或超出边界的容器(3个用户定义变量)。最旧的container通常首先被移除。如果MaxPerPodContainer&gt;MaxContainers,maxperpodcontainer会进行调整，直至降级为1，并逐出最旧的容器。pods所拥有的已删除的容器一旦超过MinAge，就会被删除。未由Kubelet管理的容器不受容器垃圾收集的约束。 配置 GC12345678通过修改kubelet flags来实现。image gc参数：image-gc-high-threshold image GC 高阈值百分比，缺省为85%image-gc-low-threshold image GC 低阈值百分比，缺省为80%minimum-container-ttl-duration MinAge参数，缺省为0maximum-dead-containers-per-container MaxPerPodContainer，缺省为1.maximum-dead-containers MaxContainers，缺省为-1, 也就是没有限制Container可能在其到期之前被GC,Container包含日志和其他对故障排除有用的数据。强烈建议MaxPerPodContainer和maximum-dead-containers 足够大。 GC效果配置一个10s后会失败的container 配置文件pod-gc.yaml 123456789101112apiVersion: v1kind: Podmetadata: name: gc-testspec: containers: - name: busybox-gc-1 image: busybox:v1 command: - /bin/sh - -c - &apos;sleep 10 &amp;&amp; hello&apos; 使用yaml创建pod 1kubectl apply -f pod-gc.yaml 查看docker的状态，当出现2个exit的container时，就会出发GC,回收最早的一个container 1234567891011# docker ps -a | grep busybox-gc8ddbfcf4ebee 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; 2 seconds ago Up 1 second k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_57d7c1ade82af 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; About a minute ago Exited (127) About a minute ago k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_4# docker ps -a | grep busybox-gc8ddbfcf4ebee 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; 10 seconds ago Up 9 seconds k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_57d7c1ade82af 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; About a minute ago Exited (127) About a minute ago k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_4# docker ps -a | grep busybox-gc8ddbfcf4ebee 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; 11 seconds ago Exited (127) Less than a second ago k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_57d7c1ade82af 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; About a minute ago Exited (127) About a minute ago k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_4# docker ps -a | grep busybox-gc8ddbfcf4ebee 59788edf1f3e &quot;/bin/sh -c &apos;sleep 1…&quot; 12 seconds ago Exited (127) 1 second ago k8s_busybox-gc-1_gc-test_default_3651c167-75f0-11e9-bc74-52540005f38a_5 修改配置文件/var/lib/kubelet/kubeadm-flags.env增加参数–maximum-dead-containers-per-container=2 1KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.1 --maximum-dead-containers-per-container=2 重启kubelet服务 1systemctl restart kubelet 删除前面的pod 1kubectl delete -f pod-gc.yaml 重新添加pod 1kubectl apply -f pod-gc.yaml 可以看到，当exit的容器达到3个时，才会触发gc 123456789101112131415# docker ps -a | grep busybox-gcc8677098e9aa af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 8 seconds ago Up 8 seconds k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_2f0bc1b7893bd af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 34 seconds ago Exited (127) 23 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_19e7fa118b1d3 af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 45 seconds ago Exited (127) 35 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_0# docker ps -a | grep busybox-gcc8677098e9aa af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 9 seconds ago Up 9 seconds k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_2f0bc1b7893bd af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 35 seconds ago Exited (127) 24 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_19e7fa118b1d3 af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 46 seconds ago Exited (127) 36 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_0# docker ps -a | grep busybox-gcc8677098e9aa af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 10 seconds ago Exited (127) Less than a second ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_2f0bc1b7893bd af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 36 seconds ago Exited (127) 25 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_19e7fa118b1d3 af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 47 seconds ago Exited (127) 36 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_0# docker ps -a | grep busybox-gcc8677098e9aa af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 11 seconds ago Exited (127) 1 second ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_2f0bc1b7893bd af2f74c517aa &quot;/bin/sh -c &apos;sleep 1…&quot; 37 seconds ago Exited (127) 26 seconds ago k8s_busybox-gc-1_gc-test_default_3425a55b-75f5-11e9-bc74-52540005f38a_1]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控redis集群]]></title>
    <url>%2Fposts%2Fskd32aaa.html</url>
    <content type="text"><![CDATA[安装redis_exporter12345678cd /usr/localwget https://github.com/oliver006/redis_exporter/releases/download/v1.0.3/redis_exporter-v1.0.3.linux-amd64.tar.gztar -zxvf redis_exporter-v1.0.3.linux-amd64.tar.gz mv redis_exporter-v1.0.3.linux-amd64 redis_exportercd redis_exporter启动nohup ./redis_exporter -redis.addr 192.168.7.21:6379 192.168.7.21:6380 192.168.7.22:6379 192.168.7.22:6380 192.168.7.23:6379 192.168.7.23:6380 &amp; prometheus配置123456789101112131415161718192021222324252627282930313233343536 - job_name: &apos;redis-cluster&apos; static_configs: - targets: - redis://192.168.7.21:6379 - redis://192.168.7.21:6380 - redis://192.168.7.22:6379 - redis://192.168.7.22:6380 - redis://192.168.7.23:6379 - redis://192.168.7.23:6380 metrics_path: /scrape params: check-keys: [&quot;metrics:*&quot;] relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.7.21:9121 报警：############ redis cluster 监控 ############ - alert: redis连接数超过1000 expr: redis_connected_clients &gt; 1000 for: 2m labels: status: 监控redis连接数 annotations: description: &quot;&#123;&#123;$labels.instance&#125;&#125;: 当前客户端连接数量为&#123;&#123; $value &#125;&#125;&quot; summary: &quot;redis连接数超过1000&quot; grafana导入模板quot;__inputs&quot;: [ &#123; &quot;name&quot;: &quot;DS_PROMETHEUS&quot;, &quot;label&quot;: &quot;Prometheus&quot;, &quot;description&quot;: &quot;&quot;, &quot;type&quot;: &quot;datasource&quot;, &quot;pluginId&quot;: &quot;prometheus&quot;, &quot;pluginName&quot;: &quot;Prometheus&quot; &#125; ], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.4.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;datasource&quot;, &quot;id&quot;: &quot;prometheus&quot;, &quot;name&quot;: &quot;Prometheus&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;singlestat&quot;, &quot;name&quot;: &quot;Singlestat&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot;Prometheus dashboard for Redis servers&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 2751, &quot;graphTooltip&quot;: 0, &quot;id&quot;: null, &quot;iteration&quot;: 1564967488877, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(41, 200, 35, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;s&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 4, &quot;x&quot;: 0, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 9, &quot;interval&quot;: null, &quot;isNew&quot;: true, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;__name__&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;redis_uptime_in_seconds&#123;instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 1800 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Redis Uptime&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;70%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 0, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 4, &quot;x&quot;: 4, &quot;y&quot;: 0 &#125;, &quot;hideTimeOverride&quot;: true, &quot;id&quot;: 12, &quot;interval&quot;: null, &quot;isNew&quot;: true, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;redis_connected_clients&#123;instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 2 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;timeFrom&quot;: &quot;1m&quot;, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Clients&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 8, &quot;x&quot;: 8, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 2, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(redis_commands_processed_total&#123;instance=~\&quot;$instance\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&quot;, &quot;metric&quot;: &quot;A&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Commands Executed / sec&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 8, &quot;x&quot;: 16, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 1, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: true, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(redis_keyspace_hits_total&#123;instance=\&quot;$instance\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;hide&quot;: false, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;hits&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;irate(redis_keyspace_misses_total&#123;instance=\&quot;$instance\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;hide&quot;: false, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;misses&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Hits / Misses per Sec&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: &quot;&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123; &quot;max&quot;: &quot;#BF1B00&quot; &#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 7 &#125;, &quot;id&quot;: 7, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;hideEmpty&quot;: false, &quot;hideZero&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null as zero&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;redis_memory_used_bytes&#123;instance=~\&quot;$instance\&quot;&#125; &quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;used&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;redis_config_maxmemory&#123;instance=~\&quot;$instance\&quot;&#125; &quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;hide&quot;: false, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;max&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 240 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Total Memory Usage&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 7 &#125;, &quot;id&quot;: 10, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(redis_net_input_bytes_total&#123;instance=\&quot;$instance\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; input &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240 &#125;, &#123; &quot;expr&quot;: &quot;rate(redis_net_output_bytes_total&#123;instance=\&quot;$instance\&quot;&#125;[5m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; output &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 240 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Network I/O&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: true, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 7, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 14 &#125;, &quot;id&quot;: 5, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum (redis_db_keys&#123;instance=~\&quot;$instance\&quot;&#125;) by (db)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; db &#125;&#125; &quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Total Items per DB&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 7, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 14 &#125;, &quot;id&quot;: 13, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum (redis_db_keys&#123;instance=~\&quot;$instance\&quot;&#125;) - sum (redis_db_keys_expiring&#123;instance=~\&quot;$instance\&quot;&#125;) &quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;not expiring&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;sum (redis_db_keys_expiring&#123;instance=~\&quot;$instance\&quot;&#125;) &quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;expiring&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 240 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Expiring vs Not-Expiring Keys&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123; &quot;evicts&quot;: &quot;#890F02&quot;, &quot;memcached_items_evicted_total&#123;instance=\&quot;172.17.0.1:9150\&quot;,job=\&quot;prometheus\&quot;&#125;&quot;: &quot;#890F02&quot;, &quot;reclaims&quot;: &quot;#3F6833&quot; &#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 21 &#125;, &quot;id&quot;: 8, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;reclaims&quot;, &quot;yaxis&quot;: 2 &#125; ], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(rate(redis_expired_keys_total&#123;instance=~\&quot;$instance\&quot;&#125;[5m])) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;expired&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240, &quot;target&quot;: &quot;&quot; &#125;, &#123; &quot;expr&quot;: &quot;sum(rate(redis_evicted_keys_total&#123;instance=~\&quot;$instance\&quot;&#125;[5m])) by (instance)&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;evicted&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 240 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Expired / Evicted&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 8, &quot;grid&quot;: &#123;&#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 21 &#125;, &quot;id&quot;: 14, &quot;isNew&quot;: true, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;topk(5, irate(redis_commands_duration_seconds_total&#123;instance=~\&quot;$instance\&quot;&#125; [1m]))&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 2, &quot;legendFormat&quot;: &quot;&#123;&#123; cmd &#125;&#125;&quot;, &quot;metric&quot;: &quot;redis_command_calls_total&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 240 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Command Calls / sec&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: true, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;refresh&quot;: &quot;30s&quot;, &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;prometheus&quot;, &quot;redis&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$&#123;DS_PROMETHEUS&#125;&quot;, &quot;definition&quot;: &quot;label_values(redis_connected_clients, instance)&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: null, &quot;multi&quot;: false, &quot;name&quot;: &quot;instance&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(redis_connected_clients, instance)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-15m&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;Redis cluster&quot;, &quot;uid&quot;: &quot;ekHEbFvWk&quot;, &quot;version&quot;: 9&#125;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控mysql集群]]></title>
    <url>%2Fposts%2F24jdja99.html</url>
    <content type="text"><![CDATA[安装mysql_exporter12345678910111213141516171819cd /usr/localwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gztar -zxvf mysqld_exporter-0.12.1.linux-amd64.tar.gzmv mysqld_exporter-0.12.1.linux-amd64 mysqld_exportermysql的pxc集群添加账号密码：GRANT REPLICATION CLIENT, PROCESS ON . TO &apos;exporter&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;GRANT SELECT ON performance_schema.* TO &apos;exporter&apos;@&apos;localhost&apos;;flush privileges;[root@pxc1 mysqld_exporter]# cat .my.cnf [client]host=192.168.7.201user=exporterpassword=123456启动：nohup ./mysqld_exporter --config.my-cnf=.my.cnf &amp; prometheus配置12345678910111213141516171819202122232425262728293031323334353637383940414243 - job_name: &apos;mysql-cluster&apos; static_configs: - targets: - &apos;192.168.7.201:9104&apos; - &apos;192.168.7.202:9104&apos; - &apos;192.168.7.203:9104&apos; 报警：############ mysql 监控 ############ - alert: MySQLGaleraNotReady expr: mysql_global_status_wsrep_ready != 1 for: 5m labels: severity: warning annotations: description: &quot;&#123;&#123;$labels.job&#125;&#125; on &#123;&#123;$labels.instance&#125;&#125; is not ready.&quot; summary: &quot;Galera cluster node not ready&quot; - alert: MySQLGaleraOutOfSync expr: (mysql_global_status_wsrep_local_state != 4 and mysql_global_variables_wsrep_desync == 0) for: 5m labels: severity: warning annotations: description: &quot;&#123;&#123;$labels.job&#125;&#125; on &#123;&#123;$labels.instance&#125;&#125; is not in sync (&#123;&#123;$value&#125;&#125;!= 4).&quot; summary: &quot;Galera cluster node out of sync&quot; - alert: MySQL is down expr: mysql_up == 0 for: 1m labels: severity: critical annotations: description: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; MySQL is down&quot; summary: &quot;MySQL database is down. This requires immediate action!&quot; - alert: MySql 连接数超过最大连接数的80% expr: mysql_global_status_max_used_connections &gt; mysql_global_variables_max_connections * 0.8 for: 2m labels: severity: warning annotations: description: &quot;Instance &#123;&#123; $labels.instance &#125;&#125; Used more than 80% of max connections limited&quot; summary: &quot;Used more than 80% of max connections limited&quot; grafana导入模板https://grafana.com/grafana/dashboards/7362 mysqlhttps://grafana.com/grafana/dashboards/7377 pxc]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jenkins的pipeline]]></title>
    <url>%2Fposts%2Fdld541al.html</url>
    <content type="text"><![CDATA[Jenkins Pipeline的总体介绍Jenkins Pipeline 的核心概念： Pipeline，简而言之，就是一套运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排与可视化。 Pipeline是Jenkins2.X的最核心的特性，帮助Jenkins实现从CI到CD与DevOps的转变 Pipeline是一组插件，让Jenkins可以实现持续交付管道的落地和实施。 持续交付管道（CD Pipeline）是将软件从版本控制阶段到交付给用户或客户的完整过程的自动化表现。软件的每一次更改（提交到源代码管理系统）都要经过一个复杂的过程才能被发布。 Pipeline提供了一组可扩展的工具，通过Pipeline Domain Specific Language（DSL）syntax可以达到Pipeline as Code（Jenkinsfile存储在项目的源代码库）的目的。 1234567Stage：阶段，一个Pipeline可以划分成若干个Stage，每个Stage代表一组操作，例如：“Build”，“Test”，“Deploy”。注意，Stage是一个逻辑分组的概念，可以跨多个NodeNode：节点，一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行环境。Step：步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenklins Plugin提供，例如：sh ‘make’ Pipeline五大特性 123456789代码:Pipeline以代码的形式实现，通常被检入源代码控制，使团队能够编辑、审查和迭代其CD流程。可持续性：Jenklins重启或者中断后都不会影响Pipeline Job。停顿：Pipeline可以选择停止并等待任工输入或批准，然后再继续Pipeline运行。多功能：Pipeline支持现实世界的复杂CD要求，包括fork/join子进程，循环和并行执行工作的能力可扩展：Pipeline插件支持其DSL的自定义扩展以及与其他插件集成的多个选项。 简单的pipeline新建 Job：在 Web UI 中点击 New Item -&gt; 输入名称：pipeline-demo -&gt; 选择下面的 Pipeline -&gt; 点击 OK 配置：在最下方的 Pipeline 区域输入如下 Script 脚本，然后点击保存。 1234567891011121314node(&apos;jnlp&apos;) &#123; stage(&apos;Clone&apos;) &#123; echo &quot;1.Clone Stage&quot; &#125; stage(&apos;Test&apos;) &#123; echo &quot;2.Test Stage&quot; &#125; stage(&apos;Build&apos;) &#123; echo &quot;3.Build Stage&quot; &#125; stage(&apos;Deploy&apos;) &#123; echo &quot;4. Deploy Stage&quot; &#125;&#125; 构建：点击左侧区域的 Build Now，可以看到 Job 开始构建了 命令行可以看到： 123456789[root@node1 jenkins2]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 309 12djenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 16hjnlp-gd6wz 1/1 Running 0 69s[root@node1 jenkins2]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 309 12djenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 16h 简单golang服务pipeline 第一步，clone 代码 第二步，进行测试，如果测试通过了才继续下面的任务 第三步，由于 Dockerfile 基本上都是放入源码中进行管理的，所以我们这里就是直接构建 Docker 镜像了 第四步，镜像打包完成，推送到镜像仓库 第五步，镜像推送完成，更改 YAML 文件中的镜像 TAG 为这次镜像的 TAG 第六步，使用 kubectl 命令行工具进行部署了 script脚本： 12345678910111213141516171819202122232425node(&apos;jnlp&apos;) &#123; stage(&apos;Clone&apos;) &#123; echo &quot;1.Clone Stage&quot; git url: &quot;https://github.com/shenshengkun/jenkins-demo.git&quot; script &#123; build_tag = sh(returnStdout: true, script: &apos;git rev-parse --short HEAD&apos;).trim() &#125; &#125; stage(&apos;Test&apos;) &#123; echo &quot;2.Test Stage&quot; &#125; stage(&apos;Build&apos;) &#123; echo &quot;3.Build Docker Image Stage&quot; sh &quot;docker build -t registry.gag.cn/private/sy:$&#123;build_tag&#125; .&quot; &#125; stage(&apos;Push&apos;) &#123; echo &quot;4.Push Docker Image Stage&quot; sh &quot;docker push registry.gag.cn/private/sy:$&#123;build_tag&#125;&quot; &#125; stage(&apos;Deploy&apos;) &#123; echo &quot;5. Deploy Stage&quot; sh &quot;sed -i &apos;s/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/&apos; k8s.yaml&quot; sh &quot;kubectl apply -f k8s.yaml --record --validate=false&quot; &#125;&#125; build now： Stage View 界面： 1234567891011121314151617181920212223242526[root@node1 jenkins]# kubectl get pods NAME READY STATUS RESTARTS AGEbusybox 1/1 Running 313 13djenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 19hjnlp-p6b1b 1/1 Running 0 3m39s[root@node1 jenkins]# docker images REPOSITORY TAG IMAGE ID CREATED SIZEregistry.gag.cn/private/sy c4af501 6c1eb660f5b7 11 seconds ago 258MB[root@node1 jenkins]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 313 13djenkins-demo-c44c8d468-tnrxs 0/1 CrashLoopBackOff 1 11sjenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 19hjnlp-p6b1b 1/1 Running 0 7m42s[root@node1 jenkins]# kubectl logs -f jenkins-demo-c44c8d468-tnrxsHello, sy！I&apos;m from Jenkins CI！[root@node1 jenkins]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 313 13djenkins-demo-c44c8d468-tnrxs 0/1 CrashLoopBackOff 2 41sjenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 19h]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s部署jenkins动态slave]]></title>
    <url>%2Fposts%2Fdkkd644a.html</url>
    <content type="text"><![CDATA[Kubernetes 环境下面使用 Jenkins 有什么好处我们知道持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如： 主 Master 发生单点故障时，整个流程都不可用了 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲 资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态 资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。 正因为上面的这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题。 这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。 那么我们使用这种方式带来了哪些好处呢？ 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。 部署创建serviceAccount1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@node1 jenkins]# cat rbac.yaml apiVersion: v1kind: ServiceAccountmetadata: name: jenkins2 namespace: default---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: jenkins2rules: - apiGroups: [&quot;extensions&quot;, &quot;apps&quot;] resources: [&quot;deployments&quot;] verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;services&quot;] verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;] verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;pods/exec&quot;] verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;pods/log&quot;] verbs: [&quot;get&quot;,&quot;list&quot;,&quot;watch&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;secrets&quot;] verbs: [&quot;get&quot;]---apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata: name: jenkins2 namespace: defaultroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: jenkins2subjects: - kind: ServiceAccount name: jenkins2 namespace: default jenkins1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586[root@node1 jenkins]# cat jenkins.yaml ---apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: jenkins2 namespace: defaultspec: template: metadata: labels: app: jenkins2 spec: terminationGracePeriodSeconds: 10 serviceAccount: jenkins2 containers: - name: jenkins image: jenkins/jenkins:lts imagePullPolicy: IfNotPresent ports: - containerPort: 8080 name: web protocol: TCP - containerPort: 50000 name: agent protocol: TCP resources: limits: cpu: 1000m memory: 1Gi requests: cpu: 500m memory: 512Mi livenessProbe: httpGet: path: /login port: 8080 initialDelaySeconds: 60 timeoutSeconds: 5 failureThreshold: 12 readinessProbe: httpGet: path: /login port: 8080 initialDelaySeconds: 60 timeoutSeconds: 5 failureThreshold: 12 volumeMounts: - name: jenkinshome subPath: jenkins2 mountPath: /var/jenkins_home env: - name: LIMITS_MEMORY valueFrom: resourceFieldRef: resource: limits.memory divisor: 1Mi - name: JAVA_OPTS value: -Xmx$(LIMITS_MEMORY)m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Duser.timezone=Asia/Shanghai securityContext: fsGroup: 1000 volumes: - name: jenkinshome persistentVolumeClaim: claimName: cephfs-pvc---apiVersion: v1kind: Servicemetadata: name: jenkins2 namespace: default labels: app: jenkins2spec: selector: app: jenkins2 type: NodePort ports: - name: web port: 8080 targetPort: web nodePort: 30002 - name: agent port: 50000 targetPort: agent 123456789101112[root@node1 jenkins]# kubectl apply -f rbac.yaml serviceaccount/jenkins2 createdclusterrole.rbac.authorization.k8s.io/jenkins2 createdclusterrolebinding.rbac.authorization.k8s.io/jenkins2 created[root@node1 jenkins]# kubectl create -f jenkins.yaml deployment.extensions/jenkins2 createdservice/jenkins2 created[root@node1 jenkins]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 291 12djenkins2-5f76f7f8b5-cqwb4 1/1 Running 0 17m 访问： http://192.168.6.102:30002 初始化的密码我们可以在 jenkins 的容器的日志中进行查看，也可以直接在cephfs的共享数据目录中查看： 12[root@node1 secrets]# cat /mnt/cephfs/jenkins2/secrets/initialAdminPassword fc5cf245b9924616b4d430a50ad413dc 配置第1步. 我们需要安装kubernetes plugin， 点击 Manage Jenkins -&gt; Manage Plugins -&gt; Available -&gt; Kubernetes勾选安装即可。 第2步. 安装完毕后，点击 Manage Jenkins —&gt; Configure System —&gt; (拖到最下方)Add a new cloud —&gt; 选择 Kubernetes，然后填写 Kubernetes 和 Jenkins 配置信息。 第3步. 配置 Pod Template，其实就是配置 Jenkins Slave 运行的 Pod 模板，命名空间我们同样是用 kube-ops，Labels 这里也非常重要，对于后面执行 Job 的时候需要用到该值 另外需要注意我们这里需要在下面挂载两个主机目录，一个是 /var/run/docker.sock，该文件是用于 Pod 中的容器能够共享宿主机的 Docker，这就是大家说的 docker in docker 的方式，Docker 二进制文件我们已经打包到上面的镜像中了，另外一个目录下 /root/.kube 目录，我们将这个目录挂载到容器的 /home/jenkins/.kube 目录下面这是为了让我们能够在 Pod 的容器中能够使用 kubectl 工具来访问我们的 Kubernetes 集群，方便我们后面在 Slave Pod 部署 Kubernetes 应用。 另外还有几个参数需要注意，如下图中的Time in minutes to retain slave when idle，这个参数表示的意思是当处于空闲状态的时候保留 Slave Pod 多长时间，这个参数最好我们保存默认就行了，如果你设置过大的话，Job 任务执行完成后，对应的 Slave Pod 就不会立即被销毁删除。 Jenkins Slave Pod 中没有配置权限，所以需要配置上 ServiceAccount，在 Slave Pod 配置的地方点击下面的高级，添加上对应的 ServiceAccount ，jenkins2 测试Kubernetes 插件的配置工作完成了，接下来我们就来添加一个 Job 任务，看是否能够在 Slave Pod 中执行，任务执行完成后看 Pod 是否会被销毁。 在 Jenkins 首页点击create new jobs，创建一个测试的任务，输入任务名称，然后我们选择 Freestyle project 类型的任务： 123456echo &quot;测试 Kubernetes 动态生成 jenkins slave&quot;echo &quot;==============docker in docker===========&quot;docker infoecho &quot;=============kubectl=============&quot;kubectl get pods 我们直接在页面点击做成的 Build now 触发构建即可，然后观察 Kubernetes 集群中 Pod 的变化 123456789[root@node1 jenkins]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 293 12djenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 22mjnlp-bv17b 1/1 Running 0 28s[root@node1 jenkins]# kubectl get podsNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 293 12djenkins2-5f76f7f8b5-hzcqw 1/1 Running 0 22m]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pxc集群部署]]></title>
    <url>%2Fposts%2Fdlfl674a.html</url>
    <content type="text"><![CDATA[pxc介绍​ galera产品是以galera cluster方式为mysql提高高可用集群解决方案的。galera cluster就是集成了galera插件的mysql集群。galera replication是codership提供的mysql数据同步方案，具有高可用性，方便扩展，并且可以实现多个mysql节点间的数据同步复制与读写，可保障数据库的服务高可用及数据强一致性。 ​ PXC属于一套近乎完美的mysql高可用集群解决方案，相比那些比较传统的基于主从复制模式的集群架构MHA和MM+keepalived，galera cluster最突出特点就是解决了诟病已久的数据复制延迟问题，基本上可以达到实时同步。而且节点与节点之间，他们相互的关系是对等的。本身galera cluster也是一种多主架构。galera cluster最关注的是数据的一致性，对待事物的行为时，要么在所有节点上执行，要么都不执行，它的实现机制决定了它对待一致性的行为非常严格，这也能非常完美的保证MySQL集群的数据一致性； ​ 对galera cluster的封装有两个，虽然名称不同，但实质都是一样的，使用的都是galera cluster。一个MySQL的创始人在自己全新的MariaDB上实现的MAriaDB cluster；一个是著名的MySQL服务和工具提供商percona实现的percona xtradb cluster，简称PXC 。 ​ 要搭建PXC架构至少需要3个mysql实例来组成一个集群，三个实例之间不是主从模式，而是各自为主，所以三者是对等关系，不分从属，这就叫multi-master架构。客户端写入和读取数据时，连接哪个实例都是一样的。读取到的数据时相同的，写入任意一个实例之后，集群自己会将新写入的数据同步到其他实例上，这种架构不共享任何数据，是一种高冗余架构。 部署部署准备工作 主机名 IP pxc1 192.168.6.201 192.168.6.200 pxc2 192.168.6.202 pxc3 192.168.6.203 关防火墙、selinux、ntp时间同步 安装pxcrpm安装123456789##安装yum源 yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm ##定位到pxc57的仓库 percona-release setup pxc57 #解压 tar vxf Percona-XtraBackup-2.4.14-ref675d4-el7-x86_64-bundle.tar tar vxf Percona-XtraDB-Cluster-5.7.25-31.35-r463-el7-x86_64-bundle.tar ##安装rpm包用yum localinstall 命令率先从本地安装，并根据本地rpm包会在线寻找未安装的依赖(pxc官网下载的安装包会依赖其他包) yum localinstall *.rpm 分别在三个节点创建数据存储目录123456mkdir -p /data/local/percona-xtradb-cluster/datachown -R mysql:mysql /data/local/percona-xtradb-cluster/datamkdir -p /data/local/percona-xtradb-cluster/runchown -R mysql:mysql /data/local/percona-xtradb-cluster/runmkdir -p /data/logs/mysqlchown -R mysql:mysql /data/logs/mysql 修改/etc/my.cnf配置文件，其他两台节点需要修改server_id和wsrep_node_addresspxc1： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960[root@pxc1 ~]# cat /etc/my.cnf[client]port = 3306socket = /data/local/percona-xtradb-cluster/run/mysql.sockdefault-character-set = utf8mb4[mysqld]user = mysqlinnodb_buffer_pool_size = 1024Mcharacter_set_server = utf8mb4datadir = /data/local/percona-xtradb-cluster/dataport = 3306server_id = 1socket = /data/local/percona-xtradb-cluster/run/mysql.sockpid-file = /data/local/percona-xtradb-cluster/run/mysql.pidlog-error = /data/logs/mysql/error.loglog_warnings = 2slow_query_log_file = /data/logs/mysql/slow.loglong_query_time = 2log_timestamps=SYSTEMlower_case_table_names = 1key_buffer_size = 1344Mevent_scheduler=ONsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESwsrep_provider=/usr/lib64/libgalera_smm.sowsrep_cluster_address=gcomm://192.168.6.201,192.168.6.202,192.168.6.203binlog_format=ROWpxc_strict_mode=PERMISSIVEmax_connect_errors=1000max_allowed_packet = 1024Mdefault_storage_engine=InnoDB#Innodbinnodb_flush_method = O_DIRECTinnodb_log_files_in_group = 5innodb_lock_wait_timeout = 50innodb_log_file_size = 1024Minnodb_flush_log_at_trx_commit = 1innodb_file_per_table = 1innodb_thread_concurrency = 8innodb_buffer_pool_size = 5Ginnodb_read_io_threads = 24innodb_write_io_threads = 24log_bin_trust_function_creators=1innodb_autoinc_lock_mode=2innodb_locks_unsafe_for_binlog=1# CACHES AND LIMITS #tmp_table_size = 32Mmax_heap_table_size = 32Mmax_connections = 1000thread_cache_size = 50open_files_limit = 65535table_definition_cache = 4096table_open_cache = 5000#wsrepwsrep_retry_autocommit=1wsrep_auto_increment_control=1wsrep_node_name = pxc1wsrep_node_address=192.168.6.201wsrep_sst_method=xtrabackup-v2wsrep_cluster_name=pxcwsrep_sst_auth=&quot;sstuser:secret&quot; pxc2： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960[root@pxc2 ~]# cat /etc/my.cnf[client]port = 3306socket = /data/local/percona-xtradb-cluster/run/mysql.sockdefault-character-set = utf8mb4[mysqld]user = mysqlinnodb_buffer_pool_size = 1024Mcharacter_set_server = utf8mb4datadir = /data/local/percona-xtradb-cluster/dataport = 3306server_id = 2socket = /data/local/percona-xtradb-cluster/run/mysql.sockpid-file = /data/local/percona-xtradb-cluster/run/mysql.pidlog-error = /data/logs/mysql/error.loglog_warnings = 2slow_query_log_file = /data/logs/mysql/slow.loglong_query_time = 2log_timestamps=SYSTEMlower_case_table_names = 1key_buffer_size = 1344Mevent_scheduler=ONsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESwsrep_provider=/usr/lib64/libgalera_smm.sowsrep_cluster_address=gcomm://192.168.6.201,192.168.6.202,192.168.6.203binlog_format=ROWpxc_strict_mode=PERMISSIVEmax_connect_errors=1000max_allowed_packet = 1024Mdefault_storage_engine=InnoDB#Innodbinnodb_flush_method = O_DIRECTinnodb_log_files_in_group = 5innodb_lock_wait_timeout = 50innodb_log_file_size = 1024Minnodb_flush_log_at_trx_commit = 1innodb_file_per_table = 1innodb_thread_concurrency = 8innodb_buffer_pool_size = 5Ginnodb_read_io_threads = 24innodb_write_io_threads = 24log_bin_trust_function_creators=1innodb_autoinc_lock_mode=2innodb_locks_unsafe_for_binlog=1# CACHES AND LIMITS #tmp_table_size = 32Mmax_heap_table_size = 32Mmax_connections = 1000thread_cache_size = 50open_files_limit = 65535table_definition_cache = 4096table_open_cache = 5000#wsrepwsrep_retry_autocommit=1wsrep_auto_increment_control=1wsrep_node_name = pxc2wsrep_node_address=192.168.6.202wsrep_sst_method=xtrabackup-v2wsrep_cluster_name=pxcwsrep_sst_auth=&quot;sstuser:secret&quot; pxc3: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960[root@pxc3 ~]# cat /etc/my.cnf[client]port = 3306socket = /data/local/percona-xtradb-cluster/run/mysql.sockdefault-character-set = utf8mb4[mysqld]user = mysqlinnodb_buffer_pool_size = 1024Mcharacter_set_server = utf8mb4datadir = /data/local/percona-xtradb-cluster/dataport = 3306server_id = 3socket = /data/local/percona-xtradb-cluster/run/mysql.sockpid-file = /data/local/percona-xtradb-cluster/run/mysql.pidlog-error = /data/logs/mysql/error.loglog_warnings = 2slow_query_log_file = /data/logs/mysql/slow.loglong_query_time = 2log_timestamps=SYSTEMlower_case_table_names = 1key_buffer_size = 1344Mevent_scheduler=ONsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLESwsrep_provider=/usr/lib64/libgalera_smm.sowsrep_cluster_address=gcomm://192.168.6.201,192.168.6.202,192.168.6.203binlog_format=ROWpxc_strict_mode=PERMISSIVEmax_connect_errors=1000max_allowed_packet = 1024Mdefault_storage_engine=InnoDB#Innodbinnodb_flush_method = O_DIRECTinnodb_log_files_in_group = 5innodb_lock_wait_timeout = 50innodb_log_file_size = 1024Minnodb_flush_log_at_trx_commit = 1innodb_file_per_table = 1innodb_thread_concurrency = 8innodb_buffer_pool_size = 5Ginnodb_read_io_threads = 24innodb_write_io_threads = 24log_bin_trust_function_creators=1innodb_autoinc_lock_mode=2innodb_locks_unsafe_for_binlog=1# CACHES AND LIMITS #tmp_table_size = 32Mmax_heap_table_size = 32Mmax_connections = 1000thread_cache_size = 50open_files_limit = 65535table_definition_cache = 4096table_open_cache = 5000#wsrepwsrep_retry_autocommit=1wsrep_auto_increment_control=1wsrep_node_name = pxc3wsrep_node_address=192.168.6.203wsrep_sst_method=xtrabackup-v2wsrep_cluster_name=pxcwsrep_sst_auth=&quot;sstuser:secret&quot; 启动主节点： 1service mysql@bootstrap.service start 其他节点： 1service mysql start 启动第二个节点时遇到sst连接失败的问题1将wsrep.cnf 配置文件的wsrep_sst_method改为rsync,成功启动集群后停止集群，然后改回xtrabackup-v2,再启动集群节点。 修改密码1234567891011mysql5.7版本日志均在error.log 里面生成grep &quot;temporary password&quot; /data/logs/mysql/error.log使用改密码登陆MySQL，修改成自己想要的密码mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; idnetified by &apos;pxc&apos;;配置SST认证账号CREATE USER &apos;sstuser&apos;@&apos;192.168.%.%&apos; IDENTIFIED BY &apos;secret&apos;;GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO &apos;sstuser&apos;@&apos;192.168.%.%&apos;;FLUSH PRIVILEGES; 查看状态查看节点数： 1show global status like &apos;wsrep_cluster_size&apos;; 查看集群状态： 1show global status like &apos;wsrep%&apos;; 查看当前节点状态： 1show global status like &apos;wsrep_cluster_status&apos;; 安装keepalive1236.200为虚ip在192.168.6.201,6.202上yum -y install keepalived 主： 123456789101112131415161718192021222324252627282930313233343536[root@pxc1 ~]# cat /etc/keepalived/keepalived.conf global_defs &#123; router_id LVS_mysql&#125;vrrp_script Checkmysql &#123; script &quot;curl -k http://192.168.7.201:3306&quot; # vip interval 3 timeout 9 fall 2 rise 2&#125;vrrp_instance VI_1 &#123; state MASTER interface ens160 # 本地网卡名称 virtual_router_id 61 priority 120 # 权重,要唯一 advert_int 1 mcast_src_ip 192.168.7.201 # 本地IP nopreempt authentication &#123; auth_type PASS auth_pass sqP05dQgMSlzrxHj &#125; unicast_peer &#123; 192.168.7.202 192.168.7.203 &#125; virtual_ipaddress &#123; 192.168.7.200/24 # VIP &#125; track_script &#123; Checkmysql &#125;&#125; 从： 123456789101112131415161718192021222324252627282930313233343536[root@pxc2 ~]# cat /etc/keepalived/keepalived.conf global_defs &#123; router_id LVS_mysql&#125;vrrp_script Checkmysql &#123; script &quot;curl -k http://192.168.7.201:3306&quot; # vip interval 3 timeout 9 fall 2 rise 2&#125;vrrp_instance VI_1 &#123; state BACKUP interface ens160 # 本地网卡名称 virtual_router_id 61 priority 80 # 权重,要唯一 advert_int 1 mcast_src_ip 192.168.7.202 # 本地IP nopreempt authentication &#123; auth_type PASS auth_pass sqP05dQgMSlzrxHj &#125; unicast_peer &#123; 192.168.7.201 192.168.7.203 &#125; virtual_ipaddress &#123; 192.168.7.200/24 # VIP &#125; track_script &#123; Checkmysql &#125;&#125; 登录： 12345678910111213141516[root@pxc1 ~]# mysql -usstuser -psecret --host 192.168.6.200mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 1099Server version: 5.7.25-28-57 Percona XtraDB Cluster (GPL), Release rel28, Revision a2ef85f, WSREP version 31.35, wsrep_31.35Copyright (c) 2009-2019 Percona LLC and/or its affiliatesCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt;]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s上用cephfs存储]]></title>
    <url>%2Fposts%2F0rfhdj22.html</url>
    <content type="text"><![CDATA[前言k8s对ceph rbd模式不支持ReadWriteMany（RWX）,为了满足k8s的灵活性需求,采用支持多点挂载的cephfs工作模式 安装ceph端123456ceph-deploy mds create ceph为cephfs创建存储池ceph osd pool create cephfs_data 8ceph osd pool create cephfs_metadata 8ceph fs new cephfs cephfs_metadata cephfs_data 查看： 12345678910111213141516171819[root@node1 ceph]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ][root@node1 ceph]# ceph -s cluster: id: cbc04385-1cdf-4512-a3f5-a5b3e8686a05 health: HEALTH_OK services: mon: 1 daemons, quorum ceph mgr: ceph(active) mds: cephfs-1/1/1 up &#123;0=ceph=up:active&#125; osd: 1 osds: 1 up, 1 in data: pools: 3 pools, 106 pgs objects: 73 objects, 137MiB usage: 3.82GiB used, 16.2GiB / 20.0GiB avail pgs: 106 active+clean k8s挂载ceph123456789101112131415161718192021222324[root@node1 ceph]# cat admin.secret AQA6EzBd5zAwIRAAgs+NyCjoAKuSrQKoFvQi9w==[root@node1 ceph]# mkdir /mnt/cephfs[root@node1 ceph]# mount -t ceph 192.168.6.101:6789:/ /mnt/cephfs -o name=admin,secretfile=/etc/ceph/admin.secret[root@node1 ceph]# df -hFilesystem Size Used Avail Use% Mounted ondevtmpfs 2.0G 0 2.0G 0% /devtmpfs 2.0G 0 2.0G 0% /dev/shmtmpfs 2.0G 198M 1.8G 10% /runtmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup/dev/mapper/cl-root 36G 12G 24G 34% //dev/sda1 1014M 216M 799M 22% /boottmpfs 2.0G 12K 2.0G 1% /data/k8s/k8s/kubelet/pods/42d3eb88-aaba-11e9-b1ef-005056b1d2de/volumes/kubernetes.io~secret/coredns-token-qklgjoverlay 36G 12G 24G 34% /data/k8s/docker/data/overlay2/f651aa6ff6070b5a3acb8ba0e8d810a1d699a7853e0d3df802851fa64fc2c029/mergedshm 64M 0 64M 0% /data/k8s/docker/data/containers/531654eae411cc84ed7ed3c2d5e60afa2bd68cca57cf821636369be5869f6f7d/mounts/shmtmpfs 2.0G 12K 2.0G 1% /data/k8s/k8s/kubelet/pods/4eb99bd2-aaba-11e9-b1ef-005056b1d2de/volumes/kubernetes.io~secret/default-token-npj5xoverlay 36G 12G 24G 34% /data/k8s/docker/data/overlay2/1707081196a127bbf0f46f57a9a6831c8f6d87a6f92dad5a578375d24eb41580/mergedshm 64M 0 64M 0% /data/k8s/docker/data/containers/b6b70ef43252b12414afc08562ceb4002467ff700acb01941dce73cf9e40d88a/mounts/shmoverlay 36G 12G 24G 34% /data/k8s/docker/data/overlay2/3ccf15f58beb54a2b59ab2c5c421ac3a8f3f2d5896b5b12430a8f672783eeb84/mergedtmpfs 396M 0 396M 0% /run/user/0192.168.6.101:6789:/ 20G 3.9G 17G 20% /mnt/cephfs 创建secret1234567[root@node1 ceph]# cat cephfs-secret.yaml apiVersion: v1kind: Secretmetadata: name: ceph-secretdata: key: QVFBNkV6QmQ1ekF3SVJBQWdzK055Q2pvQUt1U3JRS29GdlFpOXc9PQ== pv1234567891011121314151617181920[root@node1 ceph]# cat cephfs-pv.yaml apiVersion: v1kind: PersistentVolumemetadata: name: cephfs-pv labels: pv: cephfs-pvspec: capacity: storage: 1Gi accessModes: - ReadWriteMany cephfs: monitors: - 192.168.6.101:6789 user: admin secretRef: name: ceph-secret readOnly: false persistentVolumeReclaimPolicy: Delete pvc1234567891011121314[root@node1 ceph]# cat cephfs-pvc.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: cephfs-pvcspec: accessModes: - ReadWriteMany resources: requests: storage: 1Gi selector: matchLabels: pv: cephfs-pv]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[rbd无法map]]></title>
    <url>%2Fposts%2Fdl9876la.html</url>
    <content type="text"><![CDATA[默认开启了rbd的一些属性12[root@ceph1 ~]# ceph --show-config|grep rbd|grep featuresrbd_default_features = 61 RBD属性表： 61的意思是上面图中的bit码相加得到的值对rbd进行内核的map操作 12345[root@ceph1 ~]# rbd map mytestrbd: sysfs write failedRBD image feature set mismatch. You can disable features unsupported by the kernel with &quot;rbd feature disable&quot;.In some cases useful info is found in syslog - try &quot;dmesg | tail&quot; or so.rbd: map failed: (6) No such device or address 根据提示查询打印的信息 12[root@ceph1 ~]# dmesg | tail[10440.462708] rbd: image mytest: image uses unsupported features: 0x3c 这个地方提示的很清楚了，不支持的属性0x3c，0x3c是16进制的数值，换算成10进制是3*16+12=6060的意思是不支持： 12332+16+8+4 = exclusive-lock, object-map, fast-diff, deep-flatten也就是不支持这些属性，现在动态关闭这些属性 关闭这些属性1rbd feature disable &#123;poolname&#125;/&#123;imagename&#125; &#123;feature&#125; 如果不想动态的关闭，那么在创建rbd之前，在配置文件中设置这个参数即可 1234567rbd_default_features = 3关于属性支持的，目前到内核4.6仍然只支持layering,striping = 1 + 2这两个属性]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[prometheus监控ceph集群]]></title>
    <url>%2Fposts%2Fdk8973fg.html</url>
    <content type="text"><![CDATA[安装ceph_exporter1234567891011121314151617181920212223242526yum install golang -yyum install librados2-devel librbd1-devel -y# 配置go PATH环境变量：[root@ceph1 bin]# cat /etc/profile.d/go.sh export GOROOT=/usr/lib/golangexport GOBIN=$GOROOT/binexport GOPATH=/usr/local/goexport PATH=$PATH:$GOROOT/bin:$GOPATH/binsource /etc/profile.d/go.shmkdir /usr/local/go编译：mkdir -p /usr/local/go/src/github.com/digitaloceancd /usr/local/go/src/github.com/digitaloceangit clone https://github.com/digitalocean/ceph_exportercd ceph_exporter/go buildmkdir /usr/local/go/bincp ceph_exporter /usr/local/go/bin/cd /usr/local/bin/启动：nohup ./ceph_exporter &gt;&gt; ceph_exporter.log &amp; prometheus配置123456789- job_name: &apos;ceph-cluster&apos; static_configs: - targets: [&apos;192.168.7.31:9128&apos;] 重读配置./reload-prometheus.sh grafana导入模板https://grafana.com/dashboards/917 报警1234567891011121314151617############ ceph cluster 监控 ############- alert: Ceph OSD Down expr: ceph_osd_down &gt; 0 for: 2m labels: status: 监控osd annotations: description: &quot;&#123;&#123;$labels.instance&#125;&#125;: 有&#123;&#123; $value &#125;&#125;个OSD挂掉了&quot; summary: &quot;&#123;&#123;$labels.instance&#125;&#125;:&#123;&#123; $labels.osd &#125;&#125;当前状态为&#123;&#123; $labels.status &#125;&#125;&quot;- alert: 集群空间使用率 expr: ceph_cluster_used_bytes / ceph_cluster_capacity_bytes * 100 &gt; 80 for: 2m labels: status: 监控ceph集群空间 annotations: description: &quot;&#123;&#123;$labels.instance&#125;&#125;:集群空间不足&quot; summary: &quot;&#123;&#123;$labels.instance&#125;&#125;:当前空间使用率为&#123;&#123; $value &#125;&#125;&quot; grafana补充增加选集群变量以及osd、poolceph-clusterquot;annotations&quot;: &#123; &quot;list&quot;: [] &#125;, &quot;description&quot;: &quot;Ceph Cluster overview.\r\n&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 917, &quot;graphTooltip&quot;: 0, &quot;hideControls&quot;: false, &quot;id&quot;: 20, &quot;links&quot;: [], &quot;refresh&quot;: &quot;1m&quot;, &quot;rows&quot;: [ &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;150px&quot;, &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 21, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_health_status&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;1,0&quot;, &quot;title&quot;: &quot;Status&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;HEALTHY&quot;, &quot;value&quot;: &quot;0&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;WARNING&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;ERROR&quot;, &quot;value&quot;: &quot;2&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 14, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_monitor_quorum_count&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;2,3&quot;, &quot;title&quot;: &quot;Monitors In Quorum&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 22, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;count(ceph_pool_available_bytes&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Pools&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;bytes&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 33, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_cluster_capacity_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;0.025,0.1&quot;, &quot;title&quot;: &quot;Cluster Capacity&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;bytes&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 34, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_cluster_used_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;0.025,0.1&quot;, &quot;title&quot;: &quot;Used Capacity&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;percentunit&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: true, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 23, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_cluster_available_bytes&#123;job=\&quot;$export\&quot;&#125;/ceph_cluster_capacity_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;70,80&quot;, &quot;title&quot;: &quot;Available Capacity&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;100px&quot;, &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 26, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osds_in&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;OSDs IN&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 40, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 27, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osds - ceph_osds_in&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;1,1&quot;, &quot;title&quot;: &quot;OSDs OUT&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 28, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(ceph_osd_up&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;OSDs UP&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 40, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 29, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osds_down&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;1,1&quot;, &quot;title&quot;: &quot;OSDs DOWN&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 30, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(ceph_osd_pgs&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;250,300&quot;, &quot;title&quot;: &quot;Agerage PGs per OSD&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;s&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 31, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(ceph_osd_perf_apply_latency_seconds&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;0.01,0.05&quot;, &quot;title&quot;: &quot;Agerage OSD Apply Latency&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;s&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 32, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(ceph_osd_perf_commit_latency_seconds&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;0.01,0.05&quot;, &quot;title&quot;: &quot;Agerage OSD Commit Latency&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;s&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 24, &quot;interval&quot;: &quot;1m&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;repeat&quot;: null, &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;avg(ceph_monitor_latency_seconds&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: &quot;70,80&quot;, &quot;title&quot;: &quot;Average Monitor Latency&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123; &quot;Available&quot;: &quot;#EAB839&quot;, &quot;Total Capacity&quot;: &quot;#447EBC&quot;, &quot;Used&quot;: &quot;#BF1B00&quot;, &quot;total_avail&quot;: &quot;#6ED0E0&quot;, &quot;total_space&quot;: &quot;#7EB26D&quot;, &quot;total_used&quot;: &quot;#890F02&quot; &#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 3, &quot;grid&quot;: &#123;&#125;, &quot;height&quot;: &quot;300&quot;, &quot;id&quot;: 1, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 0, &quot;links&quot;: [], &quot;minSpan&quot;: null, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;Total Capacity&quot;, &quot;fill&quot;: 0, &quot;linewidth&quot;: 3, &quot;stack&quot;: false &#125; ], &quot;span&quot;: 4, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_cluster_available_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Available&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_cluster_used_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Used&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_cluster_capacity_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Total Capacity&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Capacity&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123; &quot;Total Capacity&quot;: &quot;#7EB26D&quot;, &quot;Used&quot;: &quot;#BF1B00&quot;, &quot;total_avail&quot;: &quot;#6ED0E0&quot;, &quot;total_space&quot;: &quot;#7EB26D&quot;, &quot;total_used&quot;: &quot;#890F02&quot; &#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 0, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;height&quot;: &quot;300&quot;, &quot;id&quot;: 3, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;minSpan&quot;: null, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_client_io_write_ops&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Write&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_client_io_read_ops&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Read&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;IOPS&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: true, &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: &quot;&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;height&quot;: &quot;300&quot;, &quot;id&quot;: 7, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_client_io_write_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Write&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_client_io_read_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Read&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Throughput&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: true, &quot;title&quot;: &quot;CLUSTER&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 18, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^Total.*$/&quot;, &quot;stack&quot;: false &#125; ], &quot;span&quot;: 12, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_cluster_objects&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Total&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_degraded_objects&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Degraded&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_misplaced_objects&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Misplaced&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Objects in the Cluster&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 1, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 19, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^Total.*$/&quot;, &quot;stack&quot;: false &#125; ], &quot;span&quot;: 6, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;sum(ceph_osd_pgs&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Total&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_degraded_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Degraded&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_stale_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Stale&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_unclean_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Unclean&quot;, &quot;refId&quot;: &quot;D&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_undersized_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Undersized&quot;, &quot;refId&quot;: &quot;E&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_stuck_degraded_pgs&#123;job=\&quot;$export\&quot;&#125;+ ceph_stuck_stale_pgs&#123;job=\&quot;$export\&quot;&#125; + ceph_stuck_unclean_pgs&#123;job=\&quot;$export\&quot;&#125; + ceph_stuck_undersized_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Stuck&quot;, &quot;refId&quot;: &quot;F&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;PGs&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 1, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 20, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^Total.*$/&quot;, &quot;stack&quot;: false &#125; ], &quot;span&quot;: 6, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_stuck_degraded_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Degraded&quot;, &quot;refId&quot;: &quot;F&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_stuck_stale_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Stale&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_stuck_unclean_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Unclean&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;ceph_stuck_undersized_pgs&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Undersized&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Stuck PGs&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 1, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;150px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 15, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_recovery_io_bytes&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Bytes&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Bytes&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 16, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^.*/&quot;, &quot;color&quot;: &quot;#E0752D&quot; &#125; ], &quot;span&quot;: 4, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_recovery_io_keys&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Keys&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Keys&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 17, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: false, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^.*$/&quot;, &quot;color&quot;: &quot;#890F02&quot; &#125; ], &quot;span&quot;: 4, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_recovery_io_objects&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Objects&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Objects&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: true, &quot;title&quot;: &quot;Recovery&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125; ], &quot;schemaVersion&quot;: 14, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;ceph&quot;, &quot;cluster&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;auto&quot;: true, &quot;auto_count&quot;: 10, &quot;auto_min&quot;: &quot;1m&quot;, &quot;current&quot;: &#123; &quot;text&quot;: &quot;10s&quot;, &quot;value&quot;: &quot;10s&quot; &#125;, &quot;datasource&quot;: null, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;Interval&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;interval&quot;, &quot;options&quot;: [ &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;auto&quot;, &quot;value&quot;: &quot;$__auto_interval&quot; &#125;, &#123; &quot;selected&quot;: true, &quot;text&quot;: &quot;10s&quot;, &quot;value&quot;: &quot;10s&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30s&quot;, &quot;value&quot;: &quot;30s&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;10m&quot;, &quot;value&quot;: &quot;10m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30m&quot;, &quot;value&quot;: &quot;30m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1h&quot;, &quot;value&quot;: &quot;1h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;6h&quot;, &quot;value&quot;: &quot;6h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;12h&quot;, &quot;value&quot;: &quot;12h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1d&quot;, &quot;value&quot;: &quot;1d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;7d&quot;, &quot;value&quot;: &quot;7d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;14d&quot;, &quot;value&quot;: &quot;14d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30d&quot;, &quot;value&quot;: &quot;30d&quot; &#125; ], &quot;query&quot;: &quot;10s,30s,1m,10m,30m,1h,6h,12h,1d,7d,14d,30d&quot;, &quot;refresh&quot;: 2, &quot;type&quot;: &quot;interval&quot; &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123; &quot;tags&quot;: [], &quot;text&quot;: &quot;ocata-ceph&quot;, &quot;value&quot;: &quot;ocata-ceph&quot; &#125;, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;exporter&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;export&quot;, &quot;options&quot;: [ &#123; &quot;selected&quot;: true, &quot;text&quot;: &quot;ocata-ceph&quot;, &quot;value&quot;: &quot;ocata-ceph&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;ocata-ceph-cl&quot;, &quot;value&quot;: &quot;ocata-ceph-cl&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;ceph-exporter&quot;, &quot;value&quot;: &quot;ceph-exporter&quot; &#125; ], &quot;query&quot;: &quot;label_values(ceph_health_status, job)&quot;, &quot;refresh&quot;: 0, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-3h&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;Ceph - Cluster&quot;, &quot;version&quot;: 65&#125; ceph-osd123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946&#123; &quot;annotations&quot;: &#123; &quot;list&quot;: [] &#125;, &quot;description&quot;: &quot;CEPH OSD Status.&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 923, &quot;graphTooltip&quot;: 0, &quot;hideControls&quot;: false, &quot;id&quot;: 11, &quot;links&quot;: [], &quot;refresh&quot;: &quot;15m&quot;, &quot;rows&quot;: [ &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;100px&quot;, &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 40, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 6, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 2, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125;, &#123; &quot;from&quot;: &quot;0&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;to&quot;: &quot;0.99&quot; &#125;, &#123; &quot;from&quot;: &quot;0.99&quot;, &quot;text&quot;: &quot;UP&quot;, &quot;to&quot;: &quot;1&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_up&#123;osd=\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: &quot;0,1&quot;, &quot;timeFrom&quot;: null, &quot;title&quot;: &quot;Status&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;value&quot;: &quot;0&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;UP&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: true, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 40, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 8, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 2, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125;, &#123; &quot;from&quot;: &quot;0&quot;, &quot;text&quot;: &quot;OUT&quot;, &quot;to&quot;: &quot;0.99&quot; &#125;, &#123; &quot;from&quot;: &quot;0.99&quot;, &quot;text&quot;: &quot;IN&quot;, &quot;to&quot;: &quot;1&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_in&#123;osd=\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: &quot;0,1&quot;, &quot;timeFrom&quot;: null, &quot;title&quot;: &quot;Available&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;value&quot;: &quot;0&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;UP&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 10, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 2, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 1, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osds&#123;job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: &quot;0,1&quot;, &quot;timeFrom&quot;: null, &quot;title&quot;: &quot;Total OSDs&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;value&quot;: &quot;0&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;UP&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 5, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^Average.*/&quot;, &quot;fill&quot;: 0, &quot;stack&quot;: false &#125; ], &quot;span&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_pgs&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Number of PGs - &#123;&#123; osd&#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;avg(ceph_osd_pgs&#123;job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Average Number of PGs in the Cluster&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [ &#123; &quot;colorMode&quot;: &quot;custom&quot;, &quot;line&quot;: true, &quot;lineColor&quot;: &quot;rgba(216, 200, 27, 0.27)&quot;, &quot;op&quot;: &quot;gt&quot;, &quot;value&quot;: 250 &#125;, &#123; &quot;colorMode&quot;: &quot;custom&quot;, &quot;line&quot;: true, &quot;lineColor&quot;: &quot;rgba(234, 112, 112, 0.22)&quot;, &quot;op&quot;: &quot;gt&quot;, &quot;value&quot;: 300 &#125; ], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;PGs&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;percent&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: true, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 7, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_utilization&#123;osd=\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: &quot;60,80&quot;, &quot;timeFrom&quot;: null, &quot;title&quot;: &quot;Utilization&quot;, &quot;transparent&quot;: false, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: true, &quot;title&quot;: &quot;OSD: $osd&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 4, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: false, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 2, &quot;points&quot;: true, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_perf_apply_latency_seconds&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Apply Latency (s) - &#123;&#123; osd &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_osd_perf_commit_latency_seconds&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Commit Latency (s) - &#123;&#123; osd &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Latency&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;s&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;s&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 2, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_avail_bytes&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;hide&quot;: false, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Available - &#123;&#123; osd &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_osd_avail_bytes&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_osd_used_bytes&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Used - &#123;&#123; osd &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_osd_avail_bytes&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;OSD Storage&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 5, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 9, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: false, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 2, &quot;points&quot;: true, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 4, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_osd_variance&#123;osd=~\&quot;$osd\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Available - &#123;&#123; osd &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_osd_avail_bytes&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Utilization Variance&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ] &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125; ], &quot;schemaVersion&quot;: 14, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;ceph&quot;, &quot;osd&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;auto&quot;: true, &quot;auto_count&quot;: 10, &quot;auto_min&quot;: &quot;1m&quot;, &quot;current&quot;: &#123; &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &quot;datasource&quot;: null, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;Interval&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;interval&quot;, &quot;options&quot;: [ &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;auto&quot;, &quot;value&quot;: &quot;$__auto_interval&quot; &#125;, &#123; &quot;selected&quot;: true, &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;10m&quot;, &quot;value&quot;: &quot;10m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30m&quot;, &quot;value&quot;: &quot;30m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1h&quot;, &quot;value&quot;: &quot;1h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;6h&quot;, &quot;value&quot;: &quot;6h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;12h&quot;, &quot;value&quot;: &quot;12h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1d&quot;, &quot;value&quot;: &quot;1d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;7d&quot;, &quot;value&quot;: &quot;7d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;14d&quot;, &quot;value&quot;: &quot;14d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30d&quot;, &quot;value&quot;: &quot;30d&quot; &#125; ], &quot;query&quot;: &quot;1m,10m,30m,1h,6h,12h,1d,7d,14d,30d&quot;, &quot;refresh&quot;: 2, &quot;type&quot;: &quot;interval&quot; &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123; &quot;text&quot;: &quot;ceph-exporter&quot;, &quot;value&quot;: &quot;ceph-exporter&quot; &#125;, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;exporter&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;export&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(ceph_health_status, job)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123; &quot;text&quot;: &quot;osd.0&quot;, &quot;value&quot;: &quot;osd.0&quot; &#125;, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;OSD&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;osd&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(ceph_osd_up&#123;job=\&quot;$export\&quot;&#125;, osd)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-1h&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;Ceph - OSD&quot;, &quot;version&quot;: 16&#125; ceph-poolquot;annotations&quot;: &#123; &quot;list&quot;: [] &#125;, &quot;description&quot;: &quot;Ceph Pools dashboard.&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 926, &quot;graphTooltip&quot;: 0, &quot;hideControls&quot;: false, &quot;id&quot;: 12, &quot;links&quot;: [], &quot;refresh&quot;: &quot;1m&quot;, &quot;rows&quot;: [ &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 4, &quot;grid&quot;: &#123;&#125;, &quot;height&quot;: &quot;&quot;, &quot;id&quot;: 2, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 0, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;/^Total.*$/&quot;, &quot;fill&quot;: 0, &quot;linewidth&quot;: 4, &quot;stack&quot;: false &#125;, &#123; &quot;alias&quot;: &quot;/^Raw.*$/&quot;, &quot;color&quot;: &quot;#BF1B00&quot;, &quot;fill&quot;: 0, &quot;linewidth&quot;: 4 &#125; ], &quot;span&quot;: 10, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_pool_available_bytes&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Avilable - &#123;&#123; pool &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_pool_available_bytes&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_pool_used_bytes&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Used - &#123;&#123; pool &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_pool&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_pool_used_bytes&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125; + ceph_pool_available_bytes&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Total - &#123;&#123; pool &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_pool&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_pool_raw_used_bytes&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Raw - &#123;&#123; pool &#125;&#125;&quot;, &quot;metric&quot;: &quot;ceph_pool&quot;, &quot;refId&quot;: &quot;D&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Pool Storage&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(245, 54, 54, 0.9)&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;rgba(50, 172, 45, 0.97)&quot; ], &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;format&quot;: &quot;percentunit&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 1, &quot;minValue&quot;: 0, &quot;show&quot;: true, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;id&quot;: 10, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;span&quot;: 2, &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot; ceph_pool_used_bytes&#123;pool=\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125; / (ceph_pool_available_bytes&#123;pool=\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125; + ceph_pool_used_bytes&#123;pool=\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;)&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Usage&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: true, &quot;title&quot;: &quot;Pool: $pool&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125;, &#123; &quot;collapse&quot;: false, &quot;height&quot;: &quot;250px&quot;, &quot;panels&quot;: [ &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;height&quot;: &quot;&quot;, &quot;id&quot;: 7, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 6, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;ceph_pool_objects_total&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Objects - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;ceph_pool_dirty_objects_total&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Dirty Objects - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Objects in Pool&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;cumulative&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 4, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 6, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(ceph_pool_read_total&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;[3m])&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Read - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;irate(ceph_pool_write_total&#123;pool=~\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;[3m])&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Write - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;IOPS&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: &quot;IOPS&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: &quot;IOPS&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: false &#125; ] &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;decimals&quot;: 2, &quot;editable&quot;: true, &quot;error&quot;: false, &quot;fill&quot;: 1, &quot;grid&quot;: &#123;&#125;, &quot;id&quot;: 5, &quot;interval&quot;: &quot;$interval&quot;, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;span&quot;: 12, &quot;stack&quot;: true, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;irate(ceph_pool_read_bytes_total&#123;pool=\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;[3m])&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Read Bytes - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 60 &#125;, &#123; &quot;expr&quot;: &quot;irate(ceph_pool_write_bytes_total&#123;pool=\&quot;$pool\&quot;, job=\&quot;$export\&quot;&#125;[3m])&quot;, &quot;interval&quot;: &quot;$interval&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Written Bytes - &#123;&#123; pool &#125;&#125;&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 60 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Throughput&quot;, &quot;tooltip&quot;: &#123; &quot;msResolution&quot;: false, &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;Bps&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: 0, &quot;show&quot;: true &#125; ] &#125; ], &quot;repeat&quot;: null, &quot;repeatIteration&quot;: null, &quot;repeatRowId&quot;: null, &quot;showTitle&quot;: false, &quot;title&quot;: &quot;New row&quot;, &quot;titleSize&quot;: &quot;h6&quot; &#125; ], &quot;schemaVersion&quot;: 14, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;ceph&quot;, &quot;pools&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;auto&quot;: true, &quot;auto_count&quot;: 10, &quot;auto_min&quot;: &quot;1m&quot;, &quot;current&quot;: &#123; &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &quot;datasource&quot;: null, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;Interval&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;interval&quot;, &quot;options&quot;: [ &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;auto&quot;, &quot;value&quot;: &quot;$__auto_interval&quot; &#125;, &#123; &quot;selected&quot;: true, &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;10m&quot;, &quot;value&quot;: &quot;10m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30m&quot;, &quot;value&quot;: &quot;30m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1h&quot;, &quot;value&quot;: &quot;1h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;6h&quot;, &quot;value&quot;: &quot;6h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;12h&quot;, &quot;value&quot;: &quot;12h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1d&quot;, &quot;value&quot;: &quot;1d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;7d&quot;, &quot;value&quot;: &quot;7d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;14d&quot;, &quot;value&quot;: &quot;14d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30d&quot;, &quot;value&quot;: &quot;30d&quot; &#125; ], &quot;query&quot;: &quot;1m,10m,30m,1h,6h,12h,1d,7d,14d,30d&quot;, &quot;refresh&quot;: 2, &quot;type&quot;: &quot;interval&quot; &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123; &quot;text&quot;: &quot;ocata-ceph&quot;, &quot;value&quot;: &quot;ocata-ceph&quot; &#125;, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;exporter&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;export&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(ceph_health_status, job)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123; &quot;text&quot;: &quot;instances&quot;, &quot;value&quot;: &quot;instances&quot; &#125;, &quot;datasource&quot;: &quot;prometheus&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;Pool&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;pool&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(ceph_pool_objects_total&#123;job=\&quot;$export\&quot;&#125;, pool)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-1h&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;Ceph - Pools&quot;, &quot;version&quot;: 8&#125;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s上用ceph-rbd存储]]></title>
    <url>%2Fposts%2F0ijfj445.html</url>
    <content type="text"><![CDATA[k8s默认使用的本地存储，集群容灾性差，ceph作为开源的分布式存储系统，与openstack环境搭配使用，已经很多云计算公司运用于生产环境，可靠性得到验证。这里介绍一下在k8s环境下ceph如何使用. Kubernetes支持后两种存储接口,支持的接入模式如下图: ceph端新建pool新建一个pool pool_1包含90个pg 1ceph osd pool create pool_1 90 RBD块设备在ceph集群中新建1个rbd块设备，lun1 1rbd create pool_1/lun1 --size 10G ceph权限控制123456789101112131415161718192021使用ceph-deploy --overwrite-conf admin部署的keyring权限太大，可以自己创建一个keyring client.rdb给块设备客户端node用# ceph auth get-or-create client.rbd mon &apos;allow r&apos; osd &apos;allow class-read object_prefix rbd_children, allow rwx pool=pool_1&apos; &gt; ceph.client.rbd.keyringk8s节点需要安装cephyum install ceph-commonecho &apos;rbd&apos; &gt; /etc/modules-load.d/rbd.confmodprobe rbdlsmod | grep rbdrbd 83640 0 libceph 306625 1 rbd配置文件秘钥传到k8s上[root@ceph ceph]# scp ceph.client.rbd.keyring 192.168.6.102:/etc/ceph/root@192.168.6.102&apos;s password: ceph.client.rdb.keyring 100% 63 8.5KB/s 00:00 [root@ceph ceph]# scp ceph.conf 192.168.6.102:/etc/ceph/ root@192.168.6.102&apos;s password: ceph.conf 100% 310 25.1KB/s 00:00 [root@ceph ceph]# k8s的node上操作1234567891011121314151617181920[root@node1 ceph]# ceph -s --name client.rdb cluster: id: cbc04385-1cdf-4512-a3f5-a5b3e8686a05 health: HEALTH_WARN application not enabled on 1 pool(s) services: mon: 1 daemons, quorum ceph mgr: ceph(active) osd: 1 osds: 1 up, 1 in data: pools: 1 pools, 90 pgs objects: 5 objects, 709B usage: 1.00GiB used, 19.0GiB / 20.0GiB avail pgs: 90 active+clean 警告解决办法：ceph health detailceph osd pool application enable pool_1 rbd map设备123456789# rbd map pool_1/lun1 --name client.rbdrbd: sysfs write failedRBD image feature set mismatch. Try disabling features unsupported by the kernel with &quot;rbd feature disable&quot;.In some cases useful info is found in syslog - try &quot;dmesg | tail&quot;.rbd: map failed: (6) No such device or address解决办法：在ceph节点上rbd feature disable pool_1/lun1 exclusive-lock, object-map, fast-diff, deep-flatten 将块设备挂载在操作系统中进行格式化12rbd map pool_1/lun1 --name client.rbdmkfs.ext4 /dev/rbd0 创建pv、pvc123对ceph.client.admin.keyring 的内容进行base64编码[root@node1 ceph]# ceph auth get-key client.rbd | base64QVFCTktERmRzeXpKQUJBQVVvVGVvWVYyamxhRi8zNU1hZ2R2dFE9PQ== 123456789101112根据上面的输出，创建secret ceph-client-rbd[root@node1 ceph]# cat ceph-secret.yml apiVersion: v1kind: Secretmetadata: name: ceph-client-rbdtype: &quot;kubernetes.io/rbd&quot; data: key: QVFCTktERmRzeXpKQUJBQVVvVGVvWVYyamxhRi8zNU1hZ2R2dFE9PQ== kubectl apply -f ceph-secret.yml 123456789101112131415161718192021222324252627282930创建pv，注意： 这里是user：rbd 而不是user: client.rbd[root@node1 ceph]# cat pv.yml kind: PersistentVolumeapiVersion: v1metadata: name: ceph-pool1-lun1spec: storageClassName: manual capacity: storage: 10Gi accessModes: - ReadWriteOnce rbd: fsType: ext4 image: lun1 monitors: - &apos;192.168.6.101:6789&apos; pool: pool_1 readOnly: false secretRef: name: ceph-client-rbd namespace: default user: rbd [root@node1 ceph]# kubectl apply -f pv.yml persistentvolume/ceph-pool1-lun1 created[root@node1 ceph]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEceph-pool1-lun1 10Gi RWO Retain Available manual 4s 12345678910111213141516171819202122创建pvc[root@node1 ceph]# cat pvc.yml kind: PersistentVolumeClaimapiVersion: v1metadata: name: pvc1spec: storageClassName: manual accessModes: - ReadWriteOnce resources: requests: storage: 10Gi [root@node1 ceph]# kubectl apply -f pvc.yml persistentvolumeclaim/pvc1 created[root@node1 ceph]# kubectl get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpvc1 Bound ceph-pool1-lun1 10Gi RWO manual 7s]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph对象存储集群部署]]></title>
    <url>%2Fposts%2Fouy564tra.html</url>
    <content type="text"><![CDATA[集群架构12345192.168.10.186 ceph1 admin、mon、mgr、osd、rgw192.168.10.187 ceph2 mon、mgr、osd、rgw 192.168.10.188 ceph3 mon、mgr、osd、rgw 部署123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263[root@10dot186 ~]# vim /etc/hosts192.168.10.186 ceph1192.168.10.187 ceph2192.168.10.188 ceph3hostnamectl set-hostname ceph1hostnamectl set-hostname ceph2hostnamectl set-hostname ceph3ntpdate ntp1.aliyun.comssh-keygenssh-copy-id ceph1ssh-copy-id ceph2ssh-copy-id ceph3[root@ceph1 ~]# vim /etc/yum.repos.d/ceph.repo[ceph]name=Ceph packages for $basearchbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/$basearchenabled=1gpgcheck=1priority=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc[ceph-noarch]name=Ceph noarch packagesbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/noarchenabled=1gpgcheck=1priority=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc[ceph-source]name=Ceph source packagesbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/SRPMSenabled=0gpgcheck=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.ascpriority=1yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmyum makecacheyum update -yyum install -y ceph-deploymkdir /etc/ceph &amp;&amp; cd /etc/cephceph-deploy new ceph1 ceph2 ceph3yum install -y python-setuptools 123456在配置文件中增加：osd_pool_default_size = 3[mgr]mgr modules = dashboard[mon]mon allow pool delete = true mon123456789101112131415161718192021ceph-deploy install ceph1 ceph2 ceph3ceph-deploy mon create-initial[root@ceph1 ceph]# ceph -s cluster: id: fcb2fa5e-481a-4494-9a27-374048f37113 health: HEALTH_OK services: mon: 3 daemons, quorum ceph1,ceph2,ceph3 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 0B used, 0B / 0B avail pgs: mgr123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148ceph-deploy mgr create ceph1 ceph2 ceph3[root@ceph1 ceph]# ceph -s cluster: id: fcb2fa5e-481a-4494-9a27-374048f37113 health: HEALTH_OK services: mon: 3 daemons, quorum ceph1,ceph2,ceph3 mgr: ceph1(active), standbys: ceph2, ceph3 osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 0B used, 0B / 0B avail pgs: [root@ceph1 ceph]# ceph mgr dump&#123; &quot;epoch&quot;: 4, &quot;active_gid&quot;: 4122, &quot;active_name&quot;: &quot;ceph1&quot;, &quot;active_addr&quot;: &quot;192.168.10.186:6800/22316&quot;, &quot;available&quot;: true, &quot;standbys&quot;: [ &#123; &quot;gid&quot;: 4129, &quot;name&quot;: &quot;ceph2&quot;, &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ] &#125;, &#123; &quot;gid&quot;: 4132, &quot;name&quot;: &quot;ceph3&quot;, &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ] &#125; ], &quot;modules&quot;: [ &quot;balancer&quot;, &quot;restful&quot;, &quot;status&quot; ], &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ], &quot;services&quot;: &#123;&#125;&#125;[root@ceph1 ceph]# ceph mgr module enable dashboard[root@ceph1 ceph]# ceph mgr dump&#123; &quot;epoch&quot;: 7, &quot;active_gid&quot;: 4139, &quot;active_name&quot;: &quot;ceph1&quot;, &quot;active_addr&quot;: &quot;192.168.10.186:6800/22316&quot;, &quot;available&quot;: true, &quot;standbys&quot;: [ &#123; &quot;gid&quot;: 4136, &quot;name&quot;: &quot;ceph3&quot;, &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ] &#125;, &#123; &quot;gid&quot;: 4141, &quot;name&quot;: &quot;ceph2&quot;, &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ] &#125; ], &quot;modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot; ], &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ], &quot;services&quot;: &#123;&#125;&#125;[root@ceph1 ceph]# ceph config-key put mgr/dashboard/server_addr 192.168.6.101set mgr/dashboard/server_addr[root@ceph1 ceph]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port[root@ceph1 ~]# netstat -tulnp |grep 7000tcp 0 0 192.168.6.101:7000 0.0.0.0:* LISTEN 19836/ceph-mgr 这时看下danshboard图： osd1234567891011121314151617181920212223242526272829303132每台机器做逻辑卷[root@ceph1 ceph]# pvcreate /dev/sdb Physical volume &quot;/dev/sdb&quot; successfully created.[root@ceph1 ceph]# vgcreate data_vg1 /dev/sdb Volume group &quot;data_vg1&quot; successfully created [root@ceph1 ceph]# lvcreate -n data_lv1 -L 99g data_vg1 Logical volume &quot;data_lv1&quot; created. ceph-deploy osd create ceph1 --data data_vg1/data_lv1ceph-deploy osd create ceph2 --data data_vg1/data_lv1ceph-deploy osd create ceph3 --data data_vg1/data_lv1[root@ceph1 ceph]# ceph -s cluster: id: fcb2fa5e-481a-4494-9a27-374048f37113 health: HEALTH_OK services: mon: 3 daemons, quorum ceph1,ceph2,ceph3 mgr: ceph1(active), standbys: ceph3, ceph2 osd: 3 osds: 3 up, 3 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 3.01GiB used, 294GiB / 297GiB avail pgs: 这时看下danshboard图： rgw集群12345678910111213141516171819202122ceph-deploy install --rgw ceph1 ceph2 ceph3ceph-deploy admin ceph1 ceph2 ceph3ceph-deploy rgw create ceph1 ceph2 ceph3[root@ceph1 ceph]# ceph -s cluster: id: fcb2fa5e-481a-4494-9a27-374048f37113 health: HEALTH_OK services: mon: 3 daemons, quorum ceph1,ceph2,ceph3 mgr: ceph1(active), standbys: ceph3, ceph2 osd: 3 osds: 3 up, 3 in rgw: 3 daemons active data: pools: 4 pools, 32 pgs objects: 191 objects, 3.08KiB usage: 3.01GiB used, 294GiB / 297GiB avail pgs: 32 active+clean 这时看下danshboard图： NGINX代理12345678910111213141516171819202122安装这里就不介绍了[root@ceph1 conf.d]# cat cephcloud.dev.goago.cn.conf upstream cephcloud.dev.goago.cn &#123; server 192.168.10.186:7480; server 192.168.10.187:7480; server 192.168.10.188:7480; &#125; server &#123; listen 80; server_name cephcloud.dev.goago.cn; location / &#123; proxy_intercept_errors on; access_log /var/log/nginx/cephcloud_log; proxy_pass http://cephcloud.dev.goago.cn; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Request_Uri $request_uri; &#125; &#125; s3和swift1234567891011121314具体安装这里不叙述了，可以看我上篇文章New settings: Access Key: M954JYYAOBES65B7UNEZ Secret Key: 11MZu3N9vB4S4C4N8U2Ywgkhxro3Xi6K9HPyRQ9v Default Region: US S3 Endpoint: cephcloud.dev.goago.cn DNS-style bucket+hostname:port template for accessing a bucket: %(bucket)s.cephcloud.dev.goago.cn bucket Encryption password: 123456 Path to GPG program: /usr/bin/gpg Use HTTPS protocol: False HTTP Proxy server name: HTTP Proxy server port: 0]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph-luminous-bluestore]]></title>
    <url>%2Fposts%2F78fhjj54.html</url>
    <content type="text"><![CDATA[对比1234567891011ceph后端支持多种存储引擎，以插件化的形式来进行管理使用，目前支持filestore，kvstore，memstore以及bluestore1）Firestore存在的问题是：在写数据前需要先写journal，会有一倍的写放大；若是另外配备SSD盘给journal使用又增加额外的成本；filestore一开始只是对于SATA/SAS这一类机械盘进行设计的，没有专门针对SSD这一类的Flash介质盘做考虑。2）而Bluestore的优势在于：减少写放大；针对FLASH介质盘做优化；直接管理裸盘，进一步减少文件系统部分的开销。 Bluestore原理说明123对象可以直接存放在裸盘上，不需要任何文件系统接口。BlueStore 直接使用一个原始分区，ceph对象将直接写在块设备上，不再需要任何的文件系统；和osd一起进来的元数据将存储在 一个 名为 RocksDB 的键值对 数据库； 各层意义1234RocksDB ：存储 WAL 日志和元数据（omap）BlueRocksEnv: 与RocksDB 交互的接口BlueFS： 一个类似文件系统的 mini C++，使 rocksdb 生效，ENv 接口（存储 RocksDB 日志和 sst 文件）；因为rocksdb 一般跑在一个文件系统的上层，所以创建了 BlueFS。 RocksDB 存放的数据类型1234对象的元数据write-ahead 日志ceph omap 数据allocator metadata(元数据分配器)：决定数据存放位置；此功能可插拔 默认BlueStore模型123第一个小分区（XFS或者ext4）,包括ceph files （init system descriptor,status,id,fsid,keyring 等）和RocksDB 文件第二个分区是一个原始分区 优点1每一部分都可以存放在不同的磁盘中，RocksDB WAL 和 DB 可以存放在不同的磁盘或者小分区中 添加osd案例1由于Luminous里默认使用Bluestore，可以直接操作裸盘,data和block-db会使用lv。综合成本及性能，我们把block.db使用ssd的分区，osd仍然使用sas，block.wal不指定. 这里vdb作为osd盘，vdc作为block-db盘 123456789101112131415161718192021222324252627首先ssh到各个存储节点，block.db使用的ssd分区,这里node1举例：# ssh node1# pvcreate /dev/vdb # 创建pv, 这里使用的整块磁盘(与后面的分区对比), pvs 查看pv列表Physical volume &quot;/dev/vdb&quot; successfully created.# vgcreate data_vg1 /dev/vdb # 创建vg, vgs查看vg列表Volume group &quot;data_vg1&quot; successfully created# lvcreate -n data_lv1 -L 1020.00m data_vg1 #创建lv,lvs查看lv列表, -n指定lv名称, -L指定lv的大小,需要小于或者等于vg的VSizeLogical volume &quot;data_lv1&quot; created.---------------------------------------------生产环境一块ssd磁盘会对应多块osd，所以这里也需要把ssd多个分区# parted /dev/vdc (parted) mklabel gpt (parted) mkpart primary 0% 25% #因为测试，这里只做了一个占据磁盘25%容量的分区，实际情况根据osd数目划分相应的分区数(parted) quit# pvcreate /dev/vdc1 # 创建pv, 这里使用的是磁盘分区, pvs 查看pv列表Physical volume &quot;/dev/vdc1&quot; successfully created.# vgcreate block_db_vg1 /dev/vdc1 # 创建vg, vgs查看vg列表Volume group &quot;block_db_vg1&quot; successfully created# lvcreate -n block_db_lv1 -L 1020.00m block_db_vg1 # 创建lv, lvs查看lv列表, -L指定lv的大小，需要小于或者等于 vg的VSizeLogical volume &quot;block_db_lv1&quot; created.---------------------------------------------# 不需要加--bluestore 参数，默认就是使用bluestore方式，data_vg1/data_lv1 是数据盘，block_db_vg1/block_db_lv1是block-db管理节点执行：ceph-deploy --overwrite-conf osd create node1 --data data_vg1/data_lv1 --block-db block_db_vg1/block_db_lv1ceph-deploy --overwrite-conf osd create node2 --data data_vg1/data_lv1 --block-db block_db_vg1/block_db_lv1 案例2创建具有3个逻辑卷的OSD（模拟不同类型的存储介质） 12345678910#pvcreate /dev/sdb Physical volume &quot;/dev/sdb&quot; successfully created.#vgcreate ceph-pool /dev/sdb Volume group &quot;ceph-pool&quot; successfully created#lvcreate -n osd0.wal -L 1G ceph-pool Logical volume &quot;osd0.wal&quot; created.# lvcreate -n osd0.db -L 1G ceph-pool Logical volume &quot;osd0.db&quot; created.# lvcreate -n osd0 -l 100%FREE ceph-pool Logical volume &quot;osd0&quot; created. 完成逻辑卷的创建后我们就可以创建 OSD 了。 12345ceph-deploy osd create \ --data ceph-pool/osd0 \ --block-db ceph-pool/osd0.db \ --block-wal ceph-pool/osd0.wal \ --bluestore node1 wal&amp; db 的大小问题123在 ceph bluestore 的情况下，wal 是 RocksDB 的write-ahead log, 相当于之前的 journal 数据，db 是 RocksDB 的metadata 信息。在磁盘选择原则是 block.wal &gt; block.db &gt; block。当然所有的数据也可以放到同一块盘上。默认情况下， wal 和 db 的大小分别是 512 MB 和 1GB，现在没有一个好的理论值，好像和 ceph 本身承载的数据类型有关系。值得注意的是，如果所有的数据都在单块盘上，那是没有必要指定 wal &amp;db 的大小的。如果 wal &amp; db 是在不同的盘上，由于 wal/db 一般都会分的比较小，是有满的可能性的。如果满了，这些数据会迁移到下一个快的盘上(wal - db - main)。所以最少不会因为数据满了，而造成无法写入。]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph的pg算法]]></title>
    <url>%2Fposts%2Ffd22jkk6.html</url>
    <content type="text"><![CDATA[PG介绍PG, Placement Groups。CRUSH先将数据分解成一组对象，然后根据对象名称、复制级别和系统中的PG数等信息执行散列操作，再将结果生成PG ID。可以将PG看做一个逻辑容器，这个容器包含多个对象，同时这个逻辑对象映射之多个OSD上。如果没有PG，在成千上万个OSD上管理和跟踪数百万计的对象的复制和传播是相当困难的。没有PG这一层，管理海量的对象所消耗的计算资源也是不可想象的。建议每个OSD上配置50~100个PG。 计算PG数官方推荐如下： Ceph集群中的PG总数： 1PG总数 = (OSD总数 * 100) / 最大副本数 结果必须舍入到最接近的2的N次方幂的值。 Ceph集群中每个pool中的PG总数： 1存储池PG总数 = (OSD总数 * 100 / 最大副本数) / 池数 平衡每个存储池中的PG数和每个OSD中的PG数对于降低OSD的方差、避免速度缓慢的恢复再平衡进程是相当重要的。 修改PG和PGPPGP是为了实现定位而设置的PG，它的值应该和PG的总数(即pg_num)保持一致。对于Ceph的一个pool而言，如果增加pg_num，还应该调整pgp_num为同样的值，这样集群才可以开始再平衡。参数pg_num定义了PG的数量，PG映射至OSD。当任意pool的PG数增加时，PG依然保持和源OSD的映射。直至目前，Ceph还未开始再平衡。此时，增加pgp_num的值，PG才开始从源OSD迁移至其他的OSD，正式开始再平衡。PGP，Placement Groups of Placement。 获取现有的PG数和PGP数值： 123ceph osd pool get data pg_numceph osd pool get data pgp_num 检查存储池的副本数 1ceph osd dump|grep -i size 计算pg_num和pgp_num 123456789# pg_num calculationpg_num = (num_osds * 100) / num_copiesnum_up = pow(2, int(log(pg_num,2) + 0.5))num_down = pow(2, int(log(pg_num,2)))if abs(pg_num - num_up) &lt;= abs(pg_num - num_down): pg_num = num_upelse: pg_num = num_downpgp_num = pg_num 修改存储池的PG和PGP 123ceph osd pool set data pg_num ceph osd pool set data pgp_num 例子： 123ceph osd pool lsceph osd pool set .rgw.root pg_num 16ceph osd pool set .rgw.root pgp_num 16]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph组件的状态]]></title>
    <url>%2Fposts%2Fdsl5646k.html</url>
    <content type="text"><![CDATA[Ceph 整体状态查看123ceph -s #ceph状态是否正常，及配置运行状态ceph -w #实时查看数据写入情况ceph health detail #如果集群有问题，会详细列出具体的pg或者osd monmon相关状态1ceph quorum_status -f json-pretty client 无法链接mon的可能原因 连通性和防火墙规则。在MON主机上修改允许TCP 端口6789的访问。 磁盘空间。每个MON主机上必须有超过5%的空闲磁盘空间使MON和levelDB数据库正常工作。 MON没有工作或者离开选举，检查如上命令输出结果中的quorum_status和mon_status或者ceph -s 的输出来确定失败的MON进程，尝试重启或者部署一个新的来替代它。 MON 状态表 状态 说明 probing 正在探测态。这意味着MON正在寻找其他的MON。当MON启动时， MON尝试找在monmap定义的其他剩余的MON。在多MON的集群中，直到MON找到足够多的MON构建法定选举人数之前，它一直在这个状态。这意味着如果3个MON中的2个挂掉，剩余的1个MON将一直在probing状态，直到启动其他的MON中的1个为止。 electing 正在选举态。这意味着MON正在选举中。这应该很快完成，但有时也会卡在正这，这通常是因为MON主机节点间的时钟偏移导致的. synchronizing 正在同步态。这意味着MON为了加入到法定人数中和集群中其他的MON正在同步. leader或peon 领导态或员工态。这不应该出现。然而有机会出现，一般和时钟偏移有很大关系 时钟偏移警告MON可能被MON节点之间的重要的时钟偏移激烈的影响。这经常会转变为没有明显原因的诡异的行为。为了避免这种问题，应该在MON节点上运行一个时间同步的工具。默认最大容忍的时钟偏移为0.05s，虽然可以修改，但不建议修改，这是官方开发和QA认可的值。私自未经测试修改虽然无数据丢失风险，可能会对MON集群和总体集群健康导致意外的作用。 如果遇到这个告警，同步时钟，在MON上运行NTP的客户端会有帮助。如果经常遇到这个问题，可能是因为使用了远端的NTP服务器，请考虑在内网部署NTP服务器。 OSDOSD 状态表 状态 说明 up osd启动 down osd停止 in osd在集群中 out osd不在集群中，默认OSD down 超过300s,Ceph会标记为out，会触发重新平衡操作 up &amp; in 说明该OSD正常运行，且已经承载至少一个PG的数据。这是一个OSD的标准工作状态 up &amp; out 说明该OSD正常运行，但并未承载任何PG，其中也没有数据。一个新的OSD刚刚被加入Ceph集群后，便会处于这一状态。而一个出现故障的OSD被修复后，重新加入Ceph集群时，也是处于这一状态 down &amp; in 说明该OSD发生异常，但仍然承载着至少一个PG，其中仍然存储着数据。这种状态下的OSD刚刚被发现存在异常，可能仍能恢复正常，也可能会彻底无法工作 down &amp; out 说明该OSD已经彻底发生故障，且已经不再承载任何PG 常见问题 硬盘失败。可以通过系统日志或SMART活动确认。有些有缺陷的硬盘因为密集的有时限的错误修复活动变的很慢。 网络连接问题。可以使用ping、iperf等普通网络工具进行调试。 OSD文件存储的磁盘空间不足。 磁盘到85%将会触发HEALTH_WARN告警。磁盘到95%会触发HEALTH_ERR告警，OSD为了避免填满磁盘会停止。 超过系统资源限制。系统内存应该足够主机上所有的OSD进程，打开文件句柄数和最大线程数也应该是足够的。OSD进程处理心跳的限制导致进程自杀。默认的处理和通信超时不足以执行IO饥饿型的操作，尤其是失败后的恢复。这经常会导致OSD闪断的现象出现。 暂时关闭pg重新平衡在维护操作或解决问题时，不希望在停止一些OSD后，超时的OSD被标记为out后，CRUSH算法自动进行重新平衡操作。需要执行集群关闭out检测命令： 1ceph osd set noout 这样在停止的OSD中的PG会变为降级态。当维护操作完成后，需要先启动停止的OSD，再恢复默认设置： 1ceph osd unset noout 老/慢 请求如果一个OSD服务进程很慢地响应请求。它会产生一个请求耗时过久超过30秒的警告提示信息。 12&#123;date&#125; &#123;osd.num&#125; [WRN] 1 slow requests, 1 included below; oldest blocked for &gt; 30.005692 secs&#123;date&#125; &#123;osd.num&#125; [WRN] slow request 30.005692 seconds old, received at &#123;date-time&#125;: osd_op(client.4240.0:8 benchmark_data_ceph-1_39426_object7 [write 0~4194304] 0.69848840) v4 currently waiting for subops from [610] 可能的原因和修复方法包括： 硬盘故障（检查dmesg的输出信息）；替换为正常的硬盘 内核文件系统bug（检查dmesg的输出信息确）；升级内核 集群负载过高（检查系统负载、iostat等）；机器扩容，尝试降低系统负载 ceph-osd服务进程的的bug；升级ceph或重启OSD OSD 闪断OSD重启或恢复中后，OSD在peering状态一直闪断。因为IO密集型的任务导致影响心跳检测异常，你可以暂时为集群通过打开nodown noup选项。执行命令： 123ceph osd set nodown ceph osd set noup ceph osd set noout 当集群健康稳定后，执行如下命令恢复默认值： 123ceph osd unset nodown ceph osd unset noup ceph osd unset noout 确认磁盘损坏检查日志，执行如下命令： 123456789dmesg | egrep sd[a­]eg:dmesg |egrep sda通过smartctl提取信息和执行测试检查可疑的设备:smartctl a /dev/sda通过观察响应时间确认。任何磁盘持续显示不常见的值可能会失败：iostat x /dev/sda ###替换osd数据磁盘当集群规模比较大，磁盘出硬件故障是一个常态。为了维持集群规模稳定，必须及时的修复因硬盘故障停止的OSD。 因为Ceph采用了多个副本的策略，一般情况下，不需要恢复坏掉硬盘的数据。用一个新硬盘初始化一个OSD即可。操作步骤如下： 123456789101112131415161718192021222324两种情况：a. 如果磁盘坏掉osd会标记为down，默认300秒osd会被标记为out，数据会开始迁移。所以我们替换osd数据磁盘，确保数据迁移完成，集群状态是ok。b. 如果磁盘将要损坏，但还没有坏，仍然是up&amp;in的，则需要先把该osd 设置为out: ceph osd out osd.0,这样集群会把osd.0的数据 rebalancing and copying到其他机器上去。直到整个集群编程active+clean，再进行后续操作1. 关闭 osd.0的进程systemctl stop ceph-osd@02. 删除旧osd信息(osd.0为例)：ceph osd crush remove osd.0ceph auth del osd.0ceph osd rm 03. 创建新osda. ceph osd create #会自动生成uuid和osd-numberb. ssh &#123;new_osd_host&#125;c. sudo mkdir /var/lib/ceph/osd/ceph-&#123;osd-number&#125; #上一步生成的osd-numberd. 分区 通过parted把osd的磁盘分区为一个分区e. sudo mkfs -t xfs /dev/&#123;drive&#125; # 上一步分区f. sudo mount /dev/&#123;sdx&#125; /var/lib/ceph/osd/ceph-&#123;osd-number&#125;g. ceph-osd -i &#123;osd-number&#125; --mkfs --mkkey # 初始化osd数据目录目录必须为空h. ceph auth add osd.&#123;osd-number&#125; osd &apos;allow *&apos; mon &apos;allow rwx&apos; -i /var/lib/ceph/osd/ceph-&#123;osd-number&#125;/keyring #注册认证keyi. ceph osd crush add osd.&#123;osd-number&#125;# 添加osd到crush map，则该osd可以接受数据了，这个时候osd的状态为 down &amp; in。ceph osd crush add osd.0 1.0 host=bj-yh-ceph-node2j. systemctl start ceph-osd@&#123;osd-number&#125; # 启动osd进程，数据会rebalancing and migrating 到新的osd上 替换ssd日志磁盘由于我们使用过程中，一块ssd分4个区，给4个osd使用，所以如果ssd日志磁盘坏掉，需要给对应的osd都要操作 123456789101112131415161718192021222324252627281. 设置OSD状态为noout，防止数据重新平衡ceph osd set noout2. 停止osd进程ssh &#123;ssd所在节点&#125;systemctl stop ceph-osd@x #ssd所对应的osds3. 日志数据落盘到数据盘ceph-osd -i &#123;osd-number&#125; --flush-journal #该ssd日志分区所对应的所有osd-number4. 删除日志链接rm -rf /var/lib/ceph/osd/&#123;osd-number&#125;/journal # #该ssd日志分区所对应的所有osd-number5. 创建日志链接ln -s /dev/disk/by-partuuid/&#123;uuid&#125; /var/lib/ceph/osd/ceph-&#123;osd-number&#125;/journal # 注意别把使用中的分区给绑定错了chown ceph:ceph /var/lib/ceph/osd/ceph-&#123;osd-number&#125;/journalecho &#123;uuid&#125; &gt; /var/lib/ceph/osd/ceph-&#123;osd-number&#125;/journal_uuid #前面/dev/disk/by-partuuid/&#123;uuid&#125; uuid6. 创建日志ceph-osd -i &#123;osd-number&#125; --mkjournal7. 启动osd进程systemctl start ceph-osd@&#123;osd-number&#125;如果所有osd进程都起来了8. 去除noout的标记ceph osd set noout PGceph health detail #正常会返回 ok PG 状态表正常是active+clean 状态 描述 active 活跃状态。ceph将处理到达这个PG的读写请求 unactive 非活跃状态。该PG不能处理读写请求 clean 干净状态。Ceph复制PG内所有对象到设定正确的数目 unclean 非干净状态。PG不能从上一个失败中恢复 down 离线状态。有必需数据的副本挂掉，比如对象所在的3个副本的OSD挂掉，所以PG离线 degraded 降级状态。ceph有些对象的副本数目没有达到系统设置，一般是因为有OSD挂掉 inconsistent 不一致态。Ceph 清理和深度清理后检测到PG中的对象在副本存在不一致，例如对象的文件大小不一致或recovery结束后一个对象的副本丢失 peering 正在同步状态。PG正在执行同步处理 recovering 正在恢复状态。Ceph正在执行迁移或同步对象和他们的副本 incomplete 未完成状态。实际的副本数少于min_size。Ceph检测到PG正在丢失关于已经写操作的信息，或者没有任何健康的副本。如果遇到这种状态，尝试启动失败的OSD，这些OSD中可能包含需要的信息或者临时调整副本min_size的值到允许恢复。 stale 未刷新状态。PG状态没有被任何OSD更新，这说明所有存储这个PG的OSD可能down backfilling 正在后台填充状态。 当一个新的OSD加入集群后，Ceph通过移动一些其他OSD上的PG到新的OSD来达到新的平衡；这个过程完成后，这个OSD可以处理客户端的IO请求。 remapped 重新映射状态。PG活动集任何的一个改变，数据发生从老活动集到新活动集的迁移。在迁移期间还是用老的活动集中的主OSD处理客户端请求，一旦迁移完成新活动集中的主OSD开始处理。 PG 长时间卡在一些状态遇到失败后PG进入如 “degraded” 或 “peering”的状态是正常的。通常这些状态指示失败恢复处理过程中的正常继续。然而，一个PG长时间保持在其中一些状态可能是一个更大问题的提示。因此，MON当PG卡在一个非正常态时会警告。 我们特别地检查： inactive : PG太长时间不在active态，例如PG长时间不能处理读写请求，通常是peering的问题。 unclean : PG太长时间不在clean态，例如PG不能完成从上一个失败的恢复，通常是unfound objects导致。 stale : PG状态未被OSD更新，表示所有存储PG的OSD可能挂掉，一般启动相应的OSD进程即可。 在MON节点执行如下命令，可以明确列出卡住的PG： 123ceph pg dump_stuck staleceph pg dump_stuck inactiveceph pg dump_stuck unclean 123456789Ceph清理和深度清理后到PG处于inconsistent态：清理操作被用来检查对象的可用性和健康状态。当集群没有IO密集型（例如恢复）的操作时PG被清理，已经执行清理操作再执行IO密集操作，然而清理操作继续。如果清理任务发现任何对象有损坏或者不匹配的数据（校验和检测），它将标记这个对象为不能使用并且需要手动介入和恢复。OSD执行写操作时计算校验和，Ceph并不能武断地决定副本中的哪个校验和是正确的。例如有3个副本的校验和，有1个不同，很容易猜出应该修复的错误副本（从其他副本恢复），但是当有3个不同的校验和或者一些比特错误，我们不能武断的说哪个是好的。这不是一个端到端的数据修正检查。手动修复损坏的pg1. 找到有不一致对象的PG， 执行如下命令 ceph pg dump | grep inconsistent 或者 ceph health detail2. 当主副本是正确数据时，执行修复命令。或者通过在OSD的硬盘上手动复制正确的文件覆盖掉错误的文件。 ceph pg repair &#123;pgnum&#125; 注意：如果主副本错误，应该使用手动修复，如果通过命令修复则会把主副本的错误数据复制到其他副本。 incomplete PG这个告警是因为实际副本数少于min_size。可能是由于PG对应的OSD挂掉导致。尝试启动挂掉的OSD。 stale PG简单地重启受影响的OSD。当一个OSD不能映射它持有所有的对象时这个问题发生,执行如下操作： 找到PG 1ceph pg dump_stuck stale 映射pg，找到osd： 1ceph pg map &#123;pgname&#125; 重启上面的osd 12ssh &#123;osd-node&#125;systemctl restart ceph-osd@&#123;osd-number&#125; peering 和 down PG 找到受影响的pg 1ceph health detail 下面命令响应结果中的 [“recovery_state”][“blocked”]部分显示peering被停止 的原因,大多数的情况都是一些OSD挂掉。 1ceph pg &#123;pgname&#125; query 尝试重启上面挂掉的OSD，如果无法启动，应该为执行如下命令标记为lost，让恢复操作开始。 1ceph osd lost &#123;osd-number&#125; unfound objects在特殊的失败组合下Ceph会警告unfound objects。这意味着存储集群知道有些对象存在，但是却无法找到它的副本。下面的例子说明这是怎么发生的，有1个PG他映射的的OSD是 1和2： OSD 1挂掉 OSD 2单独处理一些请求 OSD 1运行 OSD 1和2重新peering，1上丢失的对象在队列中等待恢复 在新对象之前被复制之前，OSD2挂掉现在OSD 1知道一些对象存在，但是没有这个副本活的OSD。 这种情况下，到这些对象的IO将被阻塞，集群希望失败的OSD快速地回来。这时假设返回一个IO错误给用户是适当的。修复建议： 启动停止的osd 如果还无法恢复，你可能只有放弃丢失的对象。执行如下命令回滚或删除对象： 123456ceph pg &#123;pgname&#125; mark_unfound_lost revert|deleterevert选项：回滚到对象的前一个版本delete选项：完全删除这个对象使用这个操作时注意，因为它可能是使预期存在这个对象的程序混乱。列出带有丢失对象的PG的名字：ceph pg &#123;pgname&#125; list_missing]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph对象存储]]></title>
    <url>%2Fposts%2Fdld987c6.html</url>
    <content type="text"><![CDATA[Ceph RGW简介Ceph RGW(即RADOS Gateway)是Ceph对象存储网关服务，是基于LIBRADOS接口封装实现的FastCGI服务，对外提供存储和管理对象数据的Restful API。 对象存储适用于图片、视频等各类文件的上传下载，可以设置相应的访问权限。目前Ceph RGW兼容常见的对象存储API，例如兼容绝大部分Amazon S3 API，兼容OpenStack Swift API。 部署 RGW 服务1234567891011121314151617181920[root@ceph1 ceph]# ceph-deploy install --rgw ceph1[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf[ceph_deploy.cli][INFO ] Invoked (2.0.1): /usr/bin/ceph-deploy install --rgw ceph1[ceph_deploy.cli][INFO ] ceph-deploy options:[ceph_deploy.cli][INFO ] verbose : False[ceph_deploy.cli][INFO ] testing : None[ceph_deploy.cli][INFO ] cd_conf : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fa3faca5e60&gt;[ceph_deploy.cli][INFO ] cluster : ceph[ceph_deploy.cli][INFO ] dev_commit : None[ceph_deploy.cli][INFO ] install_mds : False[ceph_deploy.cli][INFO ] stable : None[ceph_deploy.cli][INFO ] default_release : False[ceph_deploy.cli][INFO ] username : None[ceph_deploy.cli][INFO ] adjust_repos : True[ceph_deploy.cli][INFO ] func : &lt;function install at 0x7fa3fbb955f0&gt;[ceph_deploy.cli][INFO ] install_mgr : False[ceph_deploy.cli][INFO ] install_all : False[ceph_deploy.cli][INFO ] repo : False[ceph_deploy.cli][INFO ] host : [&apos;ceph1&apos;][ceph_deploy.cli][INFO ] install_rgw : True 将配置文件、密钥文件同步到 ceph1： 12345678910111213141516171819[root@ceph1 ceph]# ceph-deploy admin ceph1[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf[ceph_deploy.cli][INFO ] Invoked (2.0.1): /usr/bin/ceph-deploy admin ceph1[ceph_deploy.cli][INFO ] ceph-deploy options:[ceph_deploy.cli][INFO ] username : None[ceph_deploy.cli][INFO ] verbose : False[ceph_deploy.cli][INFO ] overwrite_conf : False[ceph_deploy.cli][INFO ] quiet : False[ceph_deploy.cli][INFO ] cd_conf : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fe0e152d3b0&gt;[ceph_deploy.cli][INFO ] cluster : ceph[ceph_deploy.cli][INFO ] client : [&apos;ceph1&apos;][ceph_deploy.cli][INFO ] func : &lt;function admin at 0x7fe0e1dc0230&gt;[ceph_deploy.cli][INFO ] ceph_conf : None[ceph_deploy.cli][INFO ] default_release : False[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph1[ceph1][DEBUG ] connected to host: ceph1 [ceph1][DEBUG ] detect platform information from remote host[ceph1][DEBUG ] detect machine type[ceph1][DEBUG ] write cluster configuration to /etc/ceph/&#123;cluster&#125;.conf 启动一个RGW服务 ： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657先将ceph.conf加一个参数配置[root@ceph1 ceph]# vim ceph.conf [global]fsid = cde3244e-89e0-4630-84d5-bf08c0e33b24mon_initial_members = ceph1mon_host = 192.168.6.101auth_cluster_required = cephxauth_service_required = cephxauth_client_required = cephxosd_pool_default_size = 2[mgr]mgr modules = dashboard[mon]mon allow pool delete = true ####有这个配置，生成的pool才可以被删除[root@ceph1 ceph]# ceph-deploy rgw create ceph1[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf[ceph_deploy.cli][INFO ] Invoked (2.0.1): /usr/bin/ceph-deploy rgw create ceph1[ceph_deploy.cli][INFO ] ceph-deploy options:[ceph_deploy.cli][INFO ] username : None[ceph_deploy.cli][INFO ] verbose : False[ceph_deploy.cli][INFO ] rgw : [(&apos;ceph1&apos;, &apos;rgw.ceph1&apos;)][ceph_deploy.cli][INFO ] overwrite_conf : False[ceph_deploy.cli][INFO ] subcommand : create[ceph_deploy.cli][INFO ] quiet : False[ceph_deploy.cli][INFO ] cd_conf : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fda85404ab8&gt;[ceph_deploy.cli][INFO ] cluster : ceph[ceph_deploy.cli][INFO ] func : &lt;function rgw at 0x7fda85a53050&gt;[ceph_deploy.cli][INFO ] ceph_conf : None[ceph_deploy.cli][INFO ] default_release : False[ceph_deploy.rgw][DEBUG ] Deploying rgw, cluster ceph hosts ceph1:rgw.ceph1[ceph1][DEBUG ] connected to host: ceph1 [ceph1][DEBUG ] detect platform information from remote host[ceph1][DEBUG ] detect machine type[ceph_deploy.rgw][INFO ] Distro info: CentOS Linux 7.6.1810 Core[ceph_deploy.rgw][DEBUG ] remote host will use systemd[ceph_deploy.rgw][DEBUG ] deploying rgw bootstrap to ceph1[ceph1][DEBUG ] write cluster configuration to /etc/ceph/&#123;cluster&#125;.conf[ceph1][DEBUG ] create path recursively if it doesn&apos;t exist[ceph1][INFO ] Running command: ceph --cluster ceph --name client.bootstrap-rgw --keyring /var/lib/ceph/bootstrap-rgw/ceph.keyring auth get-or-create client.rgw.ceph1 osd allow rwx mon allow rw -o /var/lib/ceph/radosgw/ceph-rgw.ceph1/keyring[ceph1][INFO ] Running command: systemctl enable ceph-radosgw@rgw.ceph1[ceph1][INFO ] Running command: systemctl start ceph-radosgw@rgw.ceph1[ceph1][INFO ] Running command: systemctl enable ceph.target[ceph_deploy.rgw][INFO ] The Ceph Object Gateway (RGW) is now running on host ceph1 and default port 7480验证：[root@ceph1 ceph]# systemctl status ceph-radosgw@rgw.ceph1● ceph-radosgw@rgw.ceph1.service - Ceph rados gateway Loaded: loaded (/usr/lib/systemd/system/ceph-radosgw@.service; enabled; vendor preset: disabled) Active: active (running) since Thu 2019-07-11 15:03:24 CST; 9s ago Main PID: 21057 (radosgw) CGroup: /system.slice/system-ceph\x2dradosgw.slice/ceph-radosgw@rgw.ceph1.service └─21057 /usr/bin/radosgw -f --cluster ceph --name client.rgw.ceph1 --setuser ceph --setgroup cephJul 11 15:03:24 ceph1 systemd[1]: Started Ceph rados gateway. 12345678910111213141516[root@ceph1 ceph]# ceph -s cluster: id: cde3244e-89e0-4630-84d5-bf08c0e33b24 health: HEALTH_OK services: mon: 1 daemons, quorum ceph1 mgr: ceph1(active) osd: 2 osds: 2 up, 2 in rgw: 1 daemon active data: pools: 4 pools, 32 pgs objects: 187 objects, 1.09KiB usage: 2.01GiB used, 30.0GiB / 32.0GiB avail pgs: 32 active+clean 这时看下danshboard图： 使用亚马逊 s3 客户端进行访问用户创建用户 ： 1234567891011121314151617181920212223242526272829303132333435363738[root@ceph1 ceph]# radosgw-admin user create --uid=&quot;radosgw&quot; --display-name=&quot;First User&quot;&#123; &quot;user_id&quot;: &quot;radosgw&quot;, &quot;display_name&quot;: &quot;First User&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; &#125; ], &quot;swift_keys&quot;: [], &quot;caps&quot;: [], &quot;op_mask&quot;: &quot;read, write, delete&quot;, &quot;default_placement&quot;: &quot;&quot;, &quot;placement_tags&quot;: [], &quot;bucket_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;user_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;temp_url_keys&quot;: [], &quot;type&quot;: &quot;rgw&quot;&#125; 这个是后续需要的账户信息 123&quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; 授权用户，允许 radosgw 读写 users 信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@ceph1 ceph]# radosgw-admin caps add --uid=radosgw --caps=&quot;users=*&quot;&#123; &quot;user_id&quot;: &quot;radosgw&quot;, &quot;display_name&quot;: &quot;First User&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; &#125; ], &quot;swift_keys&quot;: [], &quot;caps&quot;: [ &#123; &quot;type&quot;: &quot;users&quot;, &quot;perm&quot;: &quot;*&quot; &#125; ], &quot;op_mask&quot;: &quot;read, write, delete&quot;, &quot;default_placement&quot;: &quot;&quot;, &quot;placement_tags&quot;: [], &quot;bucket_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;user_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;temp_url_keys&quot;: [], &quot;type&quot;: &quot;rgw&quot;&#125; 允许 radosgw 读写所有的usage信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[root@ceph1 ceph]# radosgw-admin caps add --uid=radosgw --caps=&quot;usage=read,write&quot;&#123; &quot;user_id&quot;: &quot;radosgw&quot;, &quot;display_name&quot;: &quot;First User&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; &#125; ], &quot;swift_keys&quot;: [], &quot;caps&quot;: [ &#123; &quot;type&quot;: &quot;usage&quot;, &quot;perm&quot;: &quot;*&quot; &#125;, &#123; &quot;type&quot;: &quot;users&quot;, &quot;perm&quot;: &quot;*&quot; &#125; ], &quot;op_mask&quot;: &quot;read, write, delete&quot;, &quot;default_placement&quot;: &quot;&quot;, &quot;placement_tags&quot;: [], &quot;bucket_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;user_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;temp_url_keys&quot;: [], &quot;type&quot;: &quot;rgw&quot;&#125; 创建子用户，做为后面 swift 客户端访问时使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@ceph1 ceph]# radosgw-admin subuser create --uid=radosgw --subuser=radosgw:swift --access=full&#123; &quot;user_id&quot;: &quot;radosgw&quot;, &quot;display_name&quot;: &quot;First User&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [ &#123; &quot;id&quot;: &quot;radosgw:swift&quot;, &quot;permissions&quot;: &quot;full-control&quot; &#125; ], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; &#125; ], &quot;swift_keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw:swift&quot;, &quot;secret_key&quot;: &quot;A3GDj2yjkGJahkCM6YJS4QKQlGz2zd65GXvCkiwV&quot; &#125; ], &quot;caps&quot;: [ &#123; &quot;type&quot;: &quot;usage&quot;, &quot;perm&quot;: &quot;*&quot; &#125;, &#123; &quot;type&quot;: &quot;users&quot;, &quot;perm&quot;: &quot;*&quot; &#125; ], &quot;op_mask&quot;: &quot;read, write, delete&quot;, &quot;default_placement&quot;: &quot;&quot;, &quot;placement_tags&quot;: [], &quot;bucket_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;user_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;temp_url_keys&quot;: [], &quot;type&quot;: &quot;rgw&quot;&#125; 创建密钥 ： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@ceph1 ceph]# radosgw-admin key create --subuser=radosgw:swift --key-type=swift --gen-secret&#123; &quot;user_id&quot;: &quot;radosgw&quot;, &quot;display_name&quot;: &quot;First User&quot;, &quot;email&quot;: &quot;&quot;, &quot;suspended&quot;: 0, &quot;max_buckets&quot;: 1000, &quot;auid&quot;: 0, &quot;subusers&quot;: [ &#123; &quot;id&quot;: &quot;radosgw:swift&quot;, &quot;permissions&quot;: &quot;full-control&quot; &#125; ], &quot;keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw&quot;, &quot;access_key&quot;: &quot;CQE7E6ZDVA74KVJ0077A&quot;, &quot;secret_key&quot;: &quot;wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8&quot; &#125; ], &quot;swift_keys&quot;: [ &#123; &quot;user&quot;: &quot;radosgw:swift&quot;, &quot;secret_key&quot;: &quot;CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh&quot; &#125; ], &quot;caps&quot;: [ &#123; &quot;type&quot;: &quot;usage&quot;, &quot;perm&quot;: &quot;*&quot; &#125;, &#123; &quot;type&quot;: &quot;users&quot;, &quot;perm&quot;: &quot;*&quot; &#125; ], &quot;op_mask&quot;: &quot;read, write, delete&quot;, &quot;default_placement&quot;: &quot;&quot;, &quot;placement_tags&quot;: [], &quot;bucket_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;user_quota&quot;: &#123; &quot;enabled&quot;: false, &quot;check_on_raw&quot;: false, &quot;max_size&quot;: -1, &quot;max_size_kb&quot;: 0, &quot;max_objects&quot;: -1 &#125;, &quot;temp_url_keys&quot;: [], &quot;type&quot;: &quot;rgw&quot;&#125; 安装 s3 客户端软件1[root@ceph1 ceph]# yum -y install s3cmd.noarch 对 s3 进行配置1[root@ceph1 ceph]# s3cmd --configure 123456789101112131415161718192021New settings: Access Key: CQE7E6ZDVA74KVJ0077A Secret Key: wnRy76RM2s85ozWvKwTBezrBU0RwcCTQJf1HFAM8 Default Region: US S3 Endpoint: 192.168.6.101:7480 DNS-style bucket+hostname:port template for accessing a bucket: %(bucket)s.192.168.6.101:7480 bucket Encryption password: 123456 Path to GPG program: /usr/bin/gpg Use HTTPS protocol: False HTTP Proxy server name: HTTP Proxy server port: 0Test access with supplied credentials? [Y/n] yPlease wait, attempting to list all buckets...Success. Your access key and secret key worked fine :-)Now verifying that encryption works...Success. Encryption and decryption worked fine :-)Save settings? [y/N] yConfiguration saved to &apos;/root/.s3cfg&apos; 格式是这样： 12345678Default Region [US]: #这里一定不要修改，否则后面会报错S3 Endpoint [s3.amazonaws.com]: 192.168.6.101:7480DNS-style bucket+hostname:port template for accessing a bucket [%(bucket)s.s3.amazonaws.com]: %(bucket)s.192.168.20.148:7480 bucket #相当于百度网盘的创建文件夹，这里是固定格式Path to GPG program [/usr/bin/gpg]: #保持默认Use HTTPS protocol [Yes]: no #这里写 no ，因为没有提供 https 端口HTTP Proxy server name: #这里不用写，因为没有代理Test access with supplied credentials? [Y/n] ySave settings? [y/N] y 由于我没把端口改成80，所以需要带端口访问的，后续可以nginx代理 创建存储数据的 bucket1234567[root@ceph1 ~]# s3cmd mb s3://cephdir[root@ceph1 ~]# s3cmd put /etc/hosts s3://ceph_dirupload: &apos;/etc/hosts&apos; -&gt; &apos;s3://ceph_dir/hosts&apos; [1 of 1] 200 of 200 100% in 1s 133.14 B/s done [root@ceph1 ~]# s3cmd ls s3://ceph_dir2019-07-11 08:41 200 s3://ceph_dir/hosts s3 的测试脚本： 1234567891011121314151617[root@ceph-f ~]# yum -y install python-boto[root@ceph-f ~]# vim s3test.pyimport boto.s3.connectionaccess_key = &apos;N6ALEK0KS0ISYCIM5JBG&apos;secret_key = &apos;qK9hrpX2uwna4elPP1VsuErmAHBw3So40fE2K4yM&apos;conn = boto.connect_s3( aws_access_key_id=access_key, aws_secret_access_key=secret_key, host=&apos;ceph1&apos;, port=7480, is_secure=False, calling_format=boto.s3.connection.OrdinaryCallingFormat(), )bucket = conn.create_bucket(&apos;xxx_yyy&apos;)for bucket in conn.get_all_buckets(): print &quot;&#123;name&#125; &#123;created&#125;&quot;.format( name=bucket.name, created=bucket.creation_date, ) 在使用时，请替换自己的 access_key、secret_key、主机名和端口 swift 接口测试1234yum install python-setuptoolseasy_install pippip install --upgrade setuptoolspip install --upgrade python-swiftclient 命令行访问 ： 1234567891011121314[root@ceph1 ~]# swift -A http://192.168.6.101:7480/auth/v1.0 -U radosgw:swift -K CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh listceph_dirswift -A http://192.168.6.101:7480/auth/v1.0 -U radosgw:swift -K CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh post sy-ytswift -A http://192.168.6.101:7480/auth/v1.0 -U radosgw:swift -K CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh post sy_yt[root@ceph1 ~]# swift -A http://192.168.6.101:7480/auth/v1.0 -U radosgw:swift -K CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh listceph_dirsy-ytsy_yt 这里提供 swift 的测试脚本： 123456789101112[root@ceph-f ~]# vim swift.pyimport swiftclientuser = &apos;radosgw:swift&apos;key = &apos;CZ2F5lqOfdmTCLSPyzqcw5pPNeetruAL4HjHkiAh&apos;conn = swiftclient.Connection( user=user, key=key, authurl=&apos;http://192.168.6.101:7480/auth/v1.0&apos;, )for container in conn.get_account()[1]: print container[&apos;name&apos;] 在使用时，请替换自己的 access_key、secret_key、authurl]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceph简单搭建]]></title>
    <url>%2Fposts%2Fldfl554c.html</url>
    <content type="text"><![CDATA[ceph介绍Ceph基础介绍​ Ceph是一个可靠地、自动重均衡、自动恢复的分布式存储系统，根据场景划分可以将Ceph分为三大块，分别是对象存储、块设备存储和文件系统服务。在虚拟化领域里，比较常用到的是Ceph的块设备存储，比如在OpenStack项目里，Ceph的块设备存储可以对接OpenStack的cinder后端存储、Glance的镜像存储和虚拟机的数据存储，比较直观的是Ceph集群可以提供一个raw格式的块存储来作为虚拟机实例的硬盘。 ​ Ceph相比其它存储的优势点在于它不单单是存储，同时还充分利用了存储节点上的计算能力，在存储每一个数据时，都会通过计算得出该数据存储的位置，尽量将数据分布均衡，同时由于Ceph的良好设计，采用了CRUSH算法、HASH环等方法，使得它不存在传统的单点故障的问题，且随着规模的扩大性能并不会受到影响。 Ceph的核心组件​ Ceph的核心组件包括Ceph OSD、Ceph Monitor和Ceph MDS。 Ceph OSD：OSD的英文全称是Object Storage Device，它的主要功能是存储数据、复制数据、平衡数据、恢复数据等，与其它OSD间进行心跳检查等，并将一些变化情况上报给Ceph Monitor。一般情况下一块硬盘对应一个OSD，由OSD来对硬盘存储进行管理，当然一个分区也可以成为一个OSD。 Ceph OSD的架构实现由物理磁盘驱动器、Linux文件系统和Ceph OSD服务组成，对于Ceph OSD Deamon而言，Linux文件系统显性的支持了其拓展性，一般Linux文件系统有好几种，比如有BTRFS、XFS、Ext4等，BTRFS虽然有很多优点特性，但现在还没达到生产环境所需的稳定性，一般比较推荐使用XFS。 伴随OSD的还有一个概念叫做Journal盘，一般写数据到Ceph集群时，都是先将数据写入到Journal盘中，然后每隔一段时间比如5秒再将Journal盘中的数据刷新到文件系统中。一般为了使读写时延更小，Journal盘都是采用SSD，一般分配10G以上，当然分配多点那是更好，Ceph中引入Journal盘的概念是因为Journal允许Ceph OSD功能很快做小的写操作；一个随机写入首先写入在上一个连续类型的journal，然后刷新到文件系统，这给了文件系统足够的时间来合并写入磁盘，一般情况下使用SSD作为OSD的journal可以有效缓冲突发负载。 Ceph Monitor：由该英文名字我们可以知道它是一个监视器，负责监视Ceph集群，维护Ceph集群的健康状态，同时维护着Ceph集群中的各种Map图，比如OSD Map、Monitor Map、PG Map和CRUSH Map，这些Map统称为Cluster Map，Cluster Map是RADOS的关键数据结构，管理集群中的所有成员、关系、属性等信息以及数据的分发，比如当用户需要存储数据到Ceph集群时，OSD需要先通过Monitor获取最新的Map图，然后根据Map图和object id等计算出数据最终存储的位置。 Ceph MDS：全称是Ceph MetaData Server，主要保存的文件系统服务的元数据，但对象存储和块存储设备是不需要使用该服务的。 查看各种Map的信息可以通过如下命令：ceph osd(mon、pg) dump ceph-deploy安装ceph基本环境 192.168.6.101 ceph1 192.168.6.102 ceph2 俩台机器都挂俩块盘，一块系统盘，一块osd 配hosts： 123[root@ceph1 ~]# vim /etc/hosts192.168.6.101 ceph1192.168.6.102 ceph2 时间同步： 1ntpdate ntp1.aliyun.com 允许无密码SSH登录： 1234在ceph1上执行ssh-keygenssh-copy-id ceph1ssh-copy-id ceph2 配置主机名： 12hostnamectl set-hostname ceph1hostnamectl set-hostname ceph2 配置ceph.repo123456789101112131415161718192021222324252627[root@ceph1 ~]# vim /etc/yum.repos.d/ceph.repo[ceph]name=Ceph packages for $basearchbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/$basearchenabled=1gpgcheck=1priority=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc[ceph-noarch]name=Ceph noarch packagesbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/noarchenabled=1gpgcheck=1priority=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc[ceph-source]name=Ceph source packagesbaseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/SRPMSenabled=0gpgcheck=1type=rpm-mdgpgkey=https://mirrors.aliyun.com/ceph/keys/release.ascpriority=1 安装ceph-deploy： 1234yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmyum makecacheyum update -yyum install -y ceph-deploy 创建一个 Ceph 存储集群，它有一个 Monitor 和两个 OSD 守护进程12345678910111213mkdir /etc/ceph &amp;&amp; cd /etc/cephceph-deploy new ceph1 ###配置一般会遇到个报错：Traceback (most recent call last): File &quot;/usr/bin/ceph-deploy&quot;, line 18, in &lt;module&gt; from ceph_deploy.cli import main File &quot;/usr/lib/python2.7/site-packages/ceph_deploy/cli.py&quot;, line 1, in &lt;module&gt; import pkg_resourcesImportError: No module named pkg_resources解决：yum install -y python-setuptools 在ceph.conf中追加以下内容 123# 存储集群副本个数osd_pool_default_size = 2 管理节点和osd节点都需要安装ceph 集群： 1ceph-deploy install ceph1 ceph2 配置MON初始化: 1ceph-deploy mon create-initial 查看ceph集群状态： 123456789101112131415[root@ceph1 ceph]# ceph -s cluster: id: cde3244e-89e0-4630-84d5-bf08c0e33b24 health: HEALTH_OK services: mon: 1 daemons, quorum ceph1 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 0B used, 0B / 0B avail pgs: 开启监控模块1ceph-deploy mgr create ceph1 在/etc/ceph/ceph.conf中添加 12[mgr]mgr modules = dashboard 查看集群支持的模块 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172[root@ceph1 ceph]# ceph mgr dump [root@ceph1 ceph]# ceph mgr module enable dashboard #启用dashboard模块[root@ceph1 ceph]# ceph mgr dump&#123; &quot;epoch&quot;: 3, &quot;active_gid&quot;: 4110, &quot;active_name&quot;: &quot;ceph1&quot;, &quot;active_addr&quot;: &quot;192.168.6.101:6800/6619&quot;, &quot;available&quot;: true, &quot;standbys&quot;: [], &quot;modules&quot;: [ &quot;balancer&quot;, &quot;restful&quot;, &quot;status&quot; ], &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ], &quot;services&quot;: &#123;&#125;&#125;[root@ceph1 ceph]# ceph mgr module enable dashboard[root@ceph1 ceph]# ceph mgr dump&#123; &quot;epoch&quot;: 6, &quot;active_gid&quot;: 4114, &quot;active_name&quot;: &quot;ceph1&quot;, &quot;active_addr&quot;: &quot;192.168.6.101:6800/6619&quot;, &quot;available&quot;: true, &quot;standbys&quot;: [], &quot;modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;restful&quot;, &quot;status&quot; ], &quot;available_modules&quot;: [ &quot;balancer&quot;, &quot;dashboard&quot;, &quot;influx&quot;, &quot;localpool&quot;, &quot;prometheus&quot;, &quot;restful&quot;, &quot;selftest&quot;, &quot;status&quot;, &quot;zabbix&quot; ], &quot;services&quot;: &#123;&#125;&#125;[root@ceph1 ceph]# ceph -s cluster: id: cde3244e-89e0-4630-84d5-bf08c0e33b24 health: HEALTH_OK services: mon: 1 daemons, quorum ceph1 mgr: ceph1(active) osd: 2 osds: 2 up, 2 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 2.00GiB used, 30.0GiB / 32.0GiB avail pgs: 设置dashboard的ip和端口 1234[root@ceph-node1 ceph]# ceph config-key put mgr/dashboard/server_addr 192.168.6.101set mgr/dashboard/server_addr[root@ceph-node1 ceph]# ceph config-key put mgr/dashboard/server_port 7000set mgr/dashboard/server_port 12[root@ceph1 ~]# netstat -tulnp |grep 7000tcp 0 0 192.168.6.101:7000 0.0.0.0:* LISTEN 19836/ceph-mgr 创建osd删除磁盘数据 12[root@ceph1 ceph]# ceph-deploy disk zap ceph1 /dev/sdb[root@ceph1 ceph]# ceph-deploy disk zap ceph2 /dev/sdb 创建osd(一共俩个) 12[root@ceph1 ceph]# ceph-deploy osd create ceph1 --data /dev/sdb[root@ceph1 ceph]# ceph-deploy osd create ceph2 --data /dev/sdb ceph秘钥拷贝（主节点执行）及修改密钥权限 用 ceph-deploy 把配置文件和 admin 密钥拷贝到管理节点和 Ceph 节点，这样你每次执行 Ceph 命令行时就无需指定 monitor 地址和 ceph.client.admin.keyring 了 1[root@ceph1 ceph]# ceph-deploy admin ceph1 ceph2 修改密钥权限（所有节点上执行） 12[root@ceph1 ceph] # chmod +r /etc/ceph/ceph.client.admin.keyring[root@ceph2] # chmod +r /etc/ceph/ceph.client.admin.keyring 这时看下danshboard图：]]></content>
      <categories>
        <category>ceph</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes Pod无法删除]]></title>
    <url>%2Fposts%2Fdk7569vg.html</url>
    <content type="text"><![CDATA[问题发现在node节点断电 重启后，发现有的pod节点状态不正常，之前的回收策略也都做了，就调研下是什么原因导致的 pod一直处于Terminated: ExitCode 状态 解决直接删除，无法飘移123kubectl delete pod &lt;podname&gt; --namespace=&lt;namspacer&gt; --grace-period=0 --force发现pod无法漂移docker ps -a查看对应docker容器的状态，发现这两个Pod的docker容器处于Dead状态。使用docker rm &lt;container id&gt;，提示Device is Busy，无法删除。 现象是由于systemd服务PrivateTmp=true引起最根本的方法是，当机器加入时，在 docker.service 中加上： 12[Service]MountFlags=slave 关于Systemd的MountFlags1234567MountFlags: 配置Systemd服务的Mount Namespace配置。会影响服务进程上下文中挂载点的信息，即服务是否会继承主机上已有的挂载点，以及如果服务运行时执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为shared、slave和privateshared：服务与主机共用一个Mount Namespace，会继承主机挂载点，服务挂载或卸载设备时会真实地反映到主机上slave：服务使用独立的Mount Namespace，会继承主机挂载点，但服务对挂载点的操作只在自己的Namespace内生效，不会反映到主机上private: 服务使用独立的Mount Namespace，在启动时没有任何挂载点，服务对挂载点的操作也不会反映到主机上]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[tomcat8导致文件权限访问不到]]></title>
    <url>%2Fposts%2Fkfkd454f.html</url>
    <content type="text"><![CDATA[问题之前在tomcat 7下文件上传后访问一直没问题，现在tomcat版本升到8.5，在测试文件http上传时，发现所传文件无法通过nginx访问了：报错 403 forbidden 解决看下系统的umask 12345678910cat /etc/profile后发现if [ $UID -gt 199 ] &amp;&amp; [ &quot;`/usr/bin/id -gn`&quot; = &quot;`/usr/bin/id -un`&quot; ]; then umask 002else umask 022fi022是没问题的 看下tomcat的catlina.sh 123456if [ -z &quot;$UMASK&quot; ]; thenUMASK=&quot;0027&quot;fiumask $UMASKtomcat8改成0027了，把这个改成0022就好了]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm私库]]></title>
    <url>%2Fposts%2Fdla981a0.html</url>
    <content type="text"><![CDATA[安装库123456789101112131415161718192021mkdir helm-reponohup helm serve --address 0.0.0.0:8879 --repo-path /root/sy/helm-repo &amp;cp -r mychart helm-repo/cd helm-repo/helm package mychart --save=false --dependency-updaterm -rf mycharthelm repo index --url=http://192.168.7.101:8879 .helm repo updatehelm repo add local-101 http://192.168.7.101:8879[root@master101 helm-repo]# helm repo listNAME URL local http://127.0.0.1:8879/charts stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/chartslocal-101 http://192.168.7.101:8879[root@master101 helm-repo]# helm search local-101/NAME CHART VERSION APP VERSION DESCRIPTION local-101/mychart 0.1.0 1.0 A Helm chart for Kubernetes 安装Kubeapps123456789101112131415161718192021helm repo add bitnami https://charts.bitnami.com/bitnamihelm install --name kubeapps --namespace kubeapps bitnami/kubeappskubectl create serviceaccount kubeapps-operatorkubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator[root@master101 helm-repo]# kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath=&apos;&#123;.secrets[].name&#125;&apos;) -o jsonpath=&apos;&#123;.data.token&#125;&apos; | base64 --decodeeyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yLXRva2VuLTZzcGQ4Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiODZjYTI0YzAtMjgzYi00YTg1LTkzMTktMTcyZWY3NTlhZGU3Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6a3ViZWFwcHMtb3BlcmF0b3IifQ.OUTbiPwtnJuVdKPAtgSORyox2GYDgwnRunIz37arSCHSSSkHz_BgJgut8Pr8Ava7BQljPlG_w5htGh-KYTahg5uBPpYKZvjBa5QG_VC-czDRX37YKY_xbg0sdgp-4VurgIyn5CBbecBktXem014-2pR97QuI3EmN8JhKCokBaU46LlSpcbFMEOhFgpBklLrZ4ssDYtvYLlnk3dwJ6Fr32-UDUqyRlLdv5rWTkA0BVwF63gvNuykneMoOYuIqPL8p9rGMMAG6M-O9FRwQUbq4sUtaStW54h545_VtXOFlrClZ5l0M-7VPPc7ceOMXlU08tWWjMw4DfZO1bf8ylrpfXgexport POD_NAME=$(kubectl get pods -n kubeapps -l &quot;app=kubeapps,release=kubeapps&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)kubectl port-forward -n kubeapps $POD_NAME --address=192.168.7.101 8080:8080 访问 添加上面建的本地chat]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm模板变量]]></title>
    <url>%2Fposts%2Flsd89ad2.html</url>
    <content type="text"><![CDATA[变量赋值变量 12345678910111213141516171819[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: &#123;&#123;- $releaseName := .Release.Name -&#125;&#125; &#123;&#123;- with .Values.course &#125;&#125; release: &#123;&#123; $releaseName &#125;&#125; k8s: &#123;&#123; .k8s | upper | quote &#125;&#125; python: &#123;&#123; .python | repeat 5 | quote &#125;&#125; &#123;&#123;- if eq .python &quot;django&quot; &#125;&#125; web: true &#123;&#123;- end &#125;&#125; &#123;&#123;- end &#125;&#125; courselist: &#123;&#123;- range $index, $course := .Values.courselist &#125;&#125; - &#123;&#123; $index &#125;&#125;: &#123;&#123; $course | title | quote &#125;&#125; &#123;&#123;- end &#125;&#125; 123with语句上面增加了一句&#123;&#123;- $releaseName := .Release.Name -&#125;&#125;，其中$releaseName就是后面的对象的一个引用变量，它的形式就是$name，赋值操作使用:=，这样with语句块内部的$releaseName变量仍然指向的是.Release.Name变量在range循环使用，我们可以在循环中用变量来同时捕获索引的值 结果： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;42101&apos;[debug] SERVER: &quot;127.0.0.1:42101&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: needled-labradoodleREVISION: 1RELEASED: Fri Aug 23 14:08:08 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangocourselist:- k8s- python- go- java- phpHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: needled-labradoodle-configmapdata: release: needled-labradoodle k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true courselist: - 0: &quot;K8s&quot; - 1: &quot;Python&quot; - 2: &quot;Go&quot; - 3: &quot;Java&quot; - 4: &quot;Php&quot;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm模板控制流程]]></title>
    <url>%2Fposts%2Flad78haa.html</url>
    <content type="text"><![CDATA[控制流程模板函数和管道是通过转换信息并将其插入到YAML文件中的强大方法。但有时候需要添加一些比插入字符串更复杂一些的模板逻辑。这就需要使用到模板语言中提供的控制结构了。 控制流程为我们提供了控制模板生成流程的一种能力，Helm 的模板语言提供了以下几种流程控制： if/else 条件块 with 指定范围 range 循环块 除此之外，它还提供了一些声明和使用命名模板段的操作： define在模板中声明一个新的命名模板 template导入一个命名模板 block声明了一种特殊的可填写的模板区域 关于命名模板的相关知识点，我们会在后面的课程中和大家接触到，这里我们暂时和大家介绍if/else、with、range这3中控制流程的用法。 if/else 条件if/else块是用于在模板中有条件地包含文本块的方法，条件块的基本结构如下： 1234567&#123;&#123; if PIPELINE &#125;&#125; # Do something&#123;&#123; else if OTHER PIPELINE &#125;&#125; # Do something else&#123;&#123; else &#125;&#125; # Default case&#123;&#123; end &#125;&#125; 当然要使用条件块就得判断条件是否为真，如果值为下面的几种情况，则管道的结果为 false： 一个布尔类型的假 一个数字零 一个空的字符串 一个nil（空或null） 一个空的集合（map、slice、tuple、dict、array） 除了上面的这些情况外，其他所有条件都为真。 例子12345678910[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; k8s: &#123;&#123; .Values.course.k8s | upper | quote &#125;&#125; python: &#123;&#123; .Values.course.python | repeat 5 | quote &#125;&#125; &#123;&#123; if eq .Values.course.python &quot;django&quot; &#125;&#125;web: true&#123;&#123; end &#125;&#125; 在底部加了if条件，如果等于django，就加一个web:true。 1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; k8s: &#123;&#123; .Values.course.k8s | upper | quote &#125;&#125; python: &#123;&#123; .Values.course.python | repeat 5 | quote &#125;&#125; &#123;&#123; if eq .Values.course.python &quot;django&quot; &#125;&#125;web: true&#123;&#123; end &#125;&#125;[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;41755&apos;[debug] SERVER: &quot;127.0.0.1:41755&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: quaffing-mastiffREVISION: 1RELEASED: Fri June 20 10:41:54 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: quaffing-mastiff-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true 现在把values.yaml值替换下： 1234[root@master101 sy]# cat mychart/values.yamlcourse: k8s: devops python: aa 123456789101112131415161718192021222324252627282930313233[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;41944&apos;[debug] SERVER: &quot;127.0.0.1:41944&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: zeroed-uakariREVISION: 1RELEASED: Fri June 20 10:47:55 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: aaHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: zeroed-uakari-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;aaaaaaaaaa&quot; 发现，if语句判断出来了 空格例子1先改回django 1234[root@master101 sy]# cat mychart/values.yamlcourse: k8s: devops python: django 加空格，换行 123456789101112[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; k8s: &#123;&#123; .Values.course.k8s | upper | quote &#125;&#125; python: &#123;&#123; .Values.course.python | repeat 5 | quote &#125;&#125; &#123;&#123; if eq .Values.course.python &quot;django&quot; &#125;&#125; web: true &#123;&#123; end &#125;&#125; debug看一下： 1234567891011121314151617181920212223242526272829303132333435[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;46726&apos;[debug] SERVER: &quot;127.0.0.1:46726&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: bumptious-gorillaREVISION: 1RELEASED: Fri June 20 10:54:52 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: bumptious-gorilla-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true 注意：会发现有空格出来 例子21可以通过使用在模板标识&#123;&#123;后面添加破折号和空格&#123;&#123;-来表示将空白左移，而在&#125;&#125;前面添加一个空格和破折号-&#125;&#125;表示应该删除右边的空格，另外需要注意的是换行符也是空格！ 123456789101112[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; k8s: &#123;&#123; .Values.course.k8s | upper | quote &#125;&#125; python: &#123;&#123; .Values.course.python | repeat 5 | quote &#125;&#125; &#123;&#123;- if eq .Values.course.python &quot;django&quot; &#125;&#125; web: true &#123;&#123;- end &#125;&#125; 12345678910111213141516171819202122232425262728293031323334[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;41705&apos;[debug] SERVER: &quot;127.0.0.1:41705&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: goodly-quailREVISION: 1RELEASED: Fri June 20 10:57:39 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: goodly-quail-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true withwith语句就可以来控制变量的作用域范围 123&#123;&#123; with PIPELINE &#125;&#125; # restricted scope&#123;&#123; end &#125;&#125; 例子### 1234567891011121314[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; &#123;&#123;- with .Values.course &#125;&#125; k8s: &#123;&#123; .k8s | upper | quote &#125;&#125; python: &#123;&#123; .python | repeat 5 | quote &#125;&#125; &#123;&#123;- if eq .python &quot;django&quot; &#125;&#125; web: true &#123;&#123;- end &#125;&#125; &#123;&#123;- end &#125;&#125; 12345678910111213141516171819202122232425262728293031323334[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;40660&apos;[debug] SERVER: &quot;127.0.0.1:40660&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: loitering-gibbonREVISION: 1RELEASED: Fri June 20 11:03:56 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: loitering-gibbon-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true 有with的.Values.course ，之后的就不用加了 range循环例子12345678910[root@master101 sy]# cat mychart/values.yamlcourse: k8s: devops python: djangocourselist:- k8s- python- go- java- php 123456789101112131415161718[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; &#123;&#123;- with .Values.course &#125;&#125; k8s: &#123;&#123; .k8s | upper | quote &#125;&#125; python: &#123;&#123; .python | repeat 5 | quote &#125;&#125; &#123;&#123;- if eq .python &quot;django&quot; &#125;&#125; web: true &#123;&#123;- end &#125;&#125; &#123;&#123;- end &#125;&#125; courselist: &#123;&#123;- range .Values.courselist &#125;&#125; - &#123;&#123; . | title | quote &#125;&#125; &#123;&#123;- end &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;40352&apos;[debug] SERVER: &quot;127.0.0.1:40352&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: idle-hummingbirdREVISION: 1RELEASED: Fri June 20 11:11:38 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangocourselist:- k8s- python- go- java- phpHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: idle-hummingbird-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; web: true courselist: - &quot;K8s&quot; - &quot;Python&quot; - &quot;Go&quot; - &quot;Java&quot; - &quot;Php&quot; 我们可以看到courselist按照我们的要求循环出来了。除了 list 或者 tuple，range 还可以用于遍历具有键和值的集合（如map 或 dict）。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm模板几个函数]]></title>
    <url>%2Fposts%2Foaj163a8.html</url>
    <content type="text"><![CDATA[函数quote：是Sprig 模板库提供的一种字符串函数，用途就是用双引号将字符串括起来，如果需要双引号&quot;，则需要添加\来进行转义，而squote函数的用途则是用双引号将字符串括起来，而不会对内容进行转义。 upper：是Sprig 模板库提供的，表示将字符串每一个字母都变成大写 default：该函数允许我们在模板内部指定默认值，以防止该值被忽略掉了。 title ：将字符串首字母变成大写 管道模板语言除了提供了丰富的内置函数之外，其另一个强大的功能就是管道的概念。和UNIX中一样，管道我们通常称为Pipeline，是一个链在一起的一系列模板命令的工具，以紧凑地表达一系列转换。简单来说，管道是可以按顺序完成一系列事情的一种方法 例子123456789[root@master101 sy]# vim mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &#123;&#123; .Values.hello | default &quot;Hello World&quot; | quote &#125;&#125; k8s: &#123;&#123; .Values.course.k8s | upper | quote &#125;&#125; python: &#123;&#123; .Values.course.python | repeat 5 | quote &#125;&#125; 123456789101112131415161718192021222324252627282930313233[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;42317&apos;[debug] SERVER: &quot;127.0.0.1:42317&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: crusty-hydraREVISION: 1RELEASED: Fri June 20 10:02:52 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: crusty-hydra-configmapdata: myvalue: &quot;Hello World&quot; k8s: &quot;DEVOPS&quot; python: &quot;djangodjangodjangodjangodjango&quot; 可以看到，管道是按照顺序的，先执行upper，在执行quote；下面那个是先执行repeat 5次，在执行quote。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm模板内置对象]]></title>
    <url>%2Fposts%2Fdla9812q.html</url>
    <content type="text"><![CDATA[定义Mychart一个 chart 包就是一个文件夹的集合，文件夹名称就是 chart 包的名称，比如创建一个 mychart 的 chart 包： 123456789101112131415161718[root@master101 sy]# helm create mychartCreating mychart[root@master101 sy]# cd mychart/[root@master101 mychart]# tree.├── charts├── Chart.yaml├── templates│ ├── deployment.yaml│ ├── _helpers.tpl│ ├── ingress.yaml│ ├── NOTES.txt│ ├── service.yaml│ └── tests│ └── test-connection.yaml└── values.yaml3 directories, 8 files templates 目录下面的文件: NOTES.txt：chart 的 “帮助文本”。这会在用户运行 helm install 时显示给用户。 deployment.yaml：创建 Kubernetes deployment 的基本 manifest service.yaml：为 deployment 创建 service 的基本 manifest ingress.yaml: 创建 ingress 对象的资源清单文件 _helpers.tpl：放置模板助手的地方，可以在整个 chart 中重复使用 创建简单模板1[root@master101 sy]# rm -rf mychart/templates/* 创建configmap.yaml： 1234567[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &quot;Hello World&quot; 需要注意的是kubernetes资源对象的 labels 和 name 定义被限制在63个字符，所以需要注意名称的定义。 1234567Labels are key/value pairs. Valid label keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/).If the prefix is omitted, the label Key is presumed to be private to the user. Automated system components (e.g. kube-scheduler, kube-controller-manager, kube-apiserver, kubectl, or other third-party automation) which add labels to end-user objects must specify a prefix.The kubernetes.io/ and k8s.io/ prefixes are reserved for Kubernetes core components.Valid label values must be 63 characters or less and must be empty or begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. 调试--dry-run --debug这个可选参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950[root@master101 sy]# helm install --dry-run --debug ./mychart[debug] Created tunnel using local port: &apos;34909&apos;[debug] SERVER: &quot;127.0.0.1:34909&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: broken-minkREVISION: 1RELEASED: Thu June 18 16:59:36 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:affinity: &#123;&#125;fullnameOverride: &quot;&quot;image: pullPolicy: IfNotPresent repository: nginx tag: stableimagePullSecrets: []ingress: annotations: &#123;&#125; enabled: false hosts: - host: chart-example.local paths: [] tls: []nameOverride: &quot;&quot;nodeSelector: &#123;&#125;replicaCount: 1resources: &#123;&#125;service: port: 80 type: ClusterIPtolerations: []HOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: broken-mink-configmapdata: myvalue: &quot;Hello World&quot; 内置对象Release：这个对象描述了 release 本身。它里面有几个对象： Release.Name：release 名称 Release.Time：release 的时间 Release.Namespace：release 的 namespace（如果清单未覆盖） Release.Service：release 服务的名称（始终是 Tiller）。 Release.Revision：此 release 的修订版本号，从1开始累加。 Release.IsUpgrade：如果当前操作是升级或回滚，则将其设置为 true。 Release.IsInstall：如果当前操作是安装，则设置为 true。 Values：从values.yaml文件和用户提供的文件传入模板的值。默认情况下，Values 是空的。 1234567例子：&#123;&#123; .Values.replicaCount &#125;&#125;#引用嵌套对象例子，跟引用json嵌套对象类似&#123;&#123; .Values.image.repository &#125;&#125; Chart：Chart.yaml的内容。chart版本可以从Chart.Version和维护人员 Chart.Maintainers一起获得。 12345678910111213141516171819apiVersion: The chart API version, always &quot;v1&quot; (必须参数)name: The name of the chart (必须参数)version: A SemVer 2 version (必须参数)kubeVersion: A SemVer range of compatible Kubernetes versions (可选参数)description: A single-sentence description of this project (可选参数)keywords: - A list of keywords about this project (可选参数)home: The URL of this project&apos;s home page (可选参数)sources: - A list of URLs to source code for this project (可选参数)maintainers: # (可选参数) - name: The maintainer&apos;s name (required for each maintainer) email: The maintainer&apos;s email (optional for each maintainer) url: A URL for the maintainer (optional for each maintainer)engine: gotpl # The name of the template engine (optional, defaults to gotpl)icon: A URL to an SVG or PNG image to be used as an icon (optional).appVersion: The version of the app that this contains (optional). This needn&apos;t be SemVer.deprecated: Whether this chart is deprecated (optional, boolean)tillerVersion: The version of Tiller that this chart requires. This should be expressed as a SemVer range: &quot;&gt;2.0.0&quot; (optional) Files：这提供对 chart 中所有非特殊文件的访问。虽然无法使用它来访问模板，但可以使用它来访问 chart 中的其他文件。请参阅 “访问文件” 部分。 Files.Get 是一个按名称获取文件的函数（.Files.Get config.ini） Files.GetBytes 是将文件内容作为字节数组而不是字符串获取的函数。这对于像图片这样的东西很有用。 Capabilities：这提供了关于 Kubernetes 集群支持的功能的信息。 Capabilities.APIVersions 是一组版本信息。 Capabilities.APIVersions.Has $version 指示是否在群集上启用版本（batch/v1）。 Capabilities.KubeVersion 提供了查找 Kubernetes 版本的方法。它具有以下值：Major，Minor，GitVersion，GitCommit，GitTreeState，BuildDate，GoVersion，Compiler，和 Platform。 Capabilities.TillerVersion 提供了查找 Tiller 版本的方法。它具有以下值：SemVer，GitCommit，和 GitTreeState。 Template：包含有关正在执行的当前模板的信息 Name：到当前模板的文件路径（例如 mychart/templates/mytemplate.yaml） BasePath：当前 chart 模板目录的路径（例如 mychart/templates）。 values文件123456789values对象的值四种来源：chart包values.yaml文件如果包含子chart包，父chart包中的value.yaml中定义的值，将覆盖子chart包。可以使用-f参数传递值到chart包的values.yaml中。如：(helm install -f myvals.yaml ./mychart)使用命令行传入指定的值，如：（helm install --set foo=bar ./mychart）： chart 的 values.yaml 提供的值可以被用户提供的 values 文件覆盖，而该文件同样可以被--set提供的参数所覆盖。 12[root@master101 mychart]# cat values.yamlcourse: k8s 在上面的 templates/configmap.yaml 模板文件中就可以使用这个值了：(configmap.yaml) 1234567apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &quot;Hello World&quot; course: &#123;&#123; .Values.course &#125;&#125; debug看下： 123456789101112131415161718192021222324252627282930[root@master101 sy]# helm install --dry-run --debug ./mychart[debug] Created tunnel using local port: &apos;43779&apos;[debug] SERVER: &quot;127.0.0.1:43779&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: bold-hyenaREVISION: 1RELEASED: Thu June 18 17:37:29 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8sHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: bold-hyena-configmapdata: myvalue: &quot;Hello World&quot; course: k8s 通过--set参数来轻松的覆盖 course 的值： 123456789101112131415161718192021222324252627282930[root@master101 sy]# helm install --dry-run --debug --set course=python ./mychart[debug] Created tunnel using local port: &apos;36665&apos;[debug] SERVER: &quot;127.0.0.1:36665&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: ungaged-butterflyREVISION: 1RELEASED: Thu Aug 22 17:38:17 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:course: pythonCOMPUTED VALUES:course: pythonHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: ungaged-butterfly-configmapdata: myvalue: &quot;Hello World&quot; course: python 由于--set 比默认 values.yaml 文件具有更高的优先级，所以我们的模板生成为 course: python。 value多结构化内容1234[root@master101 sy]# cat mychart/values.yamlcourse: k8s: devops python: django 123456789[root@master101 sy]# cat mychart/templates/configmap.yaml apiVersion: v1kind: ConfigMapmetadata: name: &#123;&#123; .Release.Name &#125;&#125;-configmapdata: myvalue: &quot;Hello World&quot; k8s: &#123;&#123; .Values.course.k8s &#125;&#125; python: &#123;&#123; .Values.course.python &#125;&#125; 123456789101112131415161718192021222324252627282930313233[root@master101 sy]# helm install --dry-run --debug mychart/[debug] Created tunnel using local port: &apos;46611&apos;[debug] SERVER: &quot;127.0.0.1:46611&quot;[debug] Original chart version: &quot;&quot;[debug] CHART PATH: /root/sy/mychartNAME: eyewitness-minkREVISION: 1RELEASED: Fri June 16 18:27:01 2019CHART: mychart-0.1.0USER-SUPPLIED VALUES:&#123;&#125;COMPUTED VALUES:course: k8s: devops python: djangoHOOKS:MANIFEST:---# Source: mychart/templates/configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: eyewitness-mink-configmapdata: myvalue: &quot;Hello World&quot; k8s: devops python: django]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm基本使用]]></title>
    <url>%2Fposts%2Fmdk98hdq.html</url>
    <content type="text"><![CDATA[仓库Helm 的 Repo 仓库和 Docker Registry 比较类似，Chart 库可以用来存储和共享打包 Chart 的位置，我们在安装了 Helm 后，默认的仓库地址是 google 的一个地址，这对于我们不能科学上网的同学就比较苦恼了，没办法访问到官方提供的 Chart 仓库，可以用helm repo list来查看当前的仓库配置： 1234helm repo listNAME URLstable https://kubernetes-charts.storage.googleapis.com/local http://127.0.0.1:8879/charts 替换阿里的仓库： 123456789101112131415161718192021[root@master101 sy]# helm repo remove stable&quot;stable&quot; has been removed from your repositories[root@master101 sy]# helm repo list NAME URL local http://127.0.0.1:8879/charts[root@master101 sy]# helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts&quot;stable&quot; has been added to your repositories[root@master101 sy]# helm repo update Hang tight while we grab the latest from your chart repositories......Skip local chart repository...Successfully got an update from the &quot;stable&quot; chart repositoryUpdate Complete.[root@master101 sy]# helm repo listNAME URL local http://127.0.0.1:8879/charts stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts 仓库添加完成后，可以使用 update 命令进行仓库更新。当然如果要我们自己来创建一个 web 服务器来服务 Helm Chart 的话，只需要实现下面几个功能点就可以提供服务了： 将索引和Chart置于服务器目录中 确保索引文件index.yaml可以在没有认证要求的情况下访问 确保 yaml 文件的正确内容类型（text/yaml 或 text/x-yaml） 查找 chartHelm 将 Charts 包安装到 Kubernetes 集群中，一个安装实例就是一个新的 Release，要找到新的 Chart，我们可以通过搜索命令完成。 直接运行helm search命令可以查看有哪些 Charts 是可用的： 12345678910111213[root@master101 sy]# helm searchNAME CHART VERSION APP VERSION DESCRIPTION stable/acs-engine-autoscaler 2.1.3 2.1.1 Scales worker nodes within agent pools stable/aerospike 0.1.7 v3.14.1.2 A Helm chart for Aerospike in Kubernetes stable/anchore-engine 0.1.3 0.1.6 Anchore container analysis and policy evaluation engine s...stable/artifactory 7.0.3 5.8.4 Universal Repository Manager supporting all major packagi...stable/artifactory-ha 0.1.0 5.8.4 Universal Repository Manager supporting all major packagi...stable/aws-cluster-autoscaler 0.3.2 Scales worker nodes within autoscaling groups. stable/bitcoind 0.1.0 0.15.1 Bitcoin is an innovative payment network and a new kind o...stable/buildkite 0.2.1 3 Agent for Buildkite stable/centrifugo 2.0.0 1.7.3 Centrifugo is a real-time messaging server. stable/cert-manager 0.2.2 0.2.3 A Helm chart for cert-manager stable/chaoskube 0.6.2 0.6.1 Chaoskube periodically kills random pods in your Kubernet... 搜索mysql： 1234567[root@master101 sy]# helm search mysqlNAME CHART VERSION APP VERSION DESCRIPTION stable/mysql 0.3.5 Fast, reliable, scalable, and easy to use open-source rel...stable/percona 0.3.0 free, fully compatible, enhanced, open source drop-in rep...stable/percona-xtradb-cluster 0.0.2 5.7.19 free, fully compatible, enhanced, open source drop-in rep...stable/gcloud-sqlproxy 0.2.3 Google Cloud SQL Proxy stable/mariadb 2.1.6 10.1.31 Fast, reliable, scalable, and easy to use open-source rel... inspect 命令来查看一个 chart 的详细信息： 12345678910111213141516171819202122232425262728293031323334353637383940414243[root@master101 sy]# helm inspect stable/mysqldescription: Fast, reliable, scalable, and easy to use open-source relational database system.engine: gotplhome: https://www.mysql.com/icon: https://www.mysql.com/common/logos/logo-mysql-170x115.pngkeywords:- mysql- database- sqlmaintainers:- email: viglesias@google.com name: Vic Iglesiasname: mysqlsources:- https://github.com/kubernetes/charts- https://github.com/docker-library/mysqlversion: 0.3.5---## mysql image version## ref: https://hub.docker.com/r/library/mysql/tags/##image: &quot;mysql&quot;imageTag: &quot;5.7.14&quot;## Specify password for root user#### Default: random 10 character string# mysqlRootPassword: testing## Create a database user### mysqlUser:# mysqlPassword:## Allow unauthenticated access, uncomment to enable### mysqlAllowEmptyPassword: true## Create a database### mysqlDatabase: 安装 chart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061helm install stable/mysqlNAME: mewing-squidLAST DEPLOYED: Tue Sep 4 23:31:23 2018NAMESPACE: defaultSTATUS: DEPLOYEDRESOURCES:==&gt; v1/PersistentVolumeClaimNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEmewing-squid-mysql Pending 1s==&gt; v1/ServiceNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEmewing-squid-mysql ClusterIP 10.108.197.48 &lt;none&gt; 3306/TCP 1s==&gt; v1beta1/DeploymentNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEmewing-squid-mysql 1 0 0 0 1s==&gt; v1/Pod(related)NAME READY STATUS RESTARTS AGEmewing-squid-mysql-69f587bdf9-z7glv 0/1 Pending 0 0s==&gt; v1/SecretNAME TYPE DATA AGEmewing-squid-mysql Opaque 2 1s==&gt; v1/ConfigMapNAME DATA AGEmewing-squid-mysql-test 1 1sNOTES:MySQL can be accessed via port 3306 on the following DNS name from within your cluster:mewing-squid-mysql.default.svc.cluster.localTo get your root password run: MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mewing-squid-mysql -o jsonpath=&quot;&#123;.data.mysql-root-password&#125;&quot; | base64 --decode; echo)To connect to your database:1. Run an Ubuntu pod that you can use as a client: kubectl run -i --tty ubuntu --image=ubuntu:16.04 --restart=Never -- bash -il2. Install the mysql client: $ apt-get update &amp;&amp; apt-get install mysql-client -y3. Connect using the mysql cli, then provide your password: $ mysql -h mewing-squid-mysql -pTo connect to your database directly from outside the K8s cluster: MYSQL_HOST=127.0.0.1 MYSQL_PORT=3306 # Execute the following command to route the connection: kubectl port-forward svc/mewing-squid-mysql 3306 mysql -h $&#123;MYSQL_HOST&#125; -P$&#123;MYSQL_PORT&#125; -u root -p$&#123;MYSQL_ROOT_PASSWORD&#125; --name参数指定 名字： 1helm install stable/mysql --name mydb 自定义 chart要查看 chart 上可配置的选项，使用helm inspect values命令即可，比如我们这里查看上面的 mysql 的配置选项： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182[root@master101 sy]# helm inspect values stable/mysql## mysql image version## ref: https://hub.docker.com/r/library/mysql/tags/##image: &quot;mysql&quot;imageTag: &quot;5.7.14&quot;## Specify password for root user#### Default: random 10 character string# mysqlRootPassword: testing## Create a database user### mysqlUser:# mysqlPassword:## Allow unauthenticated access, uncomment to enable### mysqlAllowEmptyPassword: true## Create a database### mysqlDatabase:## Specify an imagePullPolicy (Required)## It&apos;s recommended to change this to &apos;Always&apos; if the image tag is &apos;latest&apos;## ref: http://kubernetes.io/docs/user-guide/images/#updating-images##imagePullPolicy: IfNotPresentlivenessProbe: initialDelaySeconds: 30 periodSeconds: 10 timeoutSeconds: 5 successThreshold: 1 failureThreshold: 3readinessProbe: initialDelaySeconds: 5 periodSeconds: 10 timeoutSeconds: 1 successThreshold: 1 failureThreshold: 3## Persist data to a persistent volumepersistence: enabled: true ## database data Persistent Volume Storage Class ## If defined, storageClassName: &lt;storageClass&gt; ## If set to &quot;-&quot;, storageClassName: &quot;&quot;, which disables dynamic provisioning ## If undefined (the default) or set to null, no storageClassName spec is ## set, choosing the default provisioner. (gp2 on AWS, standard on ## GKE, AWS &amp; OpenStack) ## # storageClass: &quot;-&quot; accessMode: ReadWriteOnce size: 8Gi## Configure resource requests and limits## ref: http://kubernetes.io/docs/user-guide/compute-resources/##resources: requests: memory: 256Mi cpu: 100m# Custom mysql configuration files used to override default mysql settingsconfigurationFiles:# mysql.cnf: |-# [mysqld]# skip-name-resolve## Configure the service## ref: http://kubernetes.io/docs/user-guide/services/service: ## Specify a service type ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types type: ClusterIP port: 3306 # nodePort: 32000 我们可以直接在 YAML 格式的文件中来覆盖上面的任何配置，在安装的时候直接使用该配置文件即可：(config.yaml)1234mysqlUser: syUsermysqlDatabase: syDBservice: type: NodePort 指定该 yaml 文件12345678910111213141516171819202122232425262728293031helm install -f config.yaml stable/mysql --name mydbNAME: mydbLAST DEPLOYED: Wed Sep 5 00:09:44 2018NAMESPACE: defaultSTATUS: DEPLOYEDRESOURCES:==&gt; v1/SecretNAME TYPE DATA AGEmydb-mysql Opaque 2 1s==&gt; v1/ConfigMapNAME DATA AGEmydb-mysql-test 1 1s==&gt; v1/PersistentVolumeClaimNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEmydb-mysql Pending 1s==&gt; v1/ServiceNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEmydb-mysql NodePort 10.96.150.198 &lt;none&gt; 3306:32604/TCP 0s==&gt; v1beta1/DeploymentNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGEmydb-mysql 1 1 1 0 0s==&gt; v1/Pod(related)NAME READY STATUS RESTARTS AGEmydb-mysql-dfc999888-hbw5d 0/1 Pending 0 0s... pod状况123kubectl get podsNAME READY STATUS RESTARTS AGEmydb-mysql-dfc999888-hbw5d 0/1 Pending 0 44m 看到是pending状态，describe查下： 1234Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 2m (x37 over 12m) default-scheduler pod has unbound PersistentVolumeClaims (repeated 2 times) 可以通过 storageclass 或者手动创建一个合适的 PV 对象来解决这个问题。 也可以更新helm，来直接禁用掉数据持久化，可以在上面的 config.yaml 文件中设置： 12persistence: enabled: false 另外一种方法就是在安装过程中使用--set来覆盖对应的 value 值，比如禁用数据持久化，我们这里可以这样来覆盖： 1helm install stable/mysql --set persistence.enabled=false --name mydb 升级将数据持久化禁用掉来对上面的 mydb 进行升级： 123456789101112131415161718[root@master101 sy]# echo config.yamlmysqlUser: haimaxyUsermysqlDatabase: haimaxyDBservice: type: NodePortpersistence: enabled: false[root@master101 sy]# helm upgrade -f config.yaml mydb stable/mysqlhelm upgrade -f config.yaml mydb stable/mysqlRelease &quot;mydb&quot; has been upgraded. Happy Helming!LAST DEPLOYED: Wed Sep 5 00:38:33 2018NAMESPACE: defaultSTATUS: DEPLOYEDRESOURCES:... 可以使用 helm history 命令查看 release 的历史版本： 1234helm history mydbREVISION UPDATED STATUS CHART DESCRIPTION1 Wed June 17 00:09:44 2018 SUPERSEDED mysql-0.10.1 Install complete2 Wed June 17 00:38:33 2018 DEPLOYED mysql-0.10.1 Upgrade complete]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kubelet状态更新机制]]></title>
    <url>%2Fposts%2Fdfkdaa65.html</url>
    <content type="text"><![CDATA[摘要当 Kubernetes 中 Node 节点出现状态异常的情况下，节点上的 Pod 会被重新调度到其他节点上去，但是有的时候我们会发现节点 Down 掉以后，Pod 并不会立即触发重新调度，这实际上就是和 Kubelet 的状态更新机制密切相关的，Kubernetes 提供了一些参数配置来触发重新调度到嗯时间，下面我们来分析下 Kubelet 状态更新的基本流程。 kubelet 自身会定期更新状态到 apiserver，通过参数--node-status-update-frequency指定上报频率，默认是 10s 上报一次。 kube-controller-manager 会每隔--node-monitor-period时间去检查 kubelet 的状态，默认是 5s。 当 node 失联一段时间后，kubernetes 判定 node 为 notready 状态，这段时长通过--node-monitor-grace-period参数配置，默认 40s。 当 node 失联一段时间后，kubernetes 判定 node 为 unhealthy 状态，这段时长通过--node-startup-grace-period参数配置，默认 1m0s。 当 node 失联一段时间后，kubernetes 开始删除原 node 上的 pod，这段时长是通过--pod-eviction-timeout参数配置，默认 5m0s。 kube-controller-manager 和 kubelet 是异步工作的，这意味着延迟可能包括任何的网络延迟、apiserver 的延迟、etcd 延迟，一个节点上的负载引起的延迟等等。因此，如果--node-status-update-frequency设置为5s，那么实际上 etcd 中的数据变化会需要 6-7s，甚至更长时间。 Kubelet在更新状态失败时，会进行nodeStatusUpdateRetry次重试，默认为 5 次。 Kubelet 会在函数tryUpdateNodeStatus中尝试进行状态更新。Kubelet 使用了 Golang 中的http.Client()方法，但是没有指定超时时间，因此，如果 API Server 过载时，当建立 TCP 连接时可能会出现一些故障。 因此，在nodeStatusUpdateRetry * --node-status-update-frequency时间后才会更新一次节点状态。 同时，Kubernetes 的 controller manager 将尝试每--node-monitor-period时间周期内检查nodeStatusUpdateRetry次。在--node-monitor-grace-period之后，会认为节点 unhealthy，然后会在--pod-eviction-timeout后删除 Pod。 kube proxy 有一个 watcher API，一旦 Pod 被驱逐了，kube proxy 将会通知更新节点的 iptables 规则，将 Pod 从 Service 的 Endpoints 中移除，这样就不会访问到来自故障节点的 Pod 了。 配置对于这些参数的配置，需要根据不通的集群规模场景来进行配置。 社区默认的配置 参数 值 –node-status-update-frequency 10s –node-monitor-period 5s –node-monitor-grace-period 40s –pod-eviction-timeout 5m 快速更新和快速响应 参数 值 –node-status-update-frequency 4s –node-monitor-period 2s –node-monitor-grace-period 20s –pod-eviction-timeout 30s 在这种情况下，Pod 将在 50s 被驱逐，因为该节点在 20s 后被视为Down掉了，--pod-eviction-timeout在 30s 之后发生，但是，这种情况会给 etcd 产生很大的开销，因为每个节点都会尝试每 2s 更新一次状态。 如果环境有1000个节点，那么每分钟将有15000次节点更新操作，这可能需要大型 etcd 容器甚至是 etcd 的专用节点。 如果我们计算尝试次数，则除法将给出5，但实际上每次尝试的 nodeStatusUpdateRetry 尝试将从3到5。 由于所有组件的延迟，尝试总次数将在15到25之间变化。 中等更新和平均响应 参数 值 –node-status-update-frequency 20s –node-monitor-period 5s –node-monitor-grace-period 2m –pod-eviction-timeout 1m 这种场景下会 20s 更新一次 node 状态，controller manager 认为 node 状态不正常之前，会有 2m60⁄205=30 次的 node 状态更新，Node 状态为 down 之后 1m，就会触发驱逐操作。 如果有 1000 个节点，1分钟之内就会有 60s/20s*1000=3000 次的节点状态更新操作。 低更新和慢响应 参数 值 –node-status-update-frequency 1m –node-monitor-period 5s –node-monitor-grace-period 5m –pod-eviction-timeout 1m Kubelet 将会 1m 更新一次节点的状态，在认为不健康之后会有 5m/1m*5=25 次重试更新的机会。Node为不健康的时候，1m 之后 pod开始被驱逐。 可以有不同的组合，例如快速更新和慢反应以满足特定情况。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[istio架构与技术]]></title>
    <url>%2Fposts%2F5a4fga4h.html</url>
    <content type="text"><![CDATA[Welcome to my blog, please add wechat to get password Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14-helm安装]]></title>
    <url>%2Fposts%2Fdkgg3h4f.html</url>
    <content type="text"><![CDATA[摘要Helm这个东西其实早有耳闻，但是一直没有用在生产环境，而且现在对这货的评价也是褒贬不一。正好最近需要再次部署一套测试环境，对于单体服务，部署一套测试环境我相信还是非常快的，但是对于微服务架构的应用，要部署一套新的环境，就有点折磨人了，微服务越多、你就会越绝望的。虽然我们线上和测试环境已经都迁移到了kubernetes环境，但是每个微服务也得维护一套yaml文件，而且每个环境下的配置文件也不太一样，部署一套新的环境成本是真的很高。如果我们能使用类似于yum的工具来安装我们的应用的话是不是就很爽歪歪了啊？Helm就相当于kubernetes环境下的yum包管理工具。 用途做为 Kubernetes 的一个包管理工具，Helm具有如下功能： 创建新的 chart chart 打包成 tgz 格式 上传 chart 到 chart 仓库或从仓库中下载 chart 在Kubernetes集群中安装或卸载 chart 管理用Helm安装的 chart 的发布周期 重要概念Helm 有三个重要概念： chart：包含了创建Kubernetes的一个应用实例的必要信息 config：包含了应用发布配置信息 release：是一个 chart 及其配置的一个运行实例 Helm组件Helm 有以下两个组成部分： Helm Client 是用户命令行工具，其主要负责如下： 本地 chart 开发 仓库管理 与 Tiller sever 交互 发送预安装的 chart 查询 release 信息 要求升级或卸载已存在的 release Tiller Server是一个部署在Kubernetes集群内部的 server，其与 Helm client、Kubernetes API server 进行交互。Tiller server 主要负责如下： 监听来自 Helm client 的请求 通过 chart 及其配置构建一次发布 安装 chart 到Kubernetes集群，并跟踪随后的发布 通过与Kubernetes交互升级或卸载 chart 简单的说，client 管理 charts，而 server 管理发布 release 架构12345678910111213Chart Install 过程：Helm从指定的目录或者tgz文件中解析出Chart结构信息Helm将指定的Chart结构和Values信息通过gRPC传递给TillerTiller根据Chart和Values生成一个ReleaseTiller将Release发送给Kubernetes运行。Chart Update过程：Helm从指定的目录或者tgz文件中解析出Chart结构信息Helm将要更新的Release的名称和Chart结构，Values信息传递给TillerTiller生成Release并更新指定名称的Release的HistoryTiller将Release发送给Kubernetes运行 安装我们可以在Helm Realese页面下载二进制文件，这里下载的2.14.1版本，解压后将可执行文件helm拷贝到/usr/local/bin目录下即可，这样Helm客户端就在这台机器上安装完成了。 123helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.14.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts另外还需要在每个node节点安装yum install socat -y 123[root@node1 helm]# helm versionClient: &amp;version.Version&#123;SemVer:&quot;v2.14.1&quot;, GitCommit:&quot;5270352a09c7e8b6e8c9593002a73535276507c0&quot;, GitTreeState:&quot;clean&quot;&#125;Server: &amp;version.Version&#123;SemVer:&quot;v2.14.1&quot;, GitCommit:&quot;5270352a09c7e8b6e8c9593002a73535276507c0&quot;, GitTreeState:&quot;clean&quot;&#125; 123456自Kubernetes 1.6版本开始，API Server启用了RBAC授权。而目前的Tiller部署没有定义授权的ServiceAccount，这会导致访问API Server时被拒绝。我们可以采用如下方法，明确为Tiller部署添加授权。kubectl create serviceaccount --namespace kube-system tillerkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tillerkubectl patch deploy --namespace kube-system tiller-deploy -p &apos;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&apos;kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default 使用我们现在了尝试创建一个 Chart： 1234567891011121314151617181920212223242526272829[root@node1 helm]# helm create hello-helmCreating hello-helm[root@node1 helm]# lshello-helm helm-v2.14.1-linux-amd64.tar.gz linux-amd64[root@node1 helm]# helm install ./hello-helmNAME: virulent-wolverineLAST DEPLOYED: Mon Jun 17 10:56:39 2019NAMESPACE: defaultSTATUS: DEPLOYEDRESOURCES:==&gt; v1/DeploymentNAME READY UP-TO-DATE AVAILABLE AGEvirulent-wolverine-hello-helm 0/1 0 0 1s==&gt; v1/Pod(related)NAME READY STATUS RESTARTS AGEvirulent-wolverine-hello-helm-6f54d6f866-d5t7v 0/1 ContainerCreating 0 1s==&gt; v1/ServiceNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEvirulent-wolverine-hello-helm ClusterIP 10.254.123.130 &lt;none&gt; 80/TCP 1sNOTES:1. Get the application URL by running these commands: export POD_NAME=$(kubectl get pods --namespace default -l &quot;app.kubernetes.io/name=hello-helm,app.kubernetes.io/instance=virulent-wolverine&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;) echo &quot;Visit http://127.0.0.1:8080 to use your application&quot; kubectl port-forward $POD_NAME 8080:80 然后我们根据提示执行下面的命令： 12export POD_NAME=$(kubectl get pods --namespace default -l &quot;app.kubernetes.io/name=hello-helm,app.kubernetes.io/instance=virulent-wolverine&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)kubectl port-forward $POD_NAME 8080:80 访问： 1234567891011121314151617181920212223242526[root@node1 ~]# curl 127.0.0.1:8080&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt; body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 查看release： 123[root@node1 ~]# helm listNAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACEvirulent-wolverine 1 Mon Jun 17 10:56:39 2019 DEPLOYED hello-helm-0.1.0 1.0 default 打包chart： 1helm package hello-helm 删除： 123456[root@node1 ~]# helm delete virulent-wolverinerelease &quot;virulent-wolverine&quot; deleted[root@node1 ~]# helm list[root@node1 ~]# helm list --allNAME REVISION UPDATED STATUS CHART APP VERSION NAMESPACEvirulent-wolverine 1 Mon Jun 17 10:56:39 2019 DELETED hello-helm-0.1.0 1.0 default 彻底删除： 1234[root@node1 ~]# helm delete virulent-wolverine --purgerelease &quot;virulent-wolverine&quot; deleted[root@node1 ~]# helm list --all[root@node1 ~]#]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s-apiserver工作原理]]></title>
    <url>%2Fposts%2Fdl74fla1.html</url>
    <content type="text"><![CDATA[API Serverkube-apiserver 是 Kubernetes 最重要的核心组件之一，主要提供以下的功能 提供集群管理的 REST API 接口，包括认证授权、数据校验以及集群状态变更等 提供其他模块之间的数据交互和通信的枢纽（其他模块通过 API Server 查询或修改数据，只有 API Server 才直接操作 etcd） 工作原理kube-apiserver 提供了 Kubernetes 的 REST API，实现了认证、授权、准入控制等安全校验功能，同时也负责集群状态的存储操作（通过 etcd）。 API 访问有多种方式可以访问 Kubernetes 提供的 REST API： 123456781、kubectl 命令行工具2、SDK，支持多种语言GoPythonJavascriptJavaCSharp3、其他 OpenAPI 支持的语言，可以通过 gen 工具生成相应的 client kubectl123kubectl get --raw /api/v1/namespaceskubectl get --raw /apis/metrics.k8s.io/v1beta1/nodeskubectl get --raw /apis/metrics.k8s.io/v1beta1/pods kubectl proxy12345678$ kubectl proxy --port=8080 &amp;$ curl http://localhost:8080/api/&#123; &quot;versions&quot;: [ &quot;v1&quot; ]&#125; curl1234567891011121314151617181920212223242526272829303132# In Pods with service account.$ TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)$ CACERT=/run/secrets/kubernetes.io/serviceaccount/ca.crt$ curl --cacert $CACERT --header &quot;Authorization: Bearer $TOKEN&quot; https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/api&#123; &quot;kind&quot;: &quot;APIVersions&quot;, &quot;versions&quot;: [ &quot;v1&quot; ], &quot;serverAddressByClientCIDRs&quot;: [ &#123; &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;, &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot; &#125; ]&#125;# Outside of Pods.$ APISERVER=$(kubectl config view | grep server | cut -f 2- -d &quot;:&quot; | tr -d &quot; &quot;)$ TOKEN=$(kubectl describe secret $(kubectl get secrets | grep default | cut -f1 -d &apos; &apos;) | grep -E &apos;^token&apos;| cut -f2 -d&apos;:&apos;| tr -d &apos;\t&apos;)$ curl $APISERVER/api --header &quot;Authorization: Bearer $TOKEN&quot; --insecure&#123; &quot;kind&quot;: &quot;APIVersions&quot;, &quot;versions&quot;: [ &quot;v1&quot; ], &quot;serverAddressByClientCIDRs&quot;: [ &#123; &quot;clientCIDR&quot;: &quot;0.0.0.0/0&quot;, &quot;serverAddress&quot;: &quot;10.0.1.149:443&quot; &#125; ]&#125; API 资源使用API Resources我们可以通过下面的命令来获取Kubernetes集群支持的所有 API 资源： （1.11以上版本才可以有此命令） 1234567891011121314151617181920212223242526272829kubectl api-resources -o wideNAME SHORTNAMES APIGROUP NAMESPACED KIND VERBSbindings true Binding [create]componentstatuses cs false ComponentStatus [get list]configmaps cm true ConfigMap [create delete deletecollection get list patch update watch]endpoints ep true Endpoints [create delete deletecollection get list patch update watch]events ev true Event [create delete deletecollection get list patch update watch]limitranges limits true LimitRange [create delete deletecollection get list patch update watch]namespaces ns false Namespace [create delete get list patch update watch]nodes no false Node [create delete deletecollection get list patch proxy update watch]persistentvolumeclaims pvc true PersistentVolumeClaim [create delete deletecollection get list patch update watch]persistentvolumes pv false PersistentVolume [create delete deletecollection get list patch update watch]pods po true Pod [create delete deletecollection get list patch proxy update watch]podtemplates true PodTemplate [create delete deletecollection get list patch update watch]replicationcontrollers rc true ReplicationController [create delete deletecollection get list patch update watch]resourcequotas quota true ResourceQuota [create delete deletecollection get list patch update watch]secrets true Secret [create delete deletecollection get list patch update watch]serviceaccounts sa true ServiceAccount [create delete deletecollection get list patch update watch]services svc true Service [create delete get list patch proxy update watch]mutatingwebhookconfigurations admissionregistration.k8s.io false MutatingWebhookConfiguration [create delete deletecollection get list patch update watch]validatingwebhookconfigurations admissionregistration.k8s.io false ValidatingWebhookConfiguration [create delete deletecollection get list patch update watch]customresourcedefinitions crd apiextensions.k8s.io false CustomResourceDefinition [create delete deletecollection get list patch update watch]apiservices apiregistration.k8s.io false APIService [create delete deletecollection get list patch update watch]controllerrevisions apps true ControllerRevision [create delete deletecollection get list patch update watch]daemonsets ds apps true DaemonSet [create delete deletecollection get list patch update watch]deployments deploy apps true Deployment [create delete deletecollection get list patch update watch]replicasets rs apps true ReplicaSet [create delete deletecollection get list patch update watch]statefulsets sts apps true StatefulSet [create delete deletecollection get list patch update watch]... 上面的命令输出了很多有用的信息： SHORTNAMES - 资源名称的简写，比如 deployments 简写就是 deploy，我们可以将这些快捷方式与kubectl一起使用 APIGROUP - 我们可以查看官方文档以了解更多信息，但简而言之，您将在yaml文件中使用它像apiVersion：&lt;APIGROUP&gt;/v1 KIND - 资源名称 VERBS - 可用的方法，在您想要定义ClusterRole RBAC规则时也很有用，您还可以选择获取特定 API 组的 API 资源，例如： 1234567kubectl api-resources --api-group apps -o wideNAME SHORTNAMES APIGROUP NAMESPACED KIND VERBScontrollerrevisions apps true ControllerRevision [create delete deletecollection get list patch update watch]daemonsets ds apps true DaemonSet [create delete deletecollection get list patch update watch]deployments deploy apps true Deployment [create delete deletecollection get list patch update watch]replicasets rs apps true ReplicaSet [create delete deletecollection get list patch update watch]statefulsets sts apps true StatefulSet 对于上面的每种资源类型，我们都可以使用kubectl explain命令来获取有关的资源详细信息： 123456789101112131415161718192021222324kubectl explain configmapDESCRIPTION:ConfigMap holds configuration data for pods to consume.FIELDS: apiVersion &lt;string&gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources data &lt;object&gt; Data contains the configuration data. Each key must consist of alphanumeric characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. kind &lt;string&gt; Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds metadata &lt;Object&gt; Standard object&apos;s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata kubectl explain命令非常有用，特别是在我们不知道该如何编写YAML文件的时候，就可以使用改命令来帮助我们获得更多提示信息。 需要注意的是explain命令可能会显示旧的group/version，我们可以通过--api-version参数显示设置它，比如： 请注意，explain可能会显示旧组/版本，但您可以使用–api-version显式设置它，例如： 1kubectl explain replicaset --api-version apps/v1 API Versions我们也可以使用下面的命令来获取集群支持的所有 API 版本： 1234567891011121314151617181920212223242526272829kubectl api-versionsadmissionregistration.k8s.io/v1beta1apiextensions.k8s.io/v1beta1apiregistration.k8s.io/v1beta1apps/v1apps/v1beta1apps/v1beta2authentication.k8s.io/v1authentication.k8s.io/v1beta1authorization.k8s.io/v1authorization.k8s.io/v1beta1autoscaling/v1autoscaling/v2beta1batch/v1batch/v1beta1certificates.k8s.io/v1beta1certmanager.k8s.io/v1alpha1enterprises.upmc.com/v1events.k8s.io/v1beta1extensions/v1beta1metrics.k8s.io/v1beta1monitoring.coreos.com/v1networking.k8s.io/v1policy/v1beta1rbac.authorization.k8s.io/v1rbac.authorization.k8s.io/v1beta1storage.k8s.io/v1storage.k8s.io/v1beta1v1]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-dashboard]]></title>
    <url>%2Fposts%2Fc2556dcf.html</url>
    <content type="text"><![CDATA[修改配置文件1cd /opt/k8s/work/kubernetes/cluster/addons/dashboard 修改 service 定义，指定端口类型为 NodePort，这样外界可以通过地址 NodeIP:NodePort 访问 dashboard； 1234567891011121314151617cat dashboard-service.yamlapiVersion: v1kind: Servicemetadata: name: kubernetes-dashboard namespace: kube-system labels: k8s-app: kubernetes-dashboard kubernetes.io/cluster-service: &quot;true&quot; addonmanager.kubernetes.io/mode: Reconcilespec: type: NodePort # 增加这一行 selector: k8s-app: kubernetes-dashboard ports: - port: 443 targetPort: 8443 修改镜像地址mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1在dashboard-controller.yaml中 执行所有定义文件1kubectl apply -f . 查看分配的 NodePort123456789101112131415161718[root@node1 dashboard]# kubectl get deployment kubernetes-dashboard -n kube-systemNAME READY UP-TO-DATE AVAILABLE AGEkubernetes-dashboard 1/1 1 1 23h[root@node1 dashboard]# kubectl --namespace kube-system get pods -o wideNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATEScoredns-8854569d4-g2hth 1/1 Running 4 5d22h 172.30.40.2 node1 &lt;none&gt; &lt;none&gt;kubernetes-dashboard-7848d45466-6pm2q 1/1 Running 0 23h 172.30.200.3 node2 &lt;none&gt; &lt;none&gt;metrics-server-5f7cf7659-59swk 1/1 Running 0 2d5h 172.30.40.3 node1 &lt;none&gt; &lt;none&gt;[root@node1 dashboard]# kubectl get services kubernetes-dashboard -n kube-systemNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes-dashboard NodePort 10.254.234.85 &lt;none&gt; 443:32681/TCP 23h 访问 dashboard1https://192.168.6.101:32681 创建登录 Dashboard 的 token 和 kubeconfig 配置文件dashboard 默认只支持 token 认证（不支持 client 证书认证），所以如果使用 Kubeconfig 文件，需要将 token 写入到该文件。 创建登录 token12345kubectl create sa dashboard-admin -n kube-systemkubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-adminADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk &apos;&#123;print $1&#125;&apos;)DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system $&#123;ADMIN_SECRET&#125; | grep -E &apos;^token&apos; | awk &apos;&#123;print $2&#125;&apos;)echo $&#123;DASHBOARD_LOGIN_TOKEN&#125; 使用输出的 token 登录 Dashboard。 创建使用 token 的 KubeConfig 文件123456789101112131415161718192021source /opt/k8s/bin/environment.sh# 设置集群参数kubectl config set-cluster kubernetes \ --certificate-authority=/etc/kubernetes/cert/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=dashboard.kubeconfig# 设置客户端认证参数，使用上面创建的 Tokenkubectl config set-credentials dashboard_user \ --token=$&#123;DASHBOARD_LOGIN_TOKEN&#125; \ --kubeconfig=dashboard.kubeconfig# 设置上下文参数kubectl config set-context default \ --cluster=kubernetes \ --user=dashboard_user \ --kubeconfig=dashboard.kubeconfig# 设置默认上下文kubectl config use-context default --kubeconfig=dashboard.kubeconfig 用生成的 dashboard.kubeconfig 登录 Dashboard。 为kubernetes dashboard访问用户添加权限控制RoleRole表示是一组规则权限，只能累加，Role可以定义在一个namespace中，只能用于授予对单个命名空间中的资源访问的权限。比如我们新建一个对默认命名空间中Pods具有访问权限的角色： 123456789kind: RoleapiVersion: rbac.authorization.k8s.io/v1beta1metadata: namespace: default name: pod-readerrules:- apiGroups: [&quot;&quot;] # &quot;&quot; indicates the core API group resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;] ClusterRoleClusterRole具有与Role相同的权限角色控制能力，不同的是ClusterRole是集群级别的，可以用于: 集群级别的资源控制(例如 node 访问权限) 非资源型 endpoints(例如 /healthz 访问) 所有命名空间资源控制(例如 pods) 比如我们要创建一个授权某个特定命名空间或全部命名空间(取决于绑定方式)访问secrets的集群角色： 123456789kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1beta1metadata: # &quot;namespace&quot; omitted since ClusterRoles are not namespaced name: secret-readerrules:- apiGroups: [&quot;&quot;] resources: [&quot;secrets&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;] RoleBinding和ClusterRoleBindingRoloBinding可以将角色中定义的权限授予用户或用户组，RoleBinding包含一组权限列表(subjects)，权限列表中包含有不同形式的待授予权限资源类型(users、groups、service accounts)，RoleBinding适用于某个命名空间内授权，而 ClusterRoleBinding适用于集群范围内的授权。 比如我们将默认命名空间的pod-reader角色授予用户jane，这样以后该用户在默认命名空间中将具有pod-reader的权限： 1234567891011121314# This role binding allows &quot;jane&quot; to read pods in the &quot;default&quot; namespace.kind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: read-pods namespace: defaultsubjects:- kind: User name: jane apiGroup: rbac.authorization.k8s.ioroleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io RoleBinding同样可以引用ClusterRole来对当前 namespace 内用户、用户组或 ServiceAccount 进行授权，这种操作允许集群管理员在整个集群内定义一些通用的 ClusterRole，然后在不同的 namespace 中使用 RoleBinding 来引用 例如，以下 RoleBinding 引用了一个 ClusterRole，这个 ClusterRole 具有整个集群内对 secrets 的访问权限；但是其授权用户 dave 只能访问 development 空间中的 secrets(因为 RoleBinding 定义在 development 命名空间) 1234567891011121314# This role binding allows &quot;dave&quot; to read secrets in the &quot;development&quot; namespace.kind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: read-secrets namespace: development # This only grants permissions within the &quot;development&quot; namespace.subjects:- kind: User name: dave apiGroup: rbac.authorization.k8s.ioroleRef: kind: ClusterRole name: secret-reader apiGroup: rbac.authorization.k8s.io 最后，使用 ClusterRoleBinding 可以对整个集群中的所有命名空间资源权限进行授权；以下 ClusterRoleBinding 样例展示了授权 manager 组内所有用户在全部命名空间中对 secrets 进行访问 12345678910111213# This cluster role binding allows anyone in the &quot;manager&quot; group to read secrets in any namespace.kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1beta1metadata: name: read-secrets-globalsubjects:- kind: Group name: manager apiGroup: rbac.authorization.k8s.ioroleRef: kind: ClusterRole name: secret-reader apiGroup: rbac.authorization.k8s.io 例子 新增一个新的用户sy 该用户只能对命名空间kube-system下面的pods和deployments进行管理 第一步新建一个ServiceAccount： 12[root@node1 dashboard]# kubectl create sa sy -n kube-systemserviceaccount/sy created 然后我们新建一个角色role-sy：(role.yaml) 123456789101112kind: RoleapiVersion: rbac.authorization.k8s.io/v1metadata: namespace: kube-system name: role-syrules:- apiGroups: [&quot;&quot;] resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]- apiGroups: [&quot;extensions&quot;, &quot;apps&quot;] resources: [&quot;deployments&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;] 注意上面的rules规则：管理pods和deployments的权限。 然后我们创建一个角色绑定，将上面的角色role-sy绑定到**sy**的ServiceAccount`上：(role-bind.yaml) 12345678910111213kind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: name: role-bind-sy namespace: kube-systemsubjects:- kind: ServiceAccount name: sy namespace: kube-systemroleRef: kind: Role name: role-sy apiGroup: rbac.authorization.k8s.io 分别执行上面两个yaml文件： 1234[root@node1 dashboard]# kubectl create -f role.yamlrole.rbac.authorization.k8s.io/role-sy created[root@node1 dashboard]# kubectl create -f role-bind.yaml rolebinding.rbac.authorization.k8s.io/role-bind-sy created 接下来该怎么做？和前面一样的，我们只需要拿到sy这个ServiceAccount的token就可以登录Dashboard了： 12345[root@node1 dashboard]# kubectl get secret -n kube-system |grep sysy-token-5cmnl kubernetes.io/service-account-token 3 3m2s[root@node1 dashboard]# kubectl get secret sy-token-5cmnl -o jsonpath=&#123;.data.token&#125; -n kube-system |base64 -d# 会生成一串很长的base64后的字符串 这样就可以控制权限了，需要将登录地址改为namespace=kube-system]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-metrics-server]]></title>
    <url>%2Fposts%2Fd3554aa2.html</url>
    <content type="text"><![CDATA[介绍metrics-server 通过 kube-apiserver 发现所有节点，然后调用 kubelet APIs（通过 https 接口）获得各节点（Node）和 Pod 的 CPU、Memory 等资源使用情况。 从 Kubernetes 1.12 开始，kubernetes 的安装脚本移除了 Heapster，从 1.13 开始完全移除了对 Heapster 的支持，Heapster 不再被维护。 替代方案如下： 用于支持自动扩缩容的 CPU/memory HPA metrics：metrics-server； 通用的监控方案：使用第三方可以获取 Prometheus 格式监控指标的监控系统，如 Prometheus Operator； 事件传输：使用第三方工具来传输、归档 kubernetes events； Kubernetes Dashboard 还不支持 metrics-server（PR：#3504），如果使用 metrics-server 替代 Heapster，将无法在 dashboard 中以图形展示 Pod 的内存和 CPU 情况，需要通过 Prometheus、Grafana 等监控方案来弥补。 部署12345cd /opt/k8s/work/git clone https://github.com/kubernetes-incubator/metrics-server.gitcd metrics-server/deploy/1.8+/lsaggregated-metrics-reader.yaml auth-delegator.yaml auth-reader.yaml metrics-apiservice.yaml metrics-server-deployment.yaml metrics-server-service.yaml resource-reader.yaml 修改 metrics-server-deployment.yaml 文件，为 metrics-server 添加三个命令行参数：1234567891011121314151617181920212223242526272829303132333435363738394041---apiVersion: v1kind: ServiceAccountmetadata: name: metrics-server namespace: kube-system---apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: metrics-server namespace: kube-system labels: k8s-app: metrics-serverspec: selector: matchLabels: k8s-app: metrics-server template: metadata: name: metrics-server labels: k8s-app: metrics-server spec: serviceAccountName: metrics-server volumes: # mount in tmp so we can safely use from-scratch images and/or read-only containers - name: tmp-dir emptyDir: &#123;&#125; containers: - name: metrics-server image: mirrorgooglecontainers/metrics-server-amd64:v0.3.3 command: - /metrics-server - --metric-resolution=30s - --requestheader-allowed-names=aggregator - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP imagePullPolicy: Always volumeMounts: - name: tmp-dir mountPath: /tmp –metric-resolution=30s：从 kubelet 采集数据的周期； –requestheader-allowed-names=aggregator：允许请求 metrics-server API 的用户名，该名称与 kube-apiserver 的 --proxy-client-cert-file 指定的证书 CN 一致； –kubelet-preferred-address-types：优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况（未配置时默认的情况）； 修改apiserver参数：12345cd /etc/systemd/systemvim kube-apiserver.service--requestheader-allowed-names=&quot;aggregator&quot; 重启apiserver 部署 metrics-server：12cd /opt/k8s/work/metrics-server/deploy/1.8+/kubectl create -f . 使用 kubectl top 命令查看集群节点资源使用情况1234[root@node1 1.8+]# kubectl top nodeNAME CPU(cores) CPU% MEMORY(bytes) MEMORY% node1 117m 5% 2217Mi 57% node2 147m 7% 2680Mi 69%]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-coredns]]></title>
    <url>%2Fposts%2F77sa4nc2.html</url>
    <content type="text"><![CDATA[介绍1.11后CoreDNS 已取代 Kube DNS 作为集群服务发现元件,由于 Kubernetes 需要让 Pod 与 Pod 之间能夠互相通信,然而要能够通信需要知道彼此的 IP 才行,而这种做法通常是通过 Kubernetes API 来获取,但是 Pod IP 会因为生命周期变化而改变,因此这种做法无法弹性使用,且还会增加 API Server 负担,基于此问题 Kubernetes 提供了 DNS 服务来作为查询,让 Pod 能夠以 Service 名称作为域名来查询 IP 位址,因此使用者就再不需要关心实际 Pod IP,而 DNS 也会根据 Pod 变化更新资源记录(Record resources) CoreDNS 是由 CNCF 维护的开源 DNS 方案,该方案前身是 SkyDNS,其采用了 Caddy 的一部分来开发伺服器框架,使其能够建立一套快速灵活的 DNS,而 CoreDNS 每个功能都可以被当作成一個插件的中介软体,如 Log、Cache、Kubernetes 等功能,甚至能够将源记录存储在 Redis、Etcd 中 部署修改配置文件coredns 目录是 cluster/addons/dns： 123456cd /opt/k8s/work/kubernetes/cluster/addons/dns/corednscp coredns.yaml.base coredns.yamlsource /opt/k8s/bin/environment.shsed -i -e &quot;s/__PILLAR__DNS__DOMAIN__/$&#123;CLUSTER_DNS_DOMAIN&#125;/&quot; -e &quot;s/__PILLAR__DNS__SERVER__/$&#123;CLUSTER_DNS_SVC_IP&#125;/&quot; coredns.yaml还需要将镜像修改下，coredns/coredns:1.3.1 创建 coredns1kubectl create -f coredns.yaml 验证12345678910111213141516cat&lt;&lt;EOF | kubectl apply -f -apiVersion: v1kind: Podmetadata: name: busybox namespace: defaultspec: containers: - name: busybox image: busybox:1.28.3 command: - sleep - &quot;3600&quot; imagePullPolicy: IfNotPresent restartPolicy: AlwaysEOF 创建成功后，我们进行检查 12345678910111213141516171819202122232425kubectl get podNAME READY STATUS RESTARTS AGEbusybox 1/1 Running 0 4s[root@node1 coredns]# kubectl exec -ti busybox -- nslookup kubernetesServer: 10.254.0.2Address 1: 10.254.0.2 kube-dns.kube-system.svc.cluster.localName: kubernetesAddress 1: 10.254.0.1 kubernetes.default.svc.cluster.local[root@node1 ~]# kubectl exec -ti busybox ping kubernetes.default.svc.cluster.localPING kubernetes.default.svc.cluster.local (10.254.0.1): 56 data bytes64 bytes from 10.254.0.1: seq=0 ttl=64 time=0.099 ms^C--- kubernetes.default.svc.cluster.local ping statistics ---1 packets transmitted, 1 packets received, 0% packet lossround-trip min/avg/max = 0.099/0.099/0.099 ms注意：用my-svc.my-namespace.svc.cluster.local的方式可以访问服务]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s角色]]></title>
    <url>%2Fposts%2F65aa44f.html</url>
    <content type="text"><![CDATA[查看node节点1234[root@node1 work]# kubectl get nodesNAME STATUS ROLES AGE VERSIONnode1 Ready &lt;none&gt; 41h v1.14.2node2 Ready &lt;none&gt; 41h v1.14.2 设置集群角色12345678910111213# 设置 node1 为 master 角色kubectl label nodes node1 node-role.kubernetes.io/master=# 设置 node2 为 node 角色kubectl label nodes node2 node-role.kubernetes.io/node=[root@node1 ~]# kubectl get nodesNAME STATUS ROLES AGE VERSIONnode1 Ready master 42h v1.14.2node2 Ready node 42h v1.14.2 设置taint语法12345kubectl taint node [node] key=value[effect] 其中[effect] 可取值: [ NoSchedule | PreferNoSchedule | NoExecute ] NoSchedule: 一定不能被调度 PreferNoSchedule: 尽量不要调度 NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod 使用123456789[root@node1 ~]# kubectl taint nodes node1 node-role.kubernetes.io/master=:NoExecutenode/node1 tainted[root@node1 ~]# kubectl get podsNAME READY STATUS RESTARTS AGEnginx-ds-kztdz 1/1 Running 0 18hnginx-ds-vbjh9 0/1 Terminating 0 18h[root@node1 ~]# kubectl get podsNAME READY STATUS RESTARTS AGEnginx-ds-kztdz 1/1 Running 0 18h 查看taint123456789101112131415161718192021222324[root@node1 ~]# kubectl describe node node1Name: node1Roles: masterLabels: beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux kubernetes.io/arch=amd64 kubernetes.io/hostname=node1 kubernetes.io/os=linux node-role.kubernetes.io/master=Annotations: node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: trueCreationTimestamp: Tue, 04 Jun 2019 15:28:56 +0800Taints: node-role.kubernetes.io/master:NoExecute node-role.kubernetes.io/master:NoScheduleUnschedulable: falseConditions: Type Status LastHeartbeatTime LastTransitionTime Reason Message ---- ------ ----------------- ------------------ ------ ------- MemoryPressure False Thu, 06 Jun 2019 10:08:16 +0800 Tue, 04 Jun 2019 15:28:57 +0800 KubeletHasSufficientMemory kubelet has sufficient memory available DiskPressure False Thu, 06 Jun 2019 10:08:16 +0800 Tue, 04 Jun 2019 15:28:57 +0800 KubeletHasNoDiskPressure kubelet has no disk pressure PIDPressure False Thu, 06 Jun 2019 10:08:16 +0800 Tue, 04 Jun 2019 15:28:57 +0800 KubeletHasSufficientPID kubelet has sufficient PID available Ready True Thu, 06 Jun 2019 10:08:16 +0800 Tue, 04 Jun 2019 15:28:57 +0800 KubeletReady kubelet is posting ready statusAddresses: InternalIP: 192.168.6.101 删除taint12[root@node1 ~]# kubectl taint nodes node1 node-role.kubernetes.io/master-node/node1 untainted RBACKubernetes有一个很基本的特性就是它的所有资源对象都是模型化的 API 对象，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源： Pods ConfigMaps Deployments Nodes Secrets Namespaces 上面这些资源对象的可能存在的操作有： create get delete list update edit watch exec 在更上层，这些资源和 API Group 进行关联，比如Pods属于 Core API Group，而Deployements属于 apps API Group，要在Kubernetes中进行RBAC的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象： Rule：规则，规则是一组属于不同 API Group 资源上的一组操作的集合 Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的 Rules 元素，二者的区别在于，在 Role 中，定义的规则只适用于单个命名空间，也就是和 namespace 关联的，而 ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外 Role 和 ClusterRole 在Kubernetes中都被定义为集群内部的 API 资源，和我们前面学习过的 Pod、ConfigMap 这些类似，都是我们集群的资源对象，所以同样的可以使用我们前面的kubectl相关的命令来进行操作 Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源： User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用 KeyStone或者 Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的 API 来进行管理 Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin Service Account：服务帐号，通过Kubernetes API 来管理的一些用户帐号，和 namespace 进行关联的，适用于集群内部运行的应用程序，需要通过 API 来完成权限认证，所以在集群内部进行权限操作，我们都需要使用到 ServiceAccount，这也是我们这节课的重点 RoleBinding 和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-node节点]]></title>
    <url>%2Fposts%2F44qq5gb2.html</url>
    <content type="text"><![CDATA[安装依赖包1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;yum install -y epel-release&quot; ssh root@$&#123;node_ip&#125; &quot;yum install -y conntrack ipvsadm ntp ntpdate ipset jq iptables curl sysstat libseccomp &amp;&amp; modprobe ip_vs &quot; done docker下载和分发 docker 二进制文件到 docker 下载页面 下载最新发布包： 123cd /opt/k8s/workwget https://download.docker.com/linux/static/stable/x86_64/docker-18.09.6.tgztar -xvf docker-18.09.6.tgz 分发二进制文件到所有 worker 节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp docker/* root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 创建和分发 systemd unit 文件1234567891011121314151617181920212223cd /opt/k8s/workcat &gt; docker.service &lt;&lt;&quot;EOF&quot;[Unit]Description=Docker Application Container EngineDocumentation=http://docs.docker.io[Service]WorkingDirectory=##DOCKER_DIR##Environment=&quot;PATH=/opt/k8s/bin:/bin:/sbin:/usr/bin:/usr/sbin&quot;EnvironmentFile=-/run/flannel/dockerExecStart=/opt/k8s/bin/dockerd $DOCKER_NETWORK_OPTIONSExecReload=/bin/kill -s HUP $MAINPIDRestart=on-failureRestartSec=5LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityDelegate=yesKillMode=process[Install]WantedBy=multi-user.targetEOF 分发 systemd unit 文件到所有 worker 机器: 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shsed -i -e &quot;s|##DOCKER_DIR##|$&#123;DOCKER_DIR&#125;|&quot; docker.servicefor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp docker.service root@$&#123;node_ip&#125;:/etc/systemd/system/ done 配置和分发 docker 配置文件使用国内的仓库镜像服务器以加快 pull image 的速度，同时增加下载的并发数 (需要重启 dockerd 生效)： 123456789101112131415161718cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; docker-daemon.json &lt;&lt;EOF&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hub-mirror.c.163.com&quot;], &quot;insecure-registries&quot;: [&quot;docker02:35000&quot;], &quot;max-concurrent-downloads&quot;: 20, &quot;live-restore&quot;: true, &quot;max-concurrent-uploads&quot;: 10, &quot;debug&quot;: true, &quot;data-root&quot;: &quot;$&#123;DOCKER_DIR&#125;/data&quot;, &quot;exec-root&quot;: &quot;$&#123;DOCKER_DIR&#125;/exec&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot;, &quot;max-file&quot;: &quot;5&quot; &#125;&#125;EOF 分发 docker 配置文件到所有 worker 节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /etc/docker/ $&#123;DOCKER_DIR&#125;/&#123;data,exec&#125;&quot; scp docker-daemon.json root@$&#123;node_ip&#125;:/etc/docker/daemon.json done 启动 docker 服务123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker&quot; done 检查服务运行状态123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status docker|grep Active&quot; done 确保状态为 active (running) kubelet创建 kubelet bootstrap kubeconfig 文件123456789101112131415161718192021222324252627282930313233cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_name in $&#123;NODE_NAMES[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_name&#125;&quot; # 创建 token export BOOTSTRAP_TOKEN=$(kubeadm token create \ --description kubelet-bootstrap-token \ --groups system:bootstrappers:$&#123;node_name&#125; \ --kubeconfig ~/.kube/config) # 设置集群参数 kubectl config set-cluster kubernetes \ --certificate-authority=/etc/kubernetes/cert/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=kubelet-bootstrap-$&#123;node_name&#125;.kubeconfig # 设置客户端认证参数 kubectl config set-credentials kubelet-bootstrap \ --token=$&#123;BOOTSTRAP_TOKEN&#125; \ --kubeconfig=kubelet-bootstrap-$&#123;node_name&#125;.kubeconfig # 设置上下文参数 kubectl config set-context default \ --cluster=kubernetes \ --user=kubelet-bootstrap \ --kubeconfig=kubelet-bootstrap-$&#123;node_name&#125;.kubeconfig # 设置默认上下文 kubectl config use-context default --kubeconfig=kubelet-bootstrap-$&#123;node_name&#125;.kubeconfig done 向 kubeconfig 写入的是 token，bootstrap 结束后 kube-controller-manager 为 kubelet 创建 client 和 server 证书； 查看 kubeadm 为各节点创建的 token： 12345[root@node1 ~]# kubeadm token list --kubeconfig ~/.kube/configTOKEN TTL EXPIRES USAGES DESCRIPTION EXTRA GROUPSkp5seh.klhbcowm40rkaoh1 &lt;invalid&gt; 2019-06-05T15:24:51+08:00 authentication,signing kubelet-bootstrap-token system:bootstrappers:node1u2zt2n.3tqw704a4ndqdj1k &lt;invalid&gt; 2019-06-05T15:24:51+08:00 authentication,signing kubelet-bootstrap-token system:bootstrappers:node2[root@node1 ~]# 分发 bootstrap kubeconfig 文件到所有 worker 节点1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_name in $&#123;NODE_NAMES[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_name&#125;&quot; scp kubelet-bootstrap-$&#123;node_name&#125;.kubeconfig root@$&#123;node_name&#125;:/etc/kubernetes/kubelet-bootstrap.kubeconfig done 创建和分发 kubelet 参数配置文件创建 kubelet 参数配置文件模板（可配置项参考代码中注释 ）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kubelet-config.yaml.template &lt;&lt;EOFkind: KubeletConfigurationapiVersion: kubelet.config.k8s.io/v1beta1address: &quot;##NODE_IP##&quot;staticPodPath: &quot;&quot;syncFrequency: 1mfileCheckFrequency: 20shttpCheckFrequency: 20sstaticPodURL: &quot;&quot;port: 10250readOnlyPort: 0rotateCertificates: trueserverTLSBootstrap: trueauthentication: anonymous: enabled: false webhook: enabled: true x509: clientCAFile: &quot;/etc/kubernetes/cert/ca.pem&quot;authorization: mode: WebhookregistryPullQPS: 0registryBurst: 20eventRecordQPS: 0eventBurst: 20enableDebuggingHandlers: trueenableContentionProfiling: truehealthzPort: 10248healthzBindAddress: &quot;##NODE_IP##&quot;clusterDomain: &quot;$&#123;CLUSTER_DNS_DOMAIN&#125;&quot;clusterDNS: - &quot;$&#123;CLUSTER_DNS_SVC_IP&#125;&quot;nodeStatusUpdateFrequency: 10snodeStatusReportFrequency: 1mimageMinimumGCAge: 2mimageGCHighThresholdPercent: 85imageGCLowThresholdPercent: 80volumeStatsAggPeriod: 1mkubeletCgroups: &quot;&quot;systemCgroups: &quot;&quot;cgroupRoot: &quot;&quot;cgroupsPerQOS: truecgroupDriver: cgroupfsruntimeRequestTimeout: 10mhairpinMode: promiscuous-bridgemaxPods: 220podCIDR: &quot;$&#123;CLUSTER_CIDR&#125;&quot;podPidsLimit: -1resolvConf: /etc/resolv.confmaxOpenFiles: 1000000kubeAPIQPS: 1000kubeAPIBurst: 2000serializeImagePulls: falseevictionHard: memory.available: &quot;100Mi&quot;nodefs.available: &quot;10%&quot;nodefs.inodesFree: &quot;5%&quot;imagefs.available: &quot;15%&quot;evictionSoft: &#123;&#125;enableControllerAttachDetach: truefailSwapOn: truecontainerLogMaxSize: 20MicontainerLogMaxFiles: 10systemReserved: &#123;&#125;kubeReserved: &#123;&#125;systemReservedCgroup: &quot;&quot;kubeReservedCgroup: &quot;&quot;enforceNodeAllocatable: [&quot;pods&quot;]EOF address：kubelet 安全端口（https，10250）监听的地址，不能为 127.0.0.1，否则 kube-apiserver、heapster 等不能调用 kubelet 的 API； readOnlyPort=0：关闭只读端口(默认 10255)，等效为未指定； authentication.anonymous.enabled：设置为 false，不允许匿名访问 10250 端口； authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTP 证书认证； authentication.webhook.enabled=true：开启 HTTPs bearer token 认证； 对于未通过 x509 证书和 webhook 认证的请求(kube-apiserver 或其他客户端)，将被拒绝，提示 Unauthorized； authroization.mode=Webhook：kubelet 使用 SubjectAccessReview API 查询 kube-apiserver 某 user、group 是否具有操作资源的权限(RBAC)； featureGates.RotateKubeletClientCertificate、featureGates.RotateKubeletServerCertificate：自动 rotate 证书，证书的有效期取决于 kube-controller-manager 的 –experimental-cluster-signing-duration 参数； 需要 root 账户运行； 为各节点创建和分发 kubelet 配置文件： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; sed -e &quot;s/##NODE_IP##/$&#123;node_ip&#125;/&quot; kubelet-config.yaml.template &gt; kubelet-config-$&#123;node_ip&#125;.yaml.template scp kubelet-config-$&#123;node_ip&#125;.yaml.template root@$&#123;node_ip&#125;:/etc/kubernetes/kubelet-config.yaml done 创建和分发 kubelet systemd unit 文件创建 kubelet systemd unit 文件模板： 12345678910111213141516171819202122232425262728293031323334cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kubelet.service.template &lt;&lt;EOF[Unit]Description=Kubernetes KubeletDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=docker.serviceRequires=docker.service[Service]WorkingDirectory=$&#123;K8S_DIR&#125;/kubeletExecStart=/opt/k8s/bin/kubelet \\ --allow-privileged=true \\ --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \\ --cert-dir=/etc/kubernetes/cert \\ --cni-conf-dir=/etc/cni/net.d \\ --container-runtime=docker \\ --container-runtime-endpoint=unix:///var/run/dockershim.sock \\ --root-dir=$&#123;K8S_DIR&#125;/kubelet \\ --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \\ --config=/etc/kubernetes/kubelet-config.yaml \\ --hostname-override=##NODE_NAME## \\ --pod-infra-container-image=registry.cn-beijing.aliyuncs.com/k8s_images/pause-amd64:3.1 \\ --image-pull-progress-deadline=15m \\ --volume-plugin-dir=$&#123;K8S_DIR&#125;/kubelet/kubelet-plugins/volume/exec/ \\ --logtostderr=true \\ --v=2Restart=alwaysRestartSec=5StartLimitInterval=0[Install]WantedBy=multi-user.targetEOF 如果设置了 --hostname-override 选项，则 kube-proxy 也需要设置该选项，否则会出现找不到 Node 的情况； --bootstrap-kubeconfig：指向 bootstrap kubeconfig 文件，kubelet 使用该文件中的用户名和 token 向 kube-apiserver 发送 TLS Bootstrapping 请求； K8S approve kubelet 的 csr 请求后，在 --cert-dir 目录创建证书和私钥文件，然后写入 --kubeconfig 文件； --pod-infra-container-image 不使用 redhat 的 pod-infrastructure:latest 镜像，它不能回收容器的僵尸； 为各节点创建和分发 kubelet systemd unit 文件： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_name in $&#123;NODE_NAMES[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_name&#125;&quot; sed -e &quot;s/##NODE_NAME##/$&#123;node_name&#125;/&quot; kubelet.service.template &gt; kubelet-$&#123;node_name&#125;.service scp kubelet-$&#123;node_name&#125;.service root@$&#123;node_name&#125;:/etc/systemd/system/kubelet.service done Bootstrap Token Auth 和授予权限kubelet 启动时查找 --kubeletconfig 参数对应的文件是否存在，如果不存在则使用 --bootstrap-kubeconfig 指定的 kubeconfig 文件向 kube-apiserver 发送证书签名请求 (CSR)。 kube-apiserver 收到 CSR 请求后，对其中的 Token 进行认证，认证通过后将请求的 user 设置为 system:bootstrap:&lt;Token ID&gt;，group 设置为 system:bootstrappers，这一过程称为 Bootstrap Token Auth。 如果说kubelet启动失败的话： 创建一个 clusterrolebinding，将 group system:bootstrappers 和 clusterrole system:node-bootstrapper 绑定： 1$ kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers 启动 kubelet 服务12345678source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;K8S_DIR&#125;/kubelet/kubelet-plugins/volume/exec/&quot; ssh root@$&#123;node_ip&#125; &quot;/usr/sbin/swapoff -a&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet&quot; done kubelet 启动后使用 –bootstrap-kubeconfig 向 kube-apiserver 发送 CSR 请求，当这个 CSR 被 approve 后，kube-controller-manager 为 kubelet 创建 TLS 客户端证书、私钥和 –kubeletconfig 文件。 注意：kube-controller-manager 需要配置 --cluster-signing-cert-file 和 --cluster-signing-key-file参数，才会为 TLS Bootstrap 创建证书和私钥。 自动 approve CSR 请求创建三个 ClusterRoleBinding，分别用于自动 approve client、renew client、renew server 证书： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556cd /opt/k8s/workcat &gt; csr-crb.yaml &lt;&lt;EOF # Approve all CSRs for the group &quot;system:bootstrappers&quot; kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: auto-approve-csrs-for-group subjects: - kind: Group name: system:bootstrappers apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: system:certificates.k8s.io:certificatesigningrequests:nodeclient apiGroup: rbac.authorization.k8s.io--- # To let a node of the group &quot;system:nodes&quot; renew its own credentials kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: node-client-cert-renewal subjects: - kind: Group name: system:nodes apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient apiGroup: rbac.authorization.k8s.io---# A ClusterRole which instructs the CSR approver to approve a node requesting a# serving cert matching its client cert.kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata: name: approve-node-server-renewal-csrrules:- apiGroups: [&quot;certificates.k8s.io&quot;] resources: [&quot;certificatesigningrequests/selfnodeserver&quot;] verbs: [&quot;create&quot;]--- # To let a node of the group &quot;system:nodes&quot; renew its own server credentials kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: node-server-cert-renewal subjects: - kind: Group name: system:nodes apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: approve-node-server-renewal-csr apiGroup: rbac.authorization.k8s.ioEOFkubectl apply -f csr-crb.yaml auto-approve-csrs-for-group：自动 approve node 的第一次 CSR； 注意第一次 CSR 时，请求的 Group 为 system:bootstrappers； node-client-cert-renewal：自动 approve node 后续过期的 client 证书，自动生成的证书 Group 为 system:nodes; node-server-cert-renewal：自动 approve node 后续过期的 server 证书，自动生成的证书 Group 为 system:nodes; 手动 approve server cert csr基于安全性考虑，CSR approving controllers 不会自动 approve kubelet server 证书签名请求，需要手动 approve： 1234567891011121314151617181920$ kubectl get csrNAME AGE REQUESTOR CONDITIONcsr-5f4vh 9m25s system:bootstrap:82jfrm Approved,Issuedcsr-5r7j7 6m11s system:node:zhangjun-k8s03 Pendingcsr-5rw7s 9m23s system:bootstrap:b1f7np Approved,Issuedcsr-9snww 8m3s system:bootstrap:82jfrm Approved,Issuedcsr-c7z56 6m12s system:node:zhangjun-k8s02 Pendingcsr-j55lh 6m12s system:node:zhangjun-k8s01 Pendingcsr-m29fm 9m25s system:bootstrap:3gzd53 Approved,Issuedcsr-rc8w7 8m3s system:bootstrap:3gzd53 Approved,Issuedcsr-vd52r 8m2s system:bootstrap:b1f7np Approved,Issued$ kubectl certificate approve csr-5r7j7certificatesigningrequest.certificates.k8s.io/csr-5r7j7 approved$ kubectl certificate approve csr-c7z56certificatesigningrequest.certificates.k8s.io/csr-c7z56 approved$ kubectl certificate approve csr-j55lhcertificatesigningrequest.certificates.k8s.io/csr-j55lh approved kubelet 提供的 API 接口 10248: healthz http 服务； 10250: https 服务，访问该端口时需要认证和授权（即使访问 /healthz 也需要）； 未开启只读端口 10255； 从 K8S v1.10 开始，去除了 --cadvisor-port 参数（默认 4194 端口），不支持访问 cAdvisor UI &amp; API。 例如执行 kubectl exec -it nginx-ds-5rmws -- sh 命令时，kube-apiserver 会向 kubelet 发送如下请求： 1POST /exec/default/nginx-ds-5rmws/my-nginx?command=sh&amp;input=1&amp;output=1&amp;tty=1 kubelet 接收 10250 端口的 https 请求，可以访问如下资源： /pods、/runningpods /metrics、/metrics/cadvisor、/metrics/probes /spec /stats、/stats/container /logs /run/、/exec/, /attach/, /portForward/, /containerLogs/ 详情参考：https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/server/server.go#L434:3 由于关闭了匿名认证，同时开启了 webhook 授权，所有访问 10250 端口 https API 的请求都需要被认证和授权。 预定义的 ClusterRole system:kubelet-api-admin 授予访问 kubelet 所有 API 的权限(kube-apiserver 使用的 kubernetes 证书 User 授予了该权限)： 12345678910111213$ kubectl describe clusterrole system:kubelet-api-adminName: system:kubelet-api-adminLabels: kubernetes.io/bootstrapping=rbac-defaultsAnnotations: rbac.authorization.kubernetes.io/autoupdate=truePolicyRule: Resources Non-Resource URLs Resource Names Verbs --------- ----------------- -------------- ----- nodes [] [] [get list watch proxy] nodes/log [] [] [*] nodes/metrics [] [] [*] nodes/proxy [] [] [*] nodes/spec [] [] [*] nodes/stats [] [] [*] kubelet api 认证和授权kubelet 配置了如下认证参数： authentication.anonymous.enabled：设置为 false，不允许匿名访问 10250 端口； authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTPs 证书认证； authentication.webhook.enabled=true：开启 HTTPs bearer token 认证； 同时配置了如下授权参数： authroization.mode=Webhook：开启 RBAC 授权； kubelet 收到请求后，使用 clientCAFile 对证书签名进行认证，或者查询 bearer token 是否有效。如果两者都没通过，则拒绝请求，提示 Unauthorized： 12345$ curl -s --cacert /etc/kubernetes/cert/ca.pem https://192.168.6.101:10250/metricsUnauthorized$ curl -s --cacert /etc/kubernetes/cert/ca.pem -H &quot;Authorization: Bearer 123456&quot; https://192.168.6.101:10250/metricsUnauthorized 通过认证后，kubelet 使用 SubjectAccessReview API 向 kube-apiserver 发送请求，查询证书或 token 对应的 user、group 是否有操作资源的权限(RBAC)； 证书认证和授权12345678910111213141516$ # 权限不足的证书；$ curl -s --cacert /etc/kubernetes/cert/ca.pem --cert /etc/kubernetes/cert/kube-controller-manager.pem --key /etc/kubernetes/cert/kube-controller-manager-key.pem https://192.168.6.101:10250/metricsForbidden (user=system:kube-controller-manager, verb=get, resource=nodes, subresource=metrics)$ # 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书；$ curl -s --cacert /etc/kubernetes/cert/ca.pem --cert /opt/k8s/work/admin.pem --key /opt/k8s/work/admin-key.pem https://192.168.6.101:10250/metrics|head# HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.# TYPE apiserver_audit_event_total counterapiserver_audit_event_total 0# HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.# TYPE apiserver_audit_requests_rejected_total counterapiserver_audit_requests_rejected_total 0# HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.# TYPE apiserver_client_certificate_expiration_seconds histogramapiserver_client_certificate_expiration_seconds_bucket&#123;le=&quot;0&quot;&#125; 0apiserver_client_certificate_expiration_seconds_bucket&#123;le=&quot;1800&quot;&#125; 0 --cacert、--cert、--key 的参数值必须是文件路径，如上面的 ./admin.pem 不能省略 ./，否则返回 401 Unauthorized； bear token 认证和授权创建一个 ServiceAccount，将它和 ClusterRole system:kubelet-api-admin 绑定，从而具有调用 kubelet API 的权限： 12345678910111213141516kubectl create sa kubelet-api-testkubectl create clusterrolebinding kubelet-api-test --clusterrole=system:kubelet-api-admin --serviceaccount=default:kubelet-api-testSECRET=$(kubectl get secrets | grep kubelet-api-test | awk &apos;&#123;print $1&#125;&apos;)TOKEN=$(kubectl describe secret $&#123;SECRET&#125; | grep -E &apos;^token&apos; | awk &apos;&#123;print $2&#125;&apos;)echo $&#123;TOKEN&#125;$ curl -s --cacert /etc/kubernetes/cert/ca.pem -H &quot;Authorization: Bearer $&#123;TOKEN&#125;&quot; https://192.168.6.101:10250/metrics|head# HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.# TYPE apiserver_audit_event_total counterapiserver_audit_event_total 0# HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.# TYPE apiserver_audit_requests_rejected_total counterapiserver_audit_requests_rejected_total 0# HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.# TYPE apiserver_client_certificate_expiration_seconds histogramapiserver_client_certificate_expiration_seconds_bucket&#123;le=&quot;0&quot;&#125; 0apiserver_client_certificate_expiration_seconds_bucket&#123;le=&quot;1800&quot;&#125; 0 kube-proxy创建 kube-proxy 证书创建证书签名请求： 12345678910111213141516171819cd /opt/k8s/workcat &gt; kube-proxy-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;system:kube-proxy&quot;, &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF CN：指定该证书的 User 为 system:kube-proxy； 预定义的 RoleBinding system:node-proxier 将User system:kube-proxy 与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限； 该证书只会被 kube-proxy 当做 client 证书使用，所以 hosts 字段为空； 生成证书和私钥： 123456cd /opt/k8s/workcfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxyls kube-proxy* 创建和分发 kubeconfig 文件1234567891011121314151617181920cd /opt/k8s/worksource /opt/k8s/bin/environment.shkubectl config set-cluster kubernetes \ --certificate-authority=/opt/k8s/work/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=kube-proxy.kubeconfigkubectl config set-credentials kube-proxy \ --client-certificate=kube-proxy.pem \ --client-key=kube-proxy-key.pem \ --embed-certs=true \ --kubeconfig=kube-proxy.kubeconfigkubectl config set-context default \ --cluster=kubernetes \ --user=kube-proxy \ --kubeconfig=kube-proxy.kubeconfigkubectl config use-context default --kubeconfig=kube-proxy.kubeconfig --embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl-proxy.kubeconfig 文件中(不加时，写入的是证书文件路径)； 分发 kubeconfig 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_name in $&#123;NODE_NAMES[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_name&#125;&quot; scp kube-proxy.kubeconfig root@$&#123;node_name&#125;:/etc/kubernetes/ done 创建 kube-proxy 配置文件从 v1.10 开始，kube-proxy 部分参数可以配置文件中配置。可以使用 --write-config-to 选项生成该配置文件，或者参考 源代码的注释。 创建 kube-proxy config 文件模板： 12345678910111213141516171819202122cd /opt/k8s/workcat &gt; kube-proxy-config.yaml.template &lt;&lt;EOFkind: KubeProxyConfigurationapiVersion: kubeproxy.config.k8s.io/v1alpha1clientConnection: burst: 200 kubeconfig: &quot;/etc/kubernetes/kube-proxy.kubeconfig&quot; qps: 100bindAddress: ##NODE_IP##healthzBindAddress: ##NODE_IP##:10256metricsBindAddress: ##NODE_IP##:10249enableProfiling: trueclusterCIDR: $&#123;CLUSTER_CIDR&#125;hostnameOverride: ##NODE_NAME##mode: &quot;ipvs&quot;portRange: &quot;&quot;kubeProxyIPTablesConfiguration: masqueradeAll: falsekubeProxyIPVSConfiguration: scheduler: rr excludeCIDRs: []EOF bindAddress: 监听地址； clientConnection.kubeconfig: 连接 apiserver 的 kubeconfig 文件； clusterCIDR: kube-proxy 根据 --cluster-cidr 判断集群内部和外部流量，指定 --cluster-cidr 或 --masquerade-all 选项后 kube-proxy 才会对访问 Service IP 的请求做 SNAT； hostnameOverride: 参数值必须与 kubelet 的值一致，否则 kube-proxy 启动后会找不到该 Node，从而不会创建任何 ipvs 规则； mode: 使用 ipvs 模式； 为各节点创建和分发 kube-proxy 配置文件： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 3; i++ )) do echo &quot;&gt;&gt;&gt; $&#123;NODE_NAMES[i]&#125;&quot; sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; kube-proxy-config.yaml.template &gt; kube-proxy-config-$&#123;NODE_NAMES[i]&#125;.yaml.template scp kube-proxy-config-$&#123;NODE_NAMES[i]&#125;.yaml.template root@$&#123;NODE_NAMES[i]&#125;:/etc/kubernetes/kube-proxy-config.yaml done 创建和分发 kube-proxy systemd unit 文件123456789101112131415161718192021cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kube-proxy.service &lt;&lt;EOF[Unit]Description=Kubernetes Kube-Proxy ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.target[Service]WorkingDirectory=$&#123;K8S_DIR&#125;/kube-proxyExecStart=/opt/k8s/bin/kube-proxy \\ --config=/etc/kubernetes/kube-proxy-config.yaml \\ --logtostderr=true \\ --v=2Restart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF 分发 kube-proxy systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_name in $&#123;NODE_NAMES[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_name&#125;&quot; scp kube-proxy.service root@$&#123;node_name&#125;:/etc/systemd/system/ done 启动 kube-proxy 服务123456789cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-proxy&quot; ssh root@$&#123;node_ip&#125; &quot;modprobe ip_vs_rr&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy&quot; done 启动服务前必须先创建工作目录； 检查启动结果123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status kube-proxy|grep Active&quot; done 确保状态为 active (running) 查看 ipvs 路由规则123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;/usr/sbin/ipvsadm -ln&quot; done]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-controller、schedule]]></title>
    <url>%2Fposts%2F544ccaa2.html</url>
    <content type="text"><![CDATA[kube-controller-manager 集群创建 kube-controller-manager 证书和私钥创建证书签名请求： 123456789101112131415161718192021222324cd /opt/k8s/workcat &gt; kube-controller-manager-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;system:kube-controller-manager&quot;, &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.6.101&quot;, &quot;192.168.6.102&quot; ], &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;system:kube-controller-manager&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF hosts 列表包含所有 kube-controller-manager 节点 IP； CN 和 O 均为 system:kube-controller-manager，kubernetes 内置的 ClusterRoleBindings system:kube-controller-manager 赋予 kube-controller-manager 工作所需的权限。 生成证书和私钥： 12345cd /opt/k8s/workcfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager 将生成的证书和私钥分发到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-controller-manager*.pem root@$&#123;node_ip&#125;:/etc/kubernetes/cert/ done 创建和分发 kubeconfig 文件kube-controller-manager 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-controller-manager 证书： 1234567891011121314151617181920cd /opt/k8s/worksource /opt/k8s/bin/environment.shkubectl config set-cluster kubernetes \ --certificate-authority=/opt/k8s/work/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-credentials system:kube-controller-manager \ --client-certificate=kube-controller-manager.pem \ --client-key=kube-controller-manager-key.pem \ --embed-certs=true \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-context system:kube-controller-manager \ --cluster=kubernetes \ --user=system:kube-controller-manager \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig 分发 kubeconfig 到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-controller-manager.kubeconfig root@$&#123;node_ip&#125;:/etc/kubernetes/ done 创建 kube-controller-manager systemd unit 模板文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kube-controller-manager.service.template &lt;&lt;EOF[Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]WorkingDirectory=$&#123;K8S_DIR&#125;/kube-controller-managerExecStart=/opt/k8s/bin/kube-controller-manager \\ --profiling \\ --cluster-name=kubernetes \\ --controllers=*,bootstrapsigner,tokencleaner \\ --kube-api-qps=1000 \\ --kube-api-burst=2000 \\ --leader-elect \\ --use-service-account-credentials\\ --concurrent-service-syncs=2 \\ --bind-address=##NODE_IP## \\ --secure-port=10252 \\ --tls-cert-file=/etc/kubernetes/cert/kube-controller-manager.pem \\ --tls-private-key-file=/etc/kubernetes/cert/kube-controller-manager-key.pem \\ --port=0 \\ --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\ --client-ca-file=/etc/kubernetes/cert/ca.pem \\ --requestheader-allowed-names=&quot;&quot; \\ --requestheader-client-ca-file=/etc/kubernetes/cert/ca.pem \\ --requestheader-extra-headers-prefix=&quot;X-Remote-Extra-&quot; \\ --requestheader-group-headers=X-Remote-Group \\ --requestheader-username-headers=X-Remote-User \\ --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\ --cluster-signing-cert-file=/etc/kubernetes/cert/ca.pem \\ --cluster-signing-key-file=/etc/kubernetes/cert/ca-key.pem \\ --experimental-cluster-signing-duration=8760h \\ --horizontal-pod-autoscaler-sync-period=10s \\ --concurrent-deployment-syncs=10 \\ --concurrent-gc-syncs=30 \\ --node-cidr-mask-size=24 \\ --service-cluster-ip-range=$&#123;SERVICE_CIDR&#125; \\ --pod-eviction-timeout=6m \\ --terminated-pod-gc-threshold=10000 \\ --root-ca-file=/etc/kubernetes/cert/ca.pem \\ --service-account-private-key-file=/etc/kubernetes/cert/ca-key.pem \\ --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\ --logtostderr=true \\ --v=2Restart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF --port=0：关闭监听非安全端口（http），同时 --address 参数无效，--bind-address 参数有效； --secure-port=10252、--bind-address=0.0.0.0: 在所有网络接口监听 10252 端口的 https /metrics 请求； --kubeconfig：指定 kubeconfig 文件路径，kube-controller-manager 使用它连接和验证 kube-apiserver； --authentication-kubeconfig 和 --authorization-kubeconfig：kube-controller-manager 使用它连接 apiserver，对 client 的请求进行认证和授权。kube-controller-manager 不再使用 --tls-ca-file对请求 https metrics 的 Client 证书进行校验。如果没有配置这两个 kubeconfig 参数，则 client 连接 kube-controller-manager https 端口的请求会被拒绝(提示权限不足)。 --cluster-signing-*-file：签名 TLS Bootstrap 创建的证书； --experimental-cluster-signing-duration：指定 TLS Bootstrap 证书的有效期； --root-ca-file：放置到容器 ServiceAccount 中的 CA 证书，用来对 kube-apiserver 的证书进行校验； --service-account-private-key-file：签名 ServiceAccount 中 Token 的私钥文件，必须和 kube-apiserver 的 --service-account-key-file 指定的公钥文件配对使用； --service-cluster-ip-range ：指定 Service Cluster IP 网段，必须和 kube-apiserver 中的同名参数一致； --leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态； --controllers=*,bootstrapsigner,tokencleaner：启用的控制器列表，tokencleaner 用于自动清理过期的 Bootstrap token； --horizontal-pod-autoscaler-*：custom metrics 相关参数，支持 autoscaling/v2alpha1； --tls-cert-file、--tls-private-key-file：使用 https 输出 metrics 时使用的 Server 证书和秘钥； --use-service-account-credentials=true: kube-controller-manager 中各 controller 使用 serviceaccount 访问 kube-apiserver； 创建和分发 kube-controller-mananger systemd unit 文件替换模板文件中的变量，为各节点创建 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 2; i++ )) do sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; kube-controller-manager.service.template &gt; kube-controller-manager-$&#123;NODE_IPS[i]&#125;.service donels kube-controller-manager*.service NODE_NAMES 和 NODE_IPS 为相同长度的 bash 数组，分别为节点名称和对应的 IP； 分发到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-controller-manager-$&#123;node_ip&#125;.service root@$&#123;node_ip&#125;:/etc/systemd/system/kube-controller-manager.service done 文件重命名为 kube-controller-manager.service; 启动 kube-controller-manager 服务1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-controller-manager&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager&quot; done 启动服务前必须先创建工作目录； 检查服务运行状态123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status kube-controller-manager|grep Active&quot; done 确保状态为 active (running)，否则查看日志，确认原因： 1journalctl -u kube-controller-manager 查看当前的 leader123456789101112[root@node1 ~]# kubectl get endpoints kube-controller-manager --namespace=kube-system -o yamlapiVersion: v1kind: Endpointsmetadata: annotations: control-plane.alpha.kubernetes.io/leader: &apos;&#123;&quot;holderIdentity&quot;:&quot;node1_3e3a8815-8698-11e9-87d5-005056b16e40&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2019-06-04T07:14:15Z&quot;,&quot;renewTime&quot;:&quot;2019-06-05T07:22:40Z&quot;,&quot;leaderTransitions&quot;:2&#125;&apos; creationTimestamp: &quot;2019-06-04T07:00:39Z&quot; name: kube-controller-manager namespace: kube-system resourceVersion: &quot;124731&quot; selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager uid: 75e30eec-8696-11e9-b371-005056b1d2de kube-scheduler 集群创建 kube-scheduler 证书和私钥创建证书签名请求： 123456789101112131415161718192021222324cd /opt/k8s/workcat &gt; kube-scheduler-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;system:kube-scheduler&quot;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.6.101&quot;, &quot;192.168.6.102&quot; ], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;system:kube-scheduler&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF hosts 列表包含所有 kube-scheduler 节点 IP； CN 和 O 均为 system:kube-scheduler，kubernetes 内置的 ClusterRoleBindings system:kube-scheduler 将赋予 kube-scheduler 工作所需的权限； 生成证书和私钥： 123456cd /opt/k8s/workcfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-schedulerls kube-scheduler*pem 将生成的证书和私钥分发到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-scheduler*.pem root@$&#123;node_ip&#125;:/etc/kubernetes/cert/ done 创建和分发 kubeconfig 文件kube-scheduler 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-scheduler 证书： 1234567891011121314151617181920cd /opt/k8s/worksource /opt/k8s/bin/environment.shkubectl config set-cluster kubernetes \ --certificate-authority=/opt/k8s/work/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=kube-scheduler.kubeconfigkubectl config set-credentials system:kube-scheduler \ --client-certificate=kube-scheduler.pem \ --client-key=kube-scheduler-key.pem \ --embed-certs=true \ --kubeconfig=kube-scheduler.kubeconfigkubectl config set-context system:kube-scheduler \ --cluster=kubernetes \ --user=system:kube-scheduler \ --kubeconfig=kube-scheduler.kubeconfigkubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig 分发 kubeconfig 到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-scheduler.kubeconfig root@$&#123;node_ip&#125;:/etc/kubernetes/ done 创建 kube-scheduler 配置文件1234567891011121314151617cd /opt/k8s/workcat &gt;kube-scheduler.yaml.template &lt;&lt;EOFapiVersion: kubescheduler.config.k8s.io/v1alpha1kind: KubeSchedulerConfigurationbindTimeoutSeconds: 600clientConnection: burst: 200 kubeconfig: &quot;/etc/kubernetes/kube-scheduler.kubeconfig&quot; qps: 100enableContentionProfiling: falseenableProfiling: truehardPodAffinitySymmetricWeight: 1healthzBindAddress: ##NODE_IP##:10251leaderElection: leaderElect: truemetricsBindAddress: ##NODE_IP##:10251EOF --kubeconfig：指定 kubeconfig 文件路径，kube-scheduler 使用它连接和验证 kube-apiserver； --leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态； 替换模板文件中的变量： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 3; i++ )) do sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; kube-scheduler.yaml.template &gt; kube-scheduler-$&#123;NODE_IPS[i]&#125;.yaml donels kube-scheduler*.yaml NODE_NAMES 和 NODE_IPS 为相同长度的 bash 数组，分别为节点名称和对应的 IP； 分发 kube-scheduler 配置文件到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-scheduler-$&#123;node_ip&#125;.yaml root@$&#123;node_ip&#125;:/etc/kubernetes/kube-scheduler.yaml done 重命名为 kube-scheduler.yaml; 创建 kube-scheduler systemd unit 模板文件1234567891011121314151617181920212223242526272829303132cd /opt/k8s/workcat &gt; kube-scheduler.service.template &lt;&lt;EOF[Unit]Description=Kubernetes SchedulerDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]WorkingDirectory=$&#123;K8S_DIR&#125;/kube-schedulerExecStart=/opt/k8s/bin/kube-scheduler \\ --config=/etc/kubernetes/kube-scheduler.yaml \\ --bind-address=##NODE_IP## \\ --secure-port=10259 \\ --port=0 \\ --tls-cert-file=/etc/kubernetes/cert/kube-scheduler.pem \\ --tls-private-key-file=/etc/kubernetes/cert/kube-scheduler-key.pem \\ --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\ --client-ca-file=/etc/kubernetes/cert/ca.pem \\ --requestheader-allowed-names=&quot;&quot; \\ --requestheader-client-ca-file=/etc/kubernetes/cert/ca.pem \\ --requestheader-extra-headers-prefix=&quot;X-Remote-Extra-&quot; \\ --requestheader-group-headers=X-Remote-Group \\ --requestheader-username-headers=X-Remote-User \\ --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\ --logtostderr=true \\ --v=2Restart=alwaysRestartSec=5StartLimitInterval=0[Install]WantedBy=multi-user.targetEOF 为各节点创建和分发 kube-scheduler systemd unit 文件替换模板文件中的变量，为各节点创建 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 2; i++ )) do sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; kube-scheduler.service.template &gt; kube-scheduler-$&#123;NODE_IPS[i]&#125;.service donels kube-scheduler*.service 分发 systemd unit 文件到所有 master 节点： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-scheduler-$&#123;node_ip&#125;.service root@$&#123;node_ip&#125;:/etc/systemd/system/kube-scheduler.service done 重命名为 kube-scheduler.service； 启动 kube-scheduler 服务1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-scheduler&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-scheduler &amp;&amp; systemctl restart kube-scheduler&quot; done 启动服务前必须先创建工作目录； 检查服务运行状态123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status kube-scheduler|grep Active&quot; done 确保状态为 active (running) 查看当前的 leader123456789101112[root@node1 ~]# kubectl get endpoints kube-scheduler --namespace=kube-system -o yamlapiVersion: v1kind: Endpointsmetadata: annotations: control-plane.alpha.kubernetes.io/leader: &apos;&#123;&quot;holderIdentity&quot;:&quot;node1_b23eda23-8698-11e9-b281-005056b16e40&quot;,&quot;leaseDurationSeconds&quot;:15,&quot;acquireTime&quot;:&quot;2019-06-04T07:17:00Z&quot;,&quot;renewTime&quot;:&quot;2019-06-05T07:31:12Z&quot;,&quot;leaderTransitions&quot;:1&#125;&apos; creationTimestamp: &quot;2019-06-04T07:07:02Z&quot; name: kube-scheduler namespace: kube-system resourceVersion: &quot;125460&quot; selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler uid: 5a3888a1-8697-11e9-b371-005056b1d2de]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-apiserver集群]]></title>
    <url>%2Fposts%2F863q77b5.html</url>
    <content type="text"><![CDATA[nginx代理基于 nginx 代理的 kube-apiserver 高可用方案1234- 控制节点的 kube-controller-manager、kube-scheduler 是多实例部署，所以只要有一个实例正常，就可以保证高可用；- 集群内的 Pod 使用 K8S 服务域名 kubernetes 访问 kube-apiserver， kube-dns 会自动解析出多个 kube-apiserver 节点的 IP，所以也是高可用的；- 在每个节点起一个 nginx 进程，后端对接多个 apiserver 实例，nginx 对它们做健康检查和负载均衡；- kubelet、kube-proxy、controller-manager、scheduler 通过本地的 nginx（监听 127.0.0.1）访问 kube-apiserver，从而实现 kube-apiserver 的高可用； 下载和编译 nginx下载源码： 123cd /opt/k8s/workwget http://nginx.org/download/nginx-1.15.3.tar.gztar -xzvf nginx-1.15.3.tar.gz 配置编译参数： 123cd /opt/k8s/work/nginx-1.15.3mkdir nginx-prefix./configure --with-stream --without-http --prefix=$(pwd)/nginx-prefix --without-http_uwsgi_module --without-http_scgi_module --without-http_fastcgi_module --with-stream：开启 4 层透明转发(TCP Proxy)功能； --without-xxx：关闭所有其他功能，这样生成的动态链接二进制程序依赖最小； 编译和安装： 12cd /opt/k8s/work/nginx-1.15.3make &amp;&amp; make install 安装和部署 nginx创建目录结构： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; mkdir -p /opt/k8s/kube-nginx/&#123;conf,logs,sbin&#125; done 拷贝二进制程序： 123456789cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp /opt/k8s/work/nginx-1.15.3/nginx-prefix/sbin/nginx root@$&#123;node_ip&#125;:/opt/k8s/kube-nginx/sbin/kube-nginx ssh root@$&#123;node_ip&#125; &quot;chmod a+x /opt/k8s/kube-nginx/sbin/*&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /opt/k8s/kube-nginx/&#123;conf,logs,sbin&#125;&quot; done 重命名二进制文件为 kube-nginx； 配置 nginx，开启 4 层透明转发功能： 12345678910111213141516171819202122cd /opt/k8s/workcat &gt; kube-nginx.conf &lt;&lt;EOFworker_processes 1;events &#123; worker_connections 1024;&#125;stream &#123; upstream backend &#123; hash $remote_addr consistent; server 192.168.6.101:6443 max_fails=3 fail_timeout=30s; server 192.168.6.102:6443 max_fails=3 fail_timeout=30s; &#125; server &#123; listen 127.0.0.1:8443; proxy_connect_timeout 1s; proxy_pass backend; &#125;&#125;EOF 分发配置文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-nginx.conf root@$&#123;node_ip&#125;:/opt/k8s/kube-nginx/conf/kube-nginx.conf done 配置 systemd unit 文件，启动服务配置 kube-nginx systemd unit 文件： 12345678910111213141516171819202122cd /opt/k8s/workcat &gt; kube-nginx.service &lt;&lt;EOF[Unit]Description=kube-apiserver nginx proxyAfter=network.targetAfter=network-online.targetWants=network-online.target[Service]Type=forkingExecStartPre=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginx -tExecStart=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginxExecReload=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginx -s reloadPrivateTmp=trueRestart=alwaysRestartSec=5StartLimitInterval=0LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF 分发 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-nginx.service root@$&#123;node_ip&#125;:/etc/systemd/system/ done 启动 kube-nginx 服务： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-nginx &amp;&amp; systemctl restart kube-nginx&quot; done apiserver集群准备工作下载最新版本二进制文件12345cd /opt/k8s/workwget https://dl.k8s.io/v1.14.2/kubernetes-server-linux-amd64.tar.gztar -xzvf kubernetes-server-linux-amd64.tar.gzcd kubernetestar -xzvf kubernetes-src.tar.gz 将二进制文件拷贝到所有 master 节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kubernetes/server/bin/&#123;apiextensions-apiserver,cloud-controller-manager,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubeadm,kubectl,kubelet,mounter&#125; root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 创建 kubernetes 证书和私钥创建证书签名请求： 12345678910111213141516171819202122232425262728293031cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kubernetes-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;kubernetes&quot;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.6.101&quot;, &quot;192.168.6.102&quot;, &quot;$&#123;CLUSTER_KUBERNETES_SVC_IP&#125;&quot;, &quot;kubernetes&quot;, &quot;kubernetes.default&quot;, &quot;kubernetes.default.svc&quot;, &quot;kubernetes.default.svc.cluster&quot;, &quot;kubernetes.default.svc.cluster.local.&quot; ], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF hosts 字段指定授权使用该证书的 IP 和域名列表，这里列出了 master 节点 IP、kubernetes 服务的 IP 和域名； kubernetes 服务 IP 是 apiserver 自动创建的，一般是 --service-cluster-ip-range 参数指定的网段的第一个IP，后续可以通过下面命令获取： 123[root@node1 ~]# kubectl get svc kubernetesNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEkubernetes ClusterIP 10.254.0.1 &lt;none&gt; 443/TCP 24h 生成证书和私钥： 12345cfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetesls kubernetes*pem 将生成的证书和私钥文件拷贝到所有 master 节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /etc/kubernetes/cert&quot; scp kubernetes*.pem root@$&#123;node_ip&#125;:/etc/kubernetes/cert/ done 创建加密配置文件123456789101112131415cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; encryption-config.yaml &lt;&lt;EOFkind: EncryptionConfigapiVersion: v1resources: - resources: - secrets providers: - aescbc: keys: - name: key1 secret: $&#123;ENCRYPTION_KEY&#125; - identity: &#123;&#125;EOF 将加密配置文件拷贝到 master 节点的 /etc/kubernetes 目录下： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp encryption-config.yaml root@$&#123;node_ip&#125;:/etc/kubernetes/ done 创建审计策略文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; audit-policy.yaml &lt;&lt;EOFapiVersion: audit.k8s.io/v1beta1kind: Policyrules: # The following requests were manually identified as high-volume and low-risk, so drop them. - level: None resources: - group: &quot;&quot; resources: - endpoints - services - services/status users: - &apos;system:kube-proxy&apos; verbs: - watch - level: None resources: - group: &quot;&quot; resources: - nodes - nodes/status userGroups: - &apos;system:nodes&apos; verbs: - get - level: None namespaces: - kube-system resources: - group: &quot;&quot; resources: - endpoints users: - &apos;system:kube-controller-manager&apos; - &apos;system:kube-scheduler&apos; - &apos;system:serviceaccount:kube-system:endpoint-controller&apos; verbs: - get - update - level: None resources: - group: &quot;&quot; resources: - namespaces - namespaces/status - namespaces/finalize users: - &apos;system:apiserver&apos; verbs: - get # Don&apos;t log HPA fetching metrics. - level: None resources: - group: metrics.k8s.io users: - &apos;system:kube-controller-manager&apos; verbs: - get - list # Don&apos;t log these read-only URLs. - level: None nonResourceURLs: - &apos;/healthz*&apos; - /version - &apos;/swagger*&apos; # Don&apos;t log events requests. - level: None resources: - group: &quot;&quot; resources: - events # node and pod status calls from nodes are high-volume and can be large, don&apos;t log responses for expected updates from nodes - level: Request omitStages: - RequestReceived resources: - group: &quot;&quot; resources: - nodes/status - pods/status users: - kubelet - &apos;system:node-problem-detector&apos; - &apos;system:serviceaccount:kube-system:node-problem-detector&apos; verbs: - update - patch - level: Request omitStages: - RequestReceived resources: - group: &quot;&quot; resources: - nodes/status - pods/status userGroups: - &apos;system:nodes&apos; verbs: - update - patch # deletecollection calls can be large, don&apos;t log responses for expected namespace deletions - level: Request omitStages: - RequestReceived users: - &apos;system:serviceaccount:kube-system:namespace-controller&apos; verbs: - deletecollection # Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data, # so only log at the Metadata level. - level: Metadata omitStages: - RequestReceived resources: - group: &quot;&quot; resources: - secrets - configmaps - group: authentication.k8s.io resources: - tokenreviews # Get repsonses can be large; skip them. - level: Request omitStages: - RequestReceived resources: - group: &quot;&quot; - group: admissionregistration.k8s.io - group: apiextensions.k8s.io - group: apiregistration.k8s.io - group: apps - group: authentication.k8s.io - group: authorization.k8s.io - group: autoscaling - group: batch - group: certificates.k8s.io - group: extensions - group: metrics.k8s.io - group: networking.k8s.io - group: policy - group: rbac.authorization.k8s.io - group: scheduling.k8s.io - group: settings.k8s.io - group: storage.k8s.io verbs: - get - list - watch # Default level for known APIs - level: RequestResponse omitStages: - RequestReceived resources: - group: &quot;&quot; - group: admissionregistration.k8s.io - group: apiextensions.k8s.io - group: apiregistration.k8s.io - group: apps - group: authentication.k8s.io - group: authorization.k8s.io - group: autoscaling - group: batch - group: certificates.k8s.io - group: extensions - group: metrics.k8s.io - group: networking.k8s.io - group: policy - group: rbac.authorization.k8s.io - group: scheduling.k8s.io - group: settings.k8s.io - group: storage.k8s.io # Default level for all other requests. - level: Metadata omitStages: - RequestReceivedEOF 分发审计策略文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp audit-policy.yaml root@$&#123;node_ip&#125;:/etc/kubernetes/audit-policy.yaml done 创建后续访问 metrics-server 使用的证书创建证书签名请求: 12345678910111213141516171819cat &gt; proxy-client-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;aggregator&quot;, &quot;hosts&quot;: [], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF CN 名称为 aggregator，需要与 metrics-server 的 --requestheader-allowed-names 参数配置一致，否则访问会被 metrics-server 拒绝； 生成证书和私钥： 12345cfssl gencert -ca=/etc/kubernetes/cert/ca.pem \ -ca-key=/etc/kubernetes/cert/ca-key.pem \ -config=/etc/kubernetes/cert/ca-config.json \ -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-clientls proxy-client*.pem 将生成的证书和私钥文件拷贝到所有 master 节点： 123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp proxy-client*.pem root@$&#123;node_ip&#125;:/etc/kubernetes/cert/ done 创建 kube-apiserver systemd unit 模板文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; kube-apiserver.service.template &lt;&lt;EOF[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.target[Service]WorkingDirectory=$&#123;K8S_DIR&#125;/kube-apiserverExecStart=/opt/k8s/bin/kube-apiserver \\ --advertise-address=##NODE_IP## \\ --default-not-ready-toleration-seconds=360 \\ --default-unreachable-toleration-seconds=360 \\ --feature-gates=DynamicAuditing=true \\ --max-mutating-requests-inflight=2000 \\ --max-requests-inflight=4000 \\ --default-watch-cache-size=200 \\ --delete-collection-workers=2 \\ --encryption-provider-config=/etc/kubernetes/encryption-config.yaml \\ --etcd-cafile=/etc/kubernetes/cert/ca.pem \\ --etcd-certfile=/etc/kubernetes/cert/kubernetes.pem \\ --etcd-keyfile=/etc/kubernetes/cert/kubernetes-key.pem \\ --etcd-servers=$&#123;ETCD_ENDPOINTS&#125; \\ --bind-address=##NODE_IP## \\ --secure-port=6443 \\ --tls-cert-file=/etc/kubernetes/cert/kubernetes.pem \\ --tls-private-key-file=/etc/kubernetes/cert/kubernetes-key.pem \\ --insecure-port=0 \\ --audit-dynamic-configuration \\ --audit-log-maxage=15 \\ --audit-log-maxbackup=3 \\ --audit-log-maxsize=100 \\ --audit-log-mode=batch \\ --audit-log-truncate-enabled \\ --audit-log-batch-buffer-size=20000 \\ --audit-log-batch-max-size=2 \\ --audit-log-path=$&#123;K8S_DIR&#125;/kube-apiserver/audit.log \\ --audit-policy-file=/etc/kubernetes/audit-policy.yaml \\ --profiling \\ --anonymous-auth=false \\ --client-ca-file=/etc/kubernetes/cert/ca.pem \\ --enable-bootstrap-token-auth \\ --requestheader-allowed-names=&quot;&quot; \\ --requestheader-client-ca-file=/etc/kubernetes/cert/ca.pem \\ --requestheader-extra-headers-prefix=&quot;X-Remote-Extra-&quot; \\ --requestheader-group-headers=X-Remote-Group \\ --requestheader-username-headers=X-Remote-User \\ --service-account-key-file=/etc/kubernetes/cert/ca.pem \\ --authorization-mode=Node,RBAC \\ --runtime-config=api/all=true \\ --enable-admission-plugins=NodeRestriction \\ --allow-privileged=true \\ --apiserver-count=3 \\ --event-ttl=168h \\ --kubelet-certificate-authority=/etc/kubernetes/cert/ca.pem \\ --kubelet-client-certificate=/etc/kubernetes/cert/kubernetes.pem \\ --kubelet-client-key=/etc/kubernetes/cert/kubernetes-key.pem \\ --kubelet-https=true \\ --kubelet-timeout=10s \\ --proxy-client-cert-file=/etc/kubernetes/cert/proxy-client.pem \\ --proxy-client-key-file=/etc/kubernetes/cert/proxy-client-key.pem \\ --service-cluster-ip-range=$&#123;SERVICE_CIDR&#125; \\ --service-node-port-range=$&#123;NODE_PORT_RANGE&#125; \\ --logtostderr=true \\ --v=2Restart=on-failureRestartSec=10Type=notifyLimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF --advertise-address：apiserver 对外通告的 IP（kubernetes 服务后端节点 IP）； --default-*-toleration-seconds：设置节点异常相关的阈值； --max-*-requests-inflight：请求相关的最大阈值； --etcd-*：访问 etcd 的证书和 etcd 服务器地址； --experimental-encryption-provider-config：指定用于加密 etcd 中 secret 的配置； --bind-address： https 监听的 IP，不能为 127.0.0.1，否则外界不能访问它的安全端口 6443； --secret-port：https 监听端口； --insecure-port=0：关闭监听 http 非安全端口(8080)； --tls-*-file：指定 apiserver 使用的证书、私钥和 CA 文件； --audit-*：配置审计策略和审计日志文件相关的参数； --client-ca-file：验证 client (kue-controller-manager、kube-scheduler、kubelet、kube-proxy 等)请求所带的证书； --enable-bootstrap-token-auth：启用 kubelet bootstrap 的 token 认证； --requestheader-*：kube-apiserver 的 aggregator layer 相关的配置参数，proxy-client &amp; HPA 需要使用； --requestheader-client-ca-file：用于签名 --proxy-client-cert-file 和 --proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用； 如果 --requestheader-allowed-names 不为空，则--proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator; --service-account-key-file：签名 ServiceAccount Token 的公钥文件，kube-controller-manager 的 --service-account-private-key-file 指定私钥文件，两者配对使用； --runtime-config=api/all=true： 启用所有版本的 APIs，如 autoscaling/v2alpha1； --authorization-mode=Node,RBAC、--anonymous-auth=false： 开启 Node 和 RBAC 授权模式，拒绝未授权的请求； --enable-admission-plugins：启用一些默认关闭的 plugins； --allow-privileged：运行执行 privileged 权限的容器； --apiserver-count=3：指定 apiserver 实例的数量； --event-ttl：指定 events 的保存时间； --kubelet-*：如果指定，则使用 https 访问 kubelet APIs；需要为证书对应的用户(上面 kubernetes*.pem 证书的用户为 kubernetes) 用户定义 RBAC 规则，否则访问 kubelet API 时提示未授权； --proxy-client-*：apiserver 访问 metrics-server 使用的证书； --service-cluster-ip-range： 指定 Service Cluster IP 地址段； --service-node-port-range： 指定 NodePort 的端口范围； 如果 kube-apiserver 机器没有运行 kube-proxy，则还需要添加 --enable-aggregator-routing=true 参数； 关于 --requestheader-XXX 相关参数，参考： https://github.com/kubernetes-incubator/apiserver-builder/blob/master/docs/concepts/auth.md https://docs.bitnami.com/kubernetes/how-to/configure-autoscaling-custom-metrics/ 注意：requestheader-client-ca-file 指定的 CA 证书，必须具有 client auth and server auth； 为各节点创建和分发 kube-apiserver systemd unit 文件替换模板文件中的变量，为各节点生成 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 2; i++ )) do sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; kube-apiserver.service.template &gt; kube-apiserver-$&#123;NODE_IPS[i]&#125;.service donels kube-apiserver*.service NODE_NAMES 和 NODE_IPS 为相同长度的 bash 数组，分别为节点名称和对应的 IP； 分发生成的 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kube-apiserver-$&#123;node_ip&#125;.service root@$&#123;node_ip&#125;:/etc/systemd/system/kube-apiserver.service done 文件重命名为 kube-apiserver.service; 启动 kube-apiserver 服务1234567source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;K8S_DIR&#125;/kube-apiserver&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable kube-apiserver &amp;&amp; systemctl restart kube-apiserver&quot; done 启动服务前必须先创建工作目录； 检查 kube-apiserver 运行状态123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status kube-apiserver |grep &apos;Active:&apos;&quot; done 确保状态为 active (running) 打印 kube-apiserver 写入 etcd 的数据1234567source /opt/k8s/bin/environment.shETCDCTL_API=3 etcdctl \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; \ --cacert=/opt/k8s/work/ca.pem \ --cert=/opt/k8s/work/etcd.pem \ --key=/opt/k8s/work/etcd-key.pem \ get /registry/ --prefix --keys-only 授予 kube-apiserver 访问 kubelet API 的权限在执行 kubectl exec、run、logs 等命令时，apiserver 会将请求转发到 kubelet 的 https 端口。这里定义 RBAC 规则，授权 apiserver 使用的证书（kubernetes.pem）用户名（CN：kuberntes）访问 kubelet API 的权限： 1kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-flannel网络、kubectl工具]]></title>
    <url>%2Fposts%2F66ae7fg23.html</url>
    <content type="text"><![CDATA[flannel网络介绍Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。 flannel在k8s工作kubernetes 要求集群内各节点(包括 master 节点)能通过 Pod 网段互联互通。flannel 使用 vxlan 技术为各节点创建一个可以互通的 Pod 网络，使用的端口为 UDP 8472（需要开放该端口，如公有云 AWS 等）。 flanneld 第一次启动时，从 etcd 获取配置的 Pod 网段信息，为本节点分配一个未使用的地址段，然后创建 flannedl.1 网络接口（也可能是其它名称，如 flannel1 等）。 flannel 将分配给自己的 Pod 网段信息写入 /run/flannel/docker 文件，docker 后续使用这个文件中的环境变量设置 docker0 网桥，从而从这个地址段为本节点的所有 Pod 容器分配 IP。 部署下载和分发 flanneld 二进制文件从 flannel 的 release 页面 下载最新版本的安装包： 1234cd /opt/k8s/workmkdir flannelwget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gztar -xzvf flannel-v0.11.0-linux-amd64.tar.gz -C flannel 分发二进制文件到集群所有节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp flannel/&#123;flanneld,mk-docker-opts.sh&#125; root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 创建 flannel 证书和私钥flanneld 从 etcd 集群存取网段分配信息，而 etcd 集群启用了双向 x509 证书认证，所以需要为 flanneld 生成证书和私钥。 创建证书签名请求： 1234567891011121314151617181920cd /opt/k8s/workcat &gt; flanneld-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;flanneld&quot;, &quot;hosts&quot;: [], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF 该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空； 生成证书和私钥： 12345cfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneldls flanneld*pem 将生成的证书和私钥分发到所有节点（master 和 worker）： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /etc/flanneld/cert&quot; scp flanneld*.pem root@$&#123;node_ip&#125;:/etc/flanneld/cert done 在etcd 写入集群 Pod 网段信息注意：本步骤只需执行一次。 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shetcdctl \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; \ --ca-file=/opt/k8s/work/ca.pem \ --cert-file=/opt/k8s/work/flanneld.pem \ --key-file=/opt/k8s/work/flanneld-key.pem \ mk $&#123;FLANNEL_ETCD_PREFIX&#125;/config &apos;&#123;&quot;Network&quot;:&quot;&apos;$&#123;CLUSTER_CIDR&#125;&apos;&quot;, &quot;SubnetLen&quot;: 21, &quot;Backend&quot;: &#123;&quot;Type&quot;: &quot;vxlan&quot;&#125;&#125;&apos; flanneld 当前版本 (v0.11.0) 不支持 etcd v3，故使用 etcd v2 API 写入配置 key 和网段数据； 写入的 Pod 网段 ${CLUSTER_CIDR} 地址段（如 /16）必须小于 SubnetLen，必须与 kube-controller-manager 的 --cluster-cidr 参数值一致； 创建 flanneld 的 systemd123456789101112131415161718192021222324252627282930cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; flanneld.service &lt;&lt; EOF[Unit]Description=Flanneld overlay address etcd agentAfter=network.targetAfter=network-online.targetWants=network-online.targetAfter=etcd.serviceBefore=docker.service[Service]Type=notifyExecStart=/opt/k8s/bin/flanneld \\ -etcd-cafile=/etc/kubernetes/cert/ca.pem \\ -etcd-certfile=/etc/flanneld/cert/flanneld.pem \\ -etcd-keyfile=/etc/flanneld/cert/flanneld-key.pem \\ -etcd-endpoints=$&#123;ETCD_ENDPOINTS&#125; \\ -etcd-prefix=$&#123;FLANNEL_ETCD_PREFIX&#125; \\ -iface=$&#123;IFACE&#125; \\ -ip-masqExecStartPost=/opt/k8s/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/dockerRestart=alwaysRestartSec=5StartLimitInterval=0[Install]WantedBy=multi-user.targetRequiredBy=docker.serviceEOF mk-docker-opts.sh 脚本将分配给 flanneld 的 Pod 子网段信息写入 /run/flannel/docker 文件，后续 docker 启动时使用这个文件中的环境变量配置 docker0 网桥； flanneld 使用系统缺省路由所在的接口与其它节点通信，对于有多个网络接口（如内网和公网）的节点，可以用 -iface 参数指定通信接口; flanneld 运行时需要 root 权限； -ip-masq: flanneld 为访问 Pod 网络外的流量设置 SNAT 规则，同时将传递给 Docker 的变量 --ip-masq（/run/flannel/docker 文件中）设置为 false，这样 Docker 将不再创建 SNAT 规则； Docker 的 --ip-masq 为 true 时，创建的 SNAT 规则比较“暴力”：将所有本节点 Pod 发起的、访问非 docker0 接口的请求做 SNAT，这样访问其他节点 Pod 的请求来源 IP 会被设置为 flannel.1 接口的 IP，导致目的 Pod 看不到真实的来源 Pod IP。 flanneld 创建的 SNAT 规则比较温和，只对访问非 Pod 网段的请求做 SNAT。 分发 flanneld systemd unit1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp flanneld.service root@$&#123;node_ip&#125;:/etc/systemd/system/ done 启动 flanneld 服务123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld&quot; done 检查启动结果123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status flanneld|grep Active&quot; done 确保状态为 active (running) 检查分配给各 flanneld 的 Pod 网段信息查看集群 Pod 网段(/16)： 1234567source /opt/k8s/bin/environment.shetcdctl \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; \ --ca-file=/etc/kubernetes/cert/ca.pem \ --cert-file=/etc/flanneld/cert/flanneld.pem \ --key-file=/etc/flanneld/cert/flanneld-key.pem \ get $&#123;FLANNEL_ETCD_PREFIX&#125;/config 输出： {&quot;Network&quot;:&quot;172.30.0.0/16&quot;, &quot;SubnetLen&quot;: 21, &quot;Backend&quot;: {&quot;Type&quot;: &quot;vxlan&quot;}} 查看已分配的 Pod 子网段列表(/24): 1234567source /opt/k8s/bin/environment.shetcdctl \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; \ --ca-file=/etc/kubernetes/cert/ca.pem \ --cert-file=/etc/flanneld/cert/flanneld.pem \ --key-file=/etc/flanneld/cert/flanneld-key.pem \ ls $&#123;FLANNEL_ETCD_PREFIX&#125;/subnets 输出（结果视部署情况而定）： 12345678[root@node1 ~]# etcdctl \&gt; --endpoints=$&#123;ETCD_ENDPOINTS&#125; \&gt; --ca-file=/etc/kubernetes/cert/ca.pem \&gt; --cert-file=/etc/flanneld/cert/flanneld.pem \&gt; --key-file=/etc/flanneld/cert/flanneld-key.pem \&gt; ls $&#123;FLANNEL_ETCD_PREFIX&#125;/subnets/kubernetes/network/subnets/172.30.168.0-21/kubernetes/network/subnets/172.30.48.0-21 查看某一 Pod 网段对应的节点 IP 和 flannel 接口地址: 1234567source /opt/k8s/bin/environment.shetcdctl \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; \ --ca-file=/etc/kubernetes/cert/ca.pem \ --cert-file=/etc/flanneld/cert/flanneld.pem \ --key-file=/etc/flanneld/cert/flanneld-key.pem \ get $&#123;FLANNEL_ETCD_PREFIX&#125;/subnets/172.30.168.0-21 输出： 12345678[root@node1 ~]# etcdctl \&gt; --endpoints=$&#123;ETCD_ENDPOINTS&#125; \&gt; --ca-file=/etc/kubernetes/cert/ca.pem \&gt; --cert-file=/etc/flanneld/cert/flanneld.pem \&gt; --key-file=/etc/flanneld/cert/flanneld-key.pem \&gt; get $&#123;FLANNEL_ETCD_PREFIX&#125;/subnets/172.30.168.0-21&#123;&quot;PublicIP&quot;:&quot;192.168.6.101&quot;,&quot;BackendType&quot;:&quot;vxlan&quot;,&quot;BackendData&quot;:&#123;&quot;VtepMAC&quot;:&quot;62:58:f9:a2:16:73&quot;&#125;&#125;[root@node1 ~]# 验证各节点能通过 Pod 网段互通在各节点上部署 flannel 后，检查是否创建了 flannel 接口(名称可能为 flannel0、flannel.0、flannel.1 等)： 123456source /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh $&#123;node_ip&#125; &quot;/usr/sbin/ip addr show flannel.1|grep -w inet&quot; done 输出： 123456789[root@node1 ~]# for node_ip in $&#123;NODE_IPS[@]&#125;&gt; do&gt; echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot;&gt; ssh $&#123;node_ip&#125; &quot;/usr/sbin/ip addr show flannel.1|grep -w inet&quot;&gt; done&gt;&gt;&gt; 192.168.6.101 inet 172.30.168.0/32 scope global flannel.1&gt;&gt;&gt; 192.168.6.102 inet 172.30.48.0/32 scope global flannel.1 在各节点上 ping 所有 flannel 接口 IP，确保能通 kubectl下载和分发 kubectl 二进制文件下载和解压： 123cd /opt/k8s/workwget https://dl.k8s.io/v1.14.2/kubernetes-client-linux-amd64.tar.gztar -xzvf kubernetes-client-linux-amd64.tar.gz 分发到所有使用 kubectl 的节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp kubernetes/client/bin/kubectl root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 创建 admin 证书和私钥kubectl 与 apiserver https 安全端口通信，apiserver 对提供的证书进行认证和授权。 kubectl 作为集群的管理工具，需要被授予最高权限，这里创建具有最高权限的 admin 证书。 创建证书签名请求： 1234567891011121314151617181920cd /opt/k8s/workcat &gt; admin-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;admin&quot;, &quot;hosts&quot;: [], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;system:masters&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF O 为 system:masters，kube-apiserver 收到该证书后将请求的 Group 设置为 system:masters； 预定义的 ClusterRoleBinding cluster-admin 将 Group system:masters 与 Role cluster-admin 绑定，该 Role 授予所有 API的权限； 该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空； 生成证书和私钥： 12345cd /opt/k8s/workcfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes admin-csr.json | cfssljson -bare admin 创建 kubeconfig 文件kubeconfig 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书； 12345678910111213141516171819202122232425cd /opt/k8s/worksource /opt/k8s/bin/environment.sh# 设置集群参数kubectl config set-cluster kubernetes \ --certificate-authority=/opt/k8s/work/ca.pem \ --embed-certs=true \ --server=$&#123;KUBE_APISERVER&#125; \ --kubeconfig=kubectl.kubeconfig# 设置客户端认证参数kubectl config set-credentials admin \ --client-certificate=/opt/k8s/work/admin.pem \ --client-key=/opt/k8s/work/admin-key.pem \ --embed-certs=true \ --kubeconfig=kubectl.kubeconfig# 设置上下文参数kubectl config set-context kubernetes \ --cluster=kubernetes \ --user=admin \ --kubeconfig=kubectl.kubeconfig# 设置默认上下文kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig --certificate-authority：验证 kube-apiserver 证书的根证书； --client-certificate、--client-key：刚生成的 admin 证书和私钥，连接 kube-apiserver 时使用； --embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl.kubeconfig 文件中(不加时，写入的是证书文件路径，后续拷贝 kubeconfig 到其它机器时，还需要单独拷贝证书文件，不方便。)； 分发 kubeconfig 文件分发到所有使用 kubectl 命令的节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p ~/.kube&quot; scp kubectl.kubeconfig root@$&#123;node_ip&#125;:~/.kube/config done 保存的文件名为 ~/.kube/config；]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-etcd集群]]></title>
    <url>%2Fposts%2F7dqa4nb2.html</url>
    <content type="text"><![CDATA[简介ETCD 是一个高可用的分布式键值数据库，可用于服务发现。ETCD 采用 raft 一致性算法，基于 Go 语言实现。 1234567特点简单：安装配置使用简单，提供 HTTP API 安全：支持 SSL 证书 可靠：采用 raft 算法，实现分布式系统数据的可用性和一致性 kubernetes 使用 etcd 存储所有运行数据 下载和分发 etcd 二进制文件123cd /opt/k8s/workwget https://github.com/coreos/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gztar -xvf etcd-v3.3.13-linux-amd64.tar.gz 分发二进制文件到集群所有节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp etcd-v3.3.13-linux-amd64/etcd* root@$&#123;node_ip&#125;:/opt/k8s/bin ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done 创建 etcd 证书和私钥创建证书签名请求： 123456789101112131415161718192021222324cd /opt/k8s/workcat &gt; etcd-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;etcd&quot;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.6.101&quot;, &quot;192.168.6.102&quot; ], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF 生成证书和私钥： 123456cd /opt/k8s/workcfssl gencert -ca=/opt/k8s/work/ca.pem \ -ca-key=/opt/k8s/work/ca-key.pem \ -config=/opt/k8s/work/ca-config.json \ -profile=kubernetes etcd-csr.json | cfssljson -bare etcdls etcd*pem 分发生成的证书和私钥到各 etcd 节点： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /etc/etcd/cert&quot; scp etcd*.pem root@$&#123;node_ip&#125;:/etc/etcd/cert/ done 创建 etcd 的 systemd123456789101112131415161718192021222324252627282930313233343536373839404142434445cd /opt/k8s/worksource /opt/k8s/bin/environment.shcat &gt; etcd.service.template &lt;&lt;EOF[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.targetDocumentation=https://github.com/coreos[Service]Type=notifyWorkingDirectory=$&#123;ETCD_DATA_DIR&#125;ExecStart=/opt/k8s/bin/etcd \\ --data-dir=$&#123;ETCD_DATA_DIR&#125; \\ --wal-dir=$&#123;ETCD_WAL_DIR&#125; \\ --name=##NODE_NAME## \\ --cert-file=/etc/etcd/cert/etcd.pem \\ --key-file=/etc/etcd/cert/etcd-key.pem \\ --trusted-ca-file=/etc/kubernetes/cert/ca.pem \\ --peer-cert-file=/etc/etcd/cert/etcd.pem \\ --peer-key-file=/etc/etcd/cert/etcd-key.pem \\ --peer-trusted-ca-file=/etc/kubernetes/cert/ca.pem \\ --peer-client-cert-auth \\ --client-cert-auth \\ --listen-peer-urls=https://##NODE_IP##:2380 \\ --initial-advertise-peer-urls=https://##NODE_IP##:2380 \\ --listen-client-urls=https://##NODE_IP##:2379,http://127.0.0.1:2379 \\ --advertise-client-urls=https://##NODE_IP##:2379 \\ --initial-cluster-token=etcd-cluster-0 \\ --initial-cluster=$&#123;ETCD_NODES&#125; \\ --initial-cluster-state=new \\ --auto-compaction-mode=periodic \\ --auto-compaction-retention=1 \\ --max-request-bytes=33554432 \\ --quota-backend-bytes=6442450944 \\ --heartbeat-interval=250 \\ --election-timeout=2000Restart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.targetEOF WorkingDirectory、--data-dir：指定工作目录和数据目录为 ${ETCD_DATA_DIR}，需在启动服务前创建这个目录； --wal-dir：指定 wal 目录，为了提高性能，一般使用 SSD 或者和 --data-dir 不同的磁盘； --name：指定节点名称，当 --initial-cluster-state 值为 new 时，--name 的参数值必须位于 --initial-cluster 列表中； --cert-file、--key-file：etcd server 与 client 通信时使用的证书和私钥； --trusted-ca-file：签名 client 证书的 CA 证书，用于验证 client 证书； --peer-cert-file、--peer-key-file：etcd 与 peer 通信使用的证书和私钥； --peer-trusted-ca-file：签名 peer 证书的 CA 证书，用于验证 peer 证书； 替换模板文件中的变量，为各节点创建 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor (( i=0; i &lt; 2; i++ )) do sed -e &quot;s/##NODE_NAME##/$&#123;NODE_NAMES[i]&#125;/&quot; -e &quot;s/##NODE_IP##/$&#123;NODE_IPS[i]&#125;/&quot; etcd.service.template &gt; etcd-$&#123;NODE_IPS[i]&#125;.service donels *.service 分发生成的 systemd unit 文件： 1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp etcd-$&#123;node_ip&#125;.service root@$&#123;node_ip&#125;:/etc/systemd/system/etcd.service done 启动 etcd 服务12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p $&#123;ETCD_DATA_DIR&#125; $&#123;ETCD_WAL_DIR&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl restart etcd &quot; &amp; done 检查结果1234567cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;systemctl status etcd|grep Active&quot; done 确保状态为 active (running)，否则查看日志，确认原因： 1journalctl -u etcd 验证服务状态1234567891011cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ETCDCTL_API=3 /opt/k8s/bin/etcdctl \ --endpoints=https://$&#123;node_ip&#125;:2379 \ --cacert=/etc/kubernetes/cert/ca.pem \ --cert=/etc/etcd/cert/etcd.pem \ --key=/etc/etcd/cert/etcd-key.pem endpoint health done 结果显示12345678910111213[root@node1 ~]# for node_ip in $&#123;NODE_IPS[@]&#125;&gt; do&gt; echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot;&gt; ETCDCTL_API=3 /opt/k8s/bin/etcdctl \&gt; --endpoints=https://$&#123;node_ip&#125;:2379 \&gt; --cacert=/etc/kubernetes/cert/ca.pem \&gt; --cert=/etc/etcd/cert/etcd.pem \&gt; --key=/etc/etcd/cert/etcd-key.pem endpoint health&gt; done&gt;&gt;&gt; 192.168.6.101https://192.168.6.101:2379 is healthy: successfully committed proposal: took = 2.45561ms&gt;&gt;&gt; 192.168.6.102https://192.168.6.102:2379 is healthy: successfully committed proposal: took = 3.898134ms 查看当前的 leader123456source /opt/k8s/bin/environment.shETCDCTL_API=3 /opt/k8s/bin/etcdctl \ -w table --cacert=/etc/kubernetes/cert/ca.pem \ --cert=/etc/etcd/cert/etcd.pem \ --key=/etc/etcd/cert/etcd-key.pem \ --endpoints=$&#123;ETCD_ENDPOINTS&#125; endpoint status 结果为： 1234567891011[root@node1 ~]# ETCDCTL_API=3 /opt/k8s/bin/etcdctl \&gt; -w table --cacert=/etc/kubernetes/cert/ca.pem \&gt; --cert=/etc/etcd/cert/etcd.pem \&gt; --key=/etc/etcd/cert/etcd-key.pem \&gt; --endpoints=$&#123;ETCD_ENDPOINTS&#125; endpoint status+----------------------------+------------------+---------+---------+-----------+-----------+------------+| ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |+----------------------------+------------------+---------+---------+-----------+-----------+------------+| https://192.168.6.101:2379 | 77fff77a6e7d24c5 | 3.3.13 | 864 kB | true | 8 | 41721 || https://192.168.6.102:2379 | e82e7402173c61e | 3.3.13 | 872 kB | false | 8 | 41721 |+----------------------------+------------------+---------+---------+-----------+-----------+------------+ 可以看到6.101为leader]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-cfssl证书]]></title>
    <url>%2Fposts%2F8d664qf5.html</url>
    <content type="text"><![CDATA[k8s证书的三种方式 cfssl easyrsa openssl 本文使用cfssl签发证书 安装 cfssl 工具集123456789101112mkdir -p /opt/k8s/cert &amp;&amp; cd /opt/k8swget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64mv cfssl_linux-amd64 /opt/k8s/bin/cfsslwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64mv cfssljson_linux-amd64 /opt/k8s/bin/cfssljsonwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64mv cfssl-certinfo_linux-amd64 /opt/k8s/bin/cfssl-certinfochmod +x /opt/k8s/bin/*export PATH=/opt/k8s/bin:$PATH 创建根证书 (CA)CA 证书是集群所有节点共享的，只需要创建一个 CA 证书，后续创建的所有证书都由它签名。 创建配置文件CA 配置文件用于配置根证书的使用场景 (profile) 和具体参数 (usage，过期时间、服务端认证、客户端认证、加密等)，后续在签名其它证书时需要指定特定场景。 123456789101112131415161718192021cd /opt/k8s/workcat &gt; ca-config.json &lt;&lt;EOF&#123; &quot;signing&quot;: &#123; &quot;default&quot;: &#123; &quot;expiry&quot;: &quot;87600h&quot; &#125;, &quot;profiles&quot;: &#123; &quot;kubernetes&quot;: &#123; &quot;usages&quot;: [ &quot;signing&quot;, &quot;key encipherment&quot;, &quot;server auth&quot;, &quot;client auth&quot; ], &quot;expiry&quot;: &quot;87600h&quot; &#125; &#125; &#125;&#125;EOF signing：表示该证书可用于签名其它证书，生成的 ca.pem 证书中 CA=TRUE； server auth：表示 client 可以用该该证书对 server 提供的证书进行验证； client auth：表示 server 可以用该该证书对 client 提供的证书进行验证； 创建证书签名请求文件12345678910111213141516171819cd /opt/k8s/workcat &gt; ca-csr.json &lt;&lt;EOF&#123; &quot;CN&quot;: &quot;kubernetes&quot;, &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;BeiJing&quot;, &quot;L&quot;: &quot;BeiJing&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;4Paradigm&quot; &#125; ]&#125;EOF 生成 CA 证书和私钥12cd /opt/k8s/workcfssl gencert -initca ca-csr.json | cfssljson -bare ca 分发证书文件将生成的 CA 证书、秘钥文件、配置文件拷贝到所有节点的 /etc/kubernetes/cert 目录下： 12345678cd /opt/k8s/worksource /opt/k8s/bin/environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; ssh root@$&#123;node_ip&#125; &quot;mkdir -p /etc/kubernetes/cert&quot; scp ca*.pem ca-config.json root@$&#123;node_ip&#125;:/etc/kubernetes/cert done]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s1.14集群部署-系统初始化]]></title>
    <url>%2Fposts%2F9c775ab5.html</url>
    <content type="text"><![CDATA[K8s环境准备本次安装版本 Kubernetes 1.14.2 Docker 18.09.6-ce Etcd 3.3.13 Flanneld 0.11.0 机器123192.168.6.101 node1192.168.6.102 node2 其中node1，node2做master集群，也都是node节点 主机名123456hostnamectl set-hostname node1hostnamectl set-hostname node2cat &gt;&gt; /etc/hosts &lt;&lt;EOF192.168.6.101 node1192.168.6.102 node2EOF 免秘钥1234注意：在node1上操作即可ssh-keygen -t rsassh-copy-id root@node1ssh-copy-id root@node2 初始化安装依赖包以下操作均在所有机器操作 1yum install -y epel-release conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget unzip net-tools 关闭防火墙1234systemctl stop firewalldsystemctl disable firewalldiptables -F &amp;&amp; iptables -X &amp;&amp; iptables -F -t nat &amp;&amp; iptables -X -t natiptables -P FORWARD ACCEPT 关闭 swap 分区12swapoff -ased -i &apos;/ swap / s/^\(.*\)$/#\1/g&apos; /etc/fstab 关闭 SELinux12setenforce 0sed -i &apos;s/^SELINUX=.*/SELINUX=disabled/&apos; /etc/selinux/config 加载内核并优化12345678910111213141516171819modprobe ip_vs_rrmodprobe br_netfiltercat &gt; kubernetes.conf &lt;&lt;EOFnet.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它vm.overcommit_memory=1 # 不检查物理内存是否够用vm.panic_on_oom=0 # 开启 OOMfs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOFcp kubernetes.conf /etc/sysctl.d/kubernetes.confsysctl -p /etc/sysctl.d/kubernetes.conf ntp1ntpdate ntp1.aliyun.com 创建相关目录1mkdir -p /opt/k8s/&#123;bin,work&#125; /etc/&#123;kubernetes,etcd&#125;/cert 升级内核CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如： 高版本的 docker(1.13 以后) 启用了 3.10 kernel 实验支持的 kernel memory account 功能(无法关闭)，当节点压力大如频繁启动和停止容器时会导致 cgroup memory leak； 网络设备引用计数泄漏，会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”; 解决方案如下： 升级内核到 4.4.X 以上； 或者，手动编译内核，disable CONFIG_MEMCG_KMEM 特性； 或者，安装修复了该问题的 Docker 18.09.1 及以上的版本。但由于 kubelet 也会设置 kmem（它 vendor 了 runc），所以需要重新编译 kubelet 并指定 GOFLAGS=”-tags=nokmem”； 123git clone --branch v1.14.1 --single-branch --depth 1 https://github.com/kubernetes/kubernetescd kubernetesKUBE_GIT_VERSION=v1.14.1 ./build/run.sh make kubelet GOFLAGS=&quot;-tags=nokmem&quot; 这里采用升级内核的解决办法： 12345rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm# 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！yum --enablerepo=elrepo-kernel install -y kernel-lt# 设置开机从新内核启动grub2-set-default 0 安装内核源文件（可选，在升级完内核并重启机器后执行）: 12# yum erase kernel-headersyum --enablerepo=elrepo-kernel install kernel-lt-devel-$(uname -r) kernel-lt-headers-$(uname -r) 设置配置参数脚本脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768[root@node1 ~]# cat environment.sh#!/usr/bin/bash# 生成 EncryptionConfig 所需的加密 keyexport ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)# 集群各机器 IP 数组export NODE_IPS=(192.168.6.101 192.168.6.102)# 集群各 IP 对应的主机名数组export NODE_NAMES=(node1 node2)# etcd 集群服务地址列表export ETCD_ENDPOINTS=&quot;https://192.168.6.101:2379,https://192.168.6.102:2379&quot;# etcd 集群间通信的 IP 和端口export ETCD_NODES=&quot;node1=https://192.168.6.101:2380,node2=https://192.168.6.102:2380&quot;# kube-apiserver 的反向代理(kube-nginx)地址端口export KUBE_APISERVER=&quot;https://127.0.0.1:8443&quot;# 节点间互联网络接口名称export IFACE=&quot;ens160&quot;# etcd 数据目录export ETCD_DATA_DIR=&quot;/data/k8s/etcd/data&quot;# etcd WAL 目录，建议是 SSD 磁盘分区，或者和 ETCD_DATA_DIR 不同的磁盘分区export ETCD_WAL_DIR=&quot;/data/k8s/etcd/wal&quot;# k8s 各组件数据目录export K8S_DIR=&quot;/data/k8s/k8s&quot;# docker 数据目录export DOCKER_DIR=&quot;/data/k8s/docker&quot;## 以下参数一般不需要修改# TLS Bootstrapping 使用的 Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d &apos; &apos; 生成BOOTSTRAP_TOKEN=&quot;4d8a35f48da304e4433ba0bda5b8ffd1&quot;# 最好使用 当前未用的网段 来定义服务网段和 Pod 网段# 服务网段，部署前路由不可达，部署后集群内路由可达(kube-proxy 保证)SERVICE_CIDR=&quot;10.254.0.0/16&quot;# Pod 网段，建议 /16 段地址，部署前路由不可达，部署后集群内路由可达(flanneld 保证)CLUSTER_CIDR=&quot;172.30.0.0/16&quot;# 服务端口范围 (NodePort Range)export NODE_PORT_RANGE=&quot;30000-32767&quot;# flanneld 网络配置前缀export FLANNEL_ETCD_PREFIX=&quot;/kubernetes/network&quot;# kubernetes 服务 IP (一般是 SERVICE_CIDR 中第一个IP)export CLUSTER_KUBERNETES_SVC_IP=&quot;10.254.0.1&quot;# 集群 DNS 服务 IP (从 SERVICE_CIDR 中预分配)export CLUSTER_DNS_SVC_IP=&quot;10.254.0.2&quot;# 集群 DNS 域名（末尾不带点号）export CLUSTER_DNS_DOMAIN=&quot;cluster.local&quot;# 将二进制目录 /opt/k8s/bin 加到 PATH 中export PATH=/opt/k8s/bin:$PATH 分发到所有节点1234567source environment.shfor node_ip in $&#123;NODE_IPS[@]&#125; do echo &quot;&gt;&gt;&gt; $&#123;node_ip&#125;&quot; scp environment.sh root@$&#123;node_ip&#125;:/opt/k8s/bin/ ssh root@$&#123;node_ip&#125; &quot;chmod +x /opt/k8s/bin/*&quot; done]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[tomcat报SEVERE Error listenerStart]]></title>
    <url>%2Fposts%2F1b8b1cc1.html</url>
    <content type="text"><![CDATA[问题启动tomcat时报错，错误信息如下： 1234org.apache.catalina.core.StandardContext startInternalSEVERE: Error listenerStartorg.apache.catalina.core.StandardContext startInternalSEVERE: Context [/projectname] startup failed due to previous errors 方法在WEB-INF/classes目录下新建一个文件叫logging.properties，内容如下 123456handlers = org.apache.juli.FileHandler, java.util.logging.ConsoleHandler org.apache.juli.FileHandler.level = FINE org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs org.apache.juli.FileHandler.prefix = error-debug. java.util.logging.ConsoleHandler.level = FINE java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter 之后，重启tomcat查看日志，就可以看到是由于数据库连接或者jdk版本不兼容等原因导致的]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s强制删除]]></title>
    <url>%2Fposts%2F267edcc5.html</url>
    <content type="text"><![CDATA[可使用kubectl中的强制删除命令12345# 删除PODkubectl delete pod PODNAME --force --grace-period=0# 删除NAMESPACEkubectl delete namespace NAMESPACENAME --force --grace-period=0 有时候这种方法也删除不掉，可能是之前删除顺序有问题，没有删干净pod，就删除命名空间，导致删除不掉 直接从ETCD中删除源数据12345# 删除default namespace下的pod名为pod-to-be-deleted-0ETCDCTL_API=3 etcdctl del /registry/pods/default/pod-to-be-deleted-0# 删除需要删除的NAMESPACEetcdctl del /registry/namespaces/NAMESPACENAME 添加别名上面直接etcd删除，是证书直接能找到时候，如果证书配置方式不一样，就需要手动配一下！ 配置别名etcdctl3，添加证书等参数 1234567alias etcdctl3=&apos;docker run --rm -it \--net host -e ETCDCTL_API=3 \-v /etc/kubernetes:/etc/kubernetes k8s.gcr.io/etcd:3.3.10 etcdctl \--cert /etc/kubernetes/pki/etcd/peer.crt \--key /etc/kubernetes/pki/etcd/peer.key \--cacert /etc/kubernetes/pki/etcd/ca.crt \--endpoints https://192.168.3.101:2379,https://192.168.3.102:2379,https://192.168.3.103:2379&apos; 查询都有哪些daemonsets 1234tcdctl3 get /registry/daemonsets/ --prefix --keys-only/registry/daemonsets/default/testpod/registry/daemonsets/kube-system/calico-node/registry/daemonsets/kube-system/kube-proxy 与kubectl查看的结果一致 12345kubectl get daemonsets --all-namespaces NAMESPACE NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGEdefault testpod 3 3 3 3 3 &lt;none&gt; 91mkube-system calico-node 3 3 3 3 3 beta.kubernetes.io/os=linux 116mkube-system kube-proxy 3 3 3 3 3 &lt;none&gt; 122m 在etcd中查询default namespace中的pod 1234etcdctl3 get /registry/pods/default --prefix --keys-only /registry/pods/default/testpod-5wtb7/registry/pods/default/testpod-646d8/registry/pods/default/testpod-t7ps7 kubectl命令看到结果与etcd中一致 12345kubectl get pods -l app=fortestNAME READY STATUS RESTARTS AGEtestpod-5wtb7 1/1 Running 0 93mtestpod-646d8 1/1 Running 0 93mtestpod-t7ps7 1/1 Running 0 93m 在etcd中删除pod testpod-t7ps7 12etcdctl3 del /registry/pods/default/testpod-t7ps7 1 再次查看pod，发现testpod-t7ps7已经没有了 12345kubectl get podsNAME READY STATUS RESTARTS AGEtestpod-5wtb7 1/1 Running 0 96mtestpod-646d8 1/1 Running 0 96mtestpod-qczvt 1/1 Running 0 17s]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控url]]></title>
    <url>%2Fposts%2Fsfk013sk.html</url>
    <content type="text"><![CDATA[安装blackbox_exporterblackbox exporter是允许在HTTP, HTTPS, DNS, TCP and ICMP等协议的端点进行黑盒探测的采取器 官方github: https://github.com/prometheus/blackbox_exporter 12345wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.14.0/blackbox_exporter-0.14.0.linux-amd64.tar.gztar -zxvf blackbox_exporter-0.14.0.linux-amd64.tar.gzmv blackbox_exporter-0.14.0.linux-amd64 blackbox_exporternohup ./blackbox_exporter --config.file=/usr/local/blackbox_exporter/blackbox.yml &amp; prometheus配置1234567891011121314- job_name: &apos;blackbox&apos; metrics_path: /probe params: module: [http_2xx] # Look for a HTTP 200 response. static_configs: - targets: - http://192.168.7.107:3000/login/ relabel_configs: - source_labels: [__address__] target_label: __param_target - source_labels: [__param_target] target_label: instance - target_label: __address__ replacement: 192.168.7.107:9115 # The blackbox exporter&apos;s real hostname:port. grafana模板1https://grafana.com/grafana/dashboards/7587]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[fabric问题汇总]]></title>
    <url>%2Fposts%2F9c5623c7.html</url>
    <content type="text"><![CDATA[安装部署fabric测试项目安装问题12npm install probuf的时候报的错fabric依赖的sdk需要依赖c++的编译库，windows也许windows-tools，linux也需要支持的gc++,gc fabric-ca-server 存储私钥么1从mysql中不存储私钥 启动order遇到问题123Failed to initialize local MSP: the supplied identity is not valid: x509: certificate signed by unknown authority原因：实体的证书不是组织的证书签发的 docker-compose创建报错123[blocksProvider] DeliverBlocks -&gt; ERRO 039 [vaccinechannel] Got error &amp;&#123;FORBIDDEN&#125;解决办法： 需要在组织的msp中增加config.yaml 应用过程中问题Peer或者Orderer不通当不通的时候，先确认域名对应的IP是否正确，然后用telnet检查服务端口： 12ping peer0.org1.example.comtelnet peer0.org1.example.com 7051 如果不通，检查一下/etc/hosts中是否设置了域名和IP的对应关系是否正确。 如果还是不通，看一下系统有没有防火墙，7051端口有没有被防火墙禁止。 目标Peer上的Docker没有启动，导致合约实例化失败实例化合约时出错： 1./peer.sh chaincode instantiate -o orderer.example.com:7050 --tls true --cafile ./tlsca.example.com-cert.pem -C mychannel -n demo -v 0.0.1 -c &apos;&#123;&quot;Args&quot;:[&quot;init&quot;]&#125;&apos; -P &quot;OR(&apos;Org1MSP.member&apos;,&apos;Org2MSP.member&apos;)&quot; 错误如下： 1Error: Error endorsing chaincode: rpc error: code = Unknown desc = error starting container: Post http://unix.sock/containers/create?name=dev-peer1.org1.example.com-demo-0.0.1: dial unix /var/run/docker.sock: connect: no such file or directory 这是目标peer上的docker没有启动造成的。 genesisblock中admin证书错误导致orderer panic: x509: ECDSA verification failureorderer在启动的时候报错，直接panic： 123456789-----END CERTIFICATE-----2018-06-22 14:27:30.462 UTC [orderer/commmon/multichannel] newLedgerResources -&gt; CRIT 04d Error creating channelconfig bundle: initializing channelconfig failed: could not create channel Consortiums sub-group config: setting up the MSP manager failed: the supplied identity is not valid: x509: certificate signed by unknown authority (possibly because of &quot;x509: ECDSA verification failure&quot; while trying to verify candidate authority certificate &quot;ca.org1.example.com&quot;)panic: Error creating channelconfig bundle: initializing channelconfig failed: could not create channel Consortiums sub-group config: setting up the MSP manager failed: the supplied identity is not valid: x509: certificate signed by unknown authority (possibly because of &quot;x509: ECDSA verification failure&quot; while trying to verify candidate authority certificate &quot;ca.org1.example.com&quot;)goroutine 1 [running]:github.com/hyperledger/fabric/vendor/github.com/op/go-logging.(*Logger).Panicf(0xc4201ee120, 0x108668e, 0x27, 0xc42026af50, 0x1, 0x1) /w/workspace/fabric-binaries-x86_64/gopath/src/github.com/hyperledger/fabric/vendor/github.com/op/go-logging/logger.go:194 +0x134github.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).newLedgerResources(0xc42010a380, 0xc420138840, 0xc420138840) /w/workspace/fabric-binaries-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:253 +0x391 怀疑是创世块的原因，用下面的命令将创始块解开： 1./bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./genesisblock 发现比较奇怪的地方，Org1的Admin证书有两个： 123456789101112&quot;groups&quot;: &#123; &quot;Org1MSP&quot;: &#123; &quot;mod_policy&quot;: &quot;Admins&quot;, ... &quot;mod_policy&quot;: &quot;Admins&quot;, &quot;value&quot;: &#123; &quot;config&quot;: &#123; &quot;admins&quot;: [ &quot;LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWIrZ0F3SUJBZ0lRVXRxQWxlZENzWkErWStWdlZMUTZQakFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHhPREEyTWpFd05qVTNNekJhRncweU9EQTJNVGd3TmpVM016QmEKTUZzeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVI4d0hRWURWUVFEREJaQlpHMXBia0J2Y21jeExtVjRZVzF3YkdVdVkyOXRNRmt3CkV3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFRVp3cUhTVmxxRGNKNC9aVSt0YnB5RVBSTkl5ellMdTMKRGlRVUZOMklBZm5vVGhjTjRmY3Y4c2dsdXUxcnpJYUVHSFRFLzd0TC9EdEg2U3Fjd2tOQkthTk5NRXN3RGdZRApWUjBQQVFIL0JBUURBZ2VBTUF3R0ExVWRFd0VCL3dRQ01BQXdLd1lEVlIwakJDUXdJb0FnbkpjYVVLVFlseVJxCjcyckk4QXNINHNVZHB0ZytWY3IvbHkxZlp3QndrOEF3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQUsvRXh6NlYKRVYwUFl4M1BQbitPMysvODQrdXFEVkZ2Q1ZRUEVNcU1yV3dkQWlBNVVqTDcyb2drTHB3UUtGZ1ptdTJqRmtPWApSVnhpY0htLzZCR3htelFRc1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==&quot;, &quot;LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNGVENDQWJ5Z0F3SUJBZ0lRU3E0VzJ1SEVqbHdXZHdGY21WNUlpekFLQmdncWhrak9QUVFEQWpCek1Rc3cKQ1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0JNS1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeQpZVzVqYVhOamJ6RVpNQmNHQTFVRUNoTVFiM0puTVM1bGVHRnRjR3hsTG1OdmJURWNNQm9HQTFVRUF4TVRZMkV1CmIzSm5NUzVsZUdGdGNHeGxMbU52YlRBZUZ3MHhPREEyTWpFd056VXdNVEZhRncweU9EQTJNVGd3TnpVd01URmEKTUZneEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVApZVzRnUm5KaGJtTnBjMk52TVJ3d0dnWURWUVFERXhOallTNXZjbWN4TG1WNFlXMXdiR1V1WTI5dE1Ga3dFd1lICktvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVxNHl6K0tqSTR2ZmtObzQ0bWp0Q25HQ2cwLzA3L2Y5VW1sZlEKMlpSZWtHN2lyVm1QY0N6YnRVVEcvTFJjbndVemgyaFMvZkg5cGxvZEM4a1pwSlpXQzZOTk1Fc3dEZ1lEVlIwUApBUUgvQkFRREFnZUFNQXdHQTFVZEV3RUIvd1FDTUFBd0t3WURWUjBqQkNRd0lvQWdPc1NNQ2VqcnBOMnBhNEZSCnBOMVE2eXJkVHJleXNGY0Q1Ym9TcVNzSnFLNHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdCQWo1Q3l2cEFhU0kKaTh4anpVVHZxbUt5dmxSOFFPeExBUTAvVi9jRGpTNENJRVg3V1lnZzYwTFUwTy9LNEpmVVpiQmoyNHRBbTkxcgpkQmczN21IZHZVcSsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=&quot; ], ... 将上面的两大行字符串分别用base64解码得到证书，然后用openssl命令查看： 12echo &quot;LS0tLS1CRUdJTiBDRVJUSU....tLS0tCg==&quot; |base64 -D &gt;a.certopenssl x509 -in a.cert -text 第一个证书正确： 123... Subject: C=US, ST=California, L=San Francisco, CN=Admin@org1.example.com... 查看第二行： 12echo &quot;LS0tLS1CRUdJTi....tLS0tLQo=&quot; |base64 -D &gt;b.certopenssl x509 -in b.cert -text 发现第二个证书是CA证书，不是用户证书！ 1Subject: C=US, ST=California, L=San Francisco, CN=ca.org1.example.com 检查生成genesisblock时使用的configtx.yaml文件，发现configtx.yaml中配置的msp目录： 1MSPDir: ./certs/peerOrganizations/org1.example.com/msp msp的admincerts子目录中，多出了一个ca证书： 12$ ls ./certs/peerOrganizations/org1.example.com/msp/admincerts/Admin@org1.example.com-cert.pem ca.org1.example.com-cert.pem 把多出的ca证书删除。 残留数据导致orderer启动失败启动orderer的时候报错，orderer直接panic： 122018-06-21 11:01:47.892 CST [orderer/commmon/multichannel] newLedgerResources -&gt; CRIT 052 Error creating channelconfig bundle: initializing channelconfig failed: could not create channel Orderer sub-group config: setting up the MSP manager failed: the supplied identity is not valid: x509: certificate signed by unknown authority (possibly because of &quot;x509: ECDSA verification failure&quot; while trying to verify candidate authority certificate &quot;ca.example.com&quot;)panic: Error creating channelconfig bundle: initializing channelconfig failed: could not create channel Orderer sub-group config: setting up the MSP manager failed: the supplied identity is not valid: x509: certificate signed by unknown authority (possibly because of &quot;x509: ECDSA verification failure&quot; while trying to verify candidate authority certificate &quot;ca.example.com&quot;) 排查发现，部署orderer的机器上以前部署过orderer，并且orderer.yaml中配置的数据路径/opt/app/fabric/orderer/data中残留了以前的数据。 将/opt/app/fabric/orderer/data中的文件都删除后，问题解决。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx基础整理]]></title>
    <url>%2Fposts%2F8d1c645b.html</url>
    <content type="text"><![CDATA[安装安装依赖 prce(重定向支持)和openssl(https支持，如果不需要https可以不安装。) 123yum install -y pcre-devel yum -y install gcc make gcc-c++ wgetyum -y install openssl openssl-devel 下载nginx的所有版本在这里 123456789#创建存放源码包的目录[root@nginx ~]# mkdir tools[root@nginx ~]# cd tools/ #下载Nginx源码包[root@nginx tools]# wget http://nginx.org/download/nginx-1.14.2.tar.gz[root@nginx tools]# lsnginx-1.14.2.tar.gz #解压Nginx源码包[root@nginx tools]# tar -xf nginx-1.14.2.tar.gz 编译安装然后进入目录编译安装 123 #创建安装的目录[root@nginx nginx-1.14.2]# mkdir -p /application/nginx[root@nginx nginx-1.14.2]# ./configure --prefix=/application/nginx 如果没有error信息，就可以执行下边的安装了： 12makemake install nginx测试运行下面命令会出现两个结果，一般情况nginx会安装在/usr/local/nginx目录中 12345cd /usr/local/nginx/sbin/./nginx -t# nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok# nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful 设置全局nginx命令1vi ~/.bash_profile 将下面内容添加到 ~/.bash_profile 文件中 12PATH=$PATH:$HOME/bin:/usr/local/nginx/sbin/export PATH 运行命令 source ~/.bash_profile 让配置立即生效。你就可以全局运行 nginx 命令了。 开机自启动开机自启动方法一： 编辑 vi /lib/systemd/system/nginx.service 文件，没有创建一个 touch nginx.service 然后将如下内容根据具体情况进行修改后，添加到nginx.service文件中： 12345678910111213141516[Unit]Description=nginxAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/var/run/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target [Unit]:服务的说明 Description:描述服务 After:描述服务类别 [Service]服务运行参数的设置 Type=forking是后台运行的形式 ExecStart为服务的具体运行命令 ExecReload为重启命令 ExecStop为停止命令 PrivateTmp=True表示给服务分配独立的临时空间 注意：[Service]的启动、重启、停止命令全部要求使用绝对路径。 [Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3。 保存退出。 设置开机启动，使配置生效： 1234567891011121314# 启动nginx服务systemctl start nginx.service# 停止开机自启动systemctl disable nginx.service# 查看服务当前状态systemctl status nginx.service# 查看所有已启动的服务systemctl list-units --type=service# 重新启动服务systemctl restart nginx.service# 设置开机自启动systemctl enable nginx.service# 输出下面内容表示成功了Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service. 123456789systemctl is-enabled servicename.service # 查询服务是否开机启动systemctl enable *.service # 开机运行服务systemctl disable *.service # 取消开机运行systemctl start *.service # 启动服务systemctl stop *.service # 停止服务systemctl restart *.service # 重启服务systemctl reload *.service # 重新加载服务配置文件systemctl status *.service # 查询服务运行状态systemctl --failed # 显示启动失败的服务 注：*代表某个服务的名字，如http的服务名为httpd 开机自启动方法二： 1234vi /etc/rc.local# 在 rc.local 文件中，添加下面这条命令/usr/local/nginx/sbin/nginx start 如果开机后发现自启动脚本没有执行，你要去确认一下rc.local这个文件的访问权限是否是可执行的，因为rc.local默认是不可执行的。修改rc.local访问权限，增加可执行权限： 12# /etc/rc.local是/etc/rc.d/rc.local的软连接，chmod +x /etc/rc.d/rc.local 参数说明 参数 说明 –prefix=&lt;path&gt; Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。 –sbin-path=&lt;path&gt; Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为&lt;prefix&gt;/sbin/nginx。 –conf-path=&lt;path&gt; 在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为&lt;prefix&gt;/conf/nginx.conf。 –pid-path=&lt;path&gt; 在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 &lt;prefix&gt;/logs/nginx.pid。 –lock-path=&lt;path&gt; nginx.lock文件的路径。 –error-log-path=&lt;path&gt; 在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 &lt;prefix&gt;/- logs/error.log。 –http-log-path=&lt;path&gt; 在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 &lt;prefix&gt;/- logs/access.log。 –user=&lt;user&gt; 在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。 –group=&lt;group&gt; 在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。 –builddir=DIR 指定编译的目录 –with-rtsig_module 启用 rtsig 模块 –with-select_module –without-select_module 允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式 –with-poll_module –without-poll_module Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure. –with-http_ssl_module Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl –with-http_realip_module 启用 ngx_http_realip_module –with-http_addition_module 启用 ngx_http_addition_module –with-http_sub_module 启用 ngx_http_sub_module –with-http_dav_module 启用 ngx_http_dav_module –with-http_flv_module 启用 ngx_http_flv_module –with-http_stub_status_module 启用 “server status” 页 –without-http_charset_module 禁用 ngx_http_charset_module –without-http_gzip_module 禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。 –without-http_ssi_module 禁用 ngx_http_ssi_module –without-http_userid_module 禁用 ngx_http_userid_module –without-http_access_module 禁用 ngx_http_access_module –without-http_auth_basic_module 禁用 ngx_http_auth_basic_module –without-http_autoindex_module 禁用 ngx_http_autoindex_module –without-http_geo_module 禁用 ngx_http_geo_module –without-http_map_module 禁用 ngx_http_map_module –without-http_referer_module 禁用 ngx_http_referer_module –without-http_rewrite_module 禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。 –without-http_proxy_module 禁用 ngx_http_proxy_module –without-http_fastcgi_module 禁用 ngx_http_fastcgi_module –without-http_memcached_module 禁用 ngx_http_memcached_module –without-http_limit_zone_module 禁用 ngx_http_limit_zone_module –without-http_empty_gif_module 禁用 ngx_http_empty_gif_module –without-http_browser_module 禁用 ngx_http_browser_module –without-http_upstream_ip_hash_module 禁用 ngx_http_upstream_ip_hash_module –with-http_perl_module 启用 ngx_http_perl_module –with-perl_modules_path=PATH 指定 perl 模块的路径 –with-perl=PATH 指定 perl 执行文件的路径 –http-log-path=PATH Set path to the http access log –http-client-body-temp-path=PATH Set path to the http client request body temporary files –http-proxy-temp-path=PATH Set path to the http proxy temporary files –http-fastcgi-temp-path=PATH Set path to the http fastcgi temporary files –without-http 禁用 HTTP server –with-mail 启用 IMAP4/POP3/SMTP 代理模块 –with-mail_ssl_module 启用 ngx_mail_ssl_module –with-cc=PATH 指定 C 编译器的路径 –with-cpp=PATH 指定 C 预处理器的路径 –with-cc-opt=OPTIONS Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate –with-cc-opt=”-I /usr/local/include”. If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: –with-cc-opt=”-D FD_SETSIZE=2048”. –with-ld-opt=OPTIONS Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate –with-ld-opt=”-L /usr/local/lib”. –with-cpu-opt=CPU 为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64 –without-pcre 禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 “location” 配置指令中的正则表达式也需要 PCRE 。 –with-pcre=DIR 指定 PCRE 库的源代码的路径。 –with-pcre-opt=OPTIONS Set additional options for PCRE building. –with-md5=DIR Set path to md5 library sources. –with-md5-opt=OPTIONS Set additional options for md5 building. –with-md5-asm Use md5 assembler sources. –with-sha1=DIR Set path to sha1 library sources. –with-sha1-opt=OPTIONS Set additional options for sha1 building. –with-sha1-asm Use sha1 assembler sources. –with-zlib=DIR Set path to zlib library sources. –with-zlib-opt=OPTIONS Set additional options for zlib building. –with-zlib-asm=CPU Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro –with-openssl=DIR Set path to OpenSSL library sources –with-openssl-opt=OPTIONS Set additional options for OpenSSL building –with-debug 启用调试日志 –add-module=PATH Add in a third-party module found in directory PATH 配置在Centos 默认配置文件在 /usr/local/nginx-1.5.1/conf/nginx.conf 我们要在这里配置一些文件。nginx.conf是主配置文件，由若干个部分组成，每个大括号{}表示一个部分。每一行指令都由分号结束;，标志着一行的结束。 常用正则 正则 说明 正则 说明 . 匹配除换行符以外的任意字符 $ 匹配字符串的结束 ? 重复0次或1次 {n} 重复n次 + 重复1次或更多次 {n,} 重复n次或更多次 * 重复0次或更多次 [c] 匹配单个字符c \d 匹配数字 [a-z] 匹配a-z小写字母的任意一个 ^ 匹配字符串的开始 - - 全局变量 变量 说明 变量 说明 $args 这个变量等于请求行中的参数，同$query_string $remote_port 客户端的端口。 $content_length 请求头中的Content-length字段。 $remote_user 已经经过Auth Basic Module验证的用户名。 $content_type 请求头中的Content-Type字段。 $request_filename 当前请求的文件路径，由root或alias指令与URI请求生成。 $document_root 当前请求在root指令中指定的值。 $scheme HTTP方法（如http，https）。 $host 请求主机头字段，否则为服务器名称。 $server_protocol 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。 $http_user_agent 客户端agent信息 $server_addr 服务器地址，在完成一次系统调用后可以确定这个值。 $http_cookie 客户端cookie信息 $server_name 服务器名称。 $limit_rate 这个变量可以限制连接速率。 $server_port 请求到达服务器的端口号。 $request_method 客户端请求的动作，通常为GET或POST。 $request_uri 包含请求参数的原始URI，不包含主机名，如：/foo/bar.php?arg=baz。 $remote_addr 客户端的IP地址。 $uri 不带请求参数的当前URI，$uri不包含主机名，如/foo/bar.html。 $document_uri 与$uri相同。 - - 例如请求：http://localhost:3000/test1/test2/test.php $host：localhost$server_port：3000$request_uri：/test1/test2/test.php$document_uri：/test1/test2/test.php$document_root：/var/www/html$request_filename：/var/www/html/test1/test2/test.php 符号参考 符号 说明 符号 说明 符号 说明 k,K 千字节 m,M 兆字节 ms 毫秒 s 秒 m 分钟 h 小时 d 日 w 周 M 一个月, 30天 例如，”8k”，”1m” 代表字节数计量。例如，”1h 30m”，”1y 6M”。代表 “1小时 30分”，”1年零6个月”。 配置文件nginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 nginx 安装目录下的 conf 目录下。 指令由 nginx 的各个模块提供，不同的模块会提供不同的指令来实现配置。 指令除了 Key-Value 的形式，还有作用域指令。 nginx.conf 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。 下面的这些上下文指令是用的比较多： Directive Description Contains Directive main nginx 在运行时与具体业务功能（比如 http 服务或者 email 服务代理）无关的一些参数，比如工作进程数，运行的身份等。 user, worker_processes, error_log, events, http, mail http 与提供 http 服务相关的一些配置参数。例如：是否使用 keepalive 啊，是否使用 gzip 进行压缩等。 server server http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server. 每个 server 通过监听的地址来区分。 listen, server_name, access_log, location, protocol, proxy, smtp_auth, xclient location http 服务中，某些特定的 URL 对应的一系列配置项。 index, root mail 实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。 server, http, imap_capabilities include 以便增强配置文件的可读性，使得部分配置文件可以重新使用。 - valid_referers 用来校验Http请求头Referer是否有效。 - try_files 用在server部分，不过最常见的还是用在location部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。 - if 当在location块中使用if指令，在某些情况下它并不按照预期运行，一般来说避免使用if指令。 - 例如我们再 nginx.conf 里面引用两个配置 vhost/example.com.conf 和 vhost/gitlab.com.conf 它们都被放在一个我自己新建的目录 vhost 下面。nginx.conf 配置如下： 12345678910111213141516171819202122232425262728293031323334353637worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; include vhost/example.com.conf; include vhost/gitlab.com.conf;&#125; 简单的配置: example.com.conf 1234567server &#123; #侦听的80端口 listen 80; server_name baidu.com app.baidu.com; # 这里指定域名 index index.html index.htm; # 这里指定默认入口页面 root /home/www/app.baidu.com; # 这里指定目录&#125; 内置预定义变量Nginx提供了许多预定义的变量，也可以通过使用set来设置变量。你可以在if中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，更多详见 变量名称 值 $args_name 在请求中的name参数 $args 所有请求参数 $query_string $args的别名 $content_length 请求头Content-Length的值 $content_type 请求头Content-Type的值 $host 如果当前有Host，则为请求头Host的值；如果没有这个头，那么该值等于匹配该请求的server_name的值 $remote_addr 客户端的IP地址 $request 完整的请求，从客户端收到，包括Http请求方法、URI、Http协议、头、请求体 $request_uri 完整请求的URI，从客户端来的请求，包括参数 $scheme 当前请求的协议 $uri 当前请求的标准化URI 反向代理反向代理是一个Web服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子： 123456789101112server &#123; listen 80; server_name localhost; client_max_body_size 1024M; # 允许客户端请求的最大单文件字节数 location / &#123; proxy_pass http://localhost:8080; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-For $remote_addr; # HTTP的请求端真实的IP proxy_set_header X-Forwarded-Proto $scheme; # 为了正确地识别实际用户发出的协议是 http 还是 https &#125;&#125; 复杂的配置: gitlab.com.conf。 1234567891011121314151617181920server &#123; #侦听的80端口 listen 80; server_name git.example.cn; location / &#123; proxy_pass http://localhost:3000; #以下是一些反向代理的配置可删除 proxy_redirect off; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数 proxy_connect_timeout 300; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 300; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 300; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） &#125;&#125; 代理到上游服务器的配置中，最重要的是proxy_pass指令。以下是代理模块中的一些常用指令： 指令 说明 proxy_connect_timeout Nginx从接受请求至连接到上游服务器的最长等待时间 proxy_send_timeout 后端服务器数据回传时间(代理发送超时) proxy_read_timeout 连接成功后，后端服务器响应时间(代理接收超时) proxy_cookie_domain 替代从上游服务器来的Set-Cookie头的domain属性 proxy_cookie_path 替代从上游服务器来的Set-Cookie头的path属性 proxy_buffer_size 设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers proxy_buffers缓冲区，网页平均在多少k以下 proxy_set_header 重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现 proxy_ignore_headers 这个指令禁止处理来自代理服务器的应答。 proxy_intercept_errors 使nginx阻止HTTP应答代码为400或者更高的应答。 负载均衡upstream指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为down。 123456789101112131415161718192021222324252627282930313233upstream gitlab &#123; ip_hash; # upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。 server 192.168.122.11:8081 ; server 127.0.0.1:82 weight=3; server 127.0.0.1:83 weight=3 down; server 127.0.0.1:84 weight=3; max_fails=3 fail_timeout=20s; server 127.0.0.1:85 weight=4;; keepalive 32;&#125;server &#123; #侦听的80端口 listen 80; server_name git.example.cn; location / &#123; proxy_pass http://gitlab; #在这里设置一个代理，和upstream的名字一样 #以下是一些反向代理的配置可删除 proxy_redirect off; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数 proxy_connect_timeout 300; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 300; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 300; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k;# 缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 &#125;&#125; 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 负载均衡： upstream模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。 轮询： 默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；IP哈希： 通过ip_hash指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；最少连接数： 通过least_conn指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给server配置weight权重来说明，该算法将考虑到不同服务器的加权最少连接数。 RR简单配置 ，这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 http://localhost 的时候，也不会有问题，会默认跳转到http://localhost:8080具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置 1234567891011121314upstream test &#123; server localhost:8080; server localhost:8081;&#125;server &#123; listen 81; server_name localhost; client_max_body_size 1024M; location / &#123; proxy_pass http://test; proxy_set_header Host $host:$server_port; &#125;&#125; 负载均衡的核心代码为 1234upstream test &#123; server localhost:8080; server localhost:8081;&#125; 权重指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如 1234upstream test &#123; server localhost:8080 weight=9; server localhost:8081 weight=1;&#125; 那么10次一般只会有1次会访问到8081，而有9次会访问到8080 ip_hash上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 12345upstream test &#123; ip_hash; server localhost:8080; server localhost:8081;&#125; fair这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。 12345upstream backend &#123; fair; server localhost:8080; server localhost:8081;&#125; url_hash这是个第三方模块，按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法 123456upstream backend &#123; hash $request_uri; hash_method crc32; server localhost:8080; server localhost:8081;&#125; 以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过fair和url_hash需要安装第三方模块才能使用 server指令可选参数： weight：设置一个服务器的访问权重，数值越高，收到的请求也越多； fail_timeout：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为down状态； max_fails：设置在fail_timeout时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为down; down：标记一个服务器不再接受任何请求； backup：一旦其他服务器宕机，那么有该标记的机器将会接收请求。 keepalive指令： Nginx服务器将会为每一个worker进行保持同上游服务器的连接。 屏蔽ip在nginx的配置文件nginx.conf中加入如下配置，可以放到http, server, location, limit_except语句块，需要注意相对路径，本例当中nginx.conf，blocksip.conf在同一个目录中。 1include blockip.conf; 在blockip.conf里面输入内容，如： 1234567891011121314deny 165.91.122.67;deny IP; # 屏蔽单个ip访问allow IP; # 允许单个ip访问deny all; # 屏蔽所有ip访问allow all; # 允许所有ip访问deny 123.0.0.0/8 # 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令deny 124.45.0.0/16 # 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令deny 123.45.6.0/24 # 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令# 如果你想实现这样的应用，除了几个IP外，其他全部拒绝allow 1.1.1.1; allow 1.1.1.2;deny all; 第三方模块安装方法1./configure --prefix=/你的安装目录 --add-module=/第三方模块目录 重定向 permanent 永久性重定向。请求日志中的状态码为301 redirect 临时重定向。请求日志中的状态码为302 重定向整个网站1234server &#123; server_name old-site.com return 301 $scheme://new-site.com$request_uri;&#125; 重定向单页12345server &#123; location = /oldpage.html &#123; return 301 http://example.org/newpage.html; &#125;&#125; 重定向整个子路径123location /old-site &#123; rewrite ^/old-site/(.*) http://example.org/new-site/$1 permanent;&#125; 性能内容缓存允许浏览器基本上永久地缓存静态内容。 Nginx将为您设置Expires和Cache-Control头信息。 1234location /static &#123; root /data; expires max;&#125; 如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用-1。 1234location = /empty.gif &#123; empty_gif; expires -1;&#125; Gzip压缩123456789101112131415gzip on;gzip_buffers 16 8k;gzip_comp_level 6;gzip_http_version 1.1;gzip_min_length 256;gzip_proxied any;gzip_vary on;gzip_types text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml text/javascript application/javascript application/x-javascript text/x-json application/json application/x-web-app-manifest+json text/css text/plain text/x-component font/opentype application/x-font-ttf application/vnd.ms-fontobject image/x-icon;gzip_disable &quot;msie6&quot;; 打开文件缓存1234open_file_cache max=1000 inactive=20s;open_file_cache_valid 30s;open_file_cache_min_uses 2;open_file_cache_errors on; SSL缓存12ssl_session_cache shared:SSL:10m;ssl_session_timeout 10m; 上游Keepalive123456789101112upstream backend &#123; server 127.0.0.1:8080; keepalive 32;&#125;server &#123; ... location /api/ &#123; proxy_pass http://backend; proxy_http_version 1.1; proxy_set_header Connection &quot;&quot;; &#125;&#125; 监控使用ngxtop实时解析nginx访问日志，并且将处理结果输出到终端，功能类似于系统命令top。所有示例都读取nginx配置文件的访问日志位置和格式。如果要指定访问日志文件和/或日志格式，请使用-f和-a选项。 注意：在nginx配置中/usr/local/nginx/conf/nginx.conf日志文件必须是绝对路径。 12345678910111213141516171819202122# 安装 ngxtoppip install ngxtop# 实时状态ngxtop# 状态为404的前10个请求的路径：ngxtop top request_path --filter &apos;status == 404&apos;# 发送总字节数最多的前10个请求ngxtop --order-by &apos;avg(bytes_sent) * count&apos;# 排名前十位的IP，例如，谁攻击你最多ngxtop --group-by remote_addr# 打印具有4xx或5xx状态的请求，以及status和http refererngxtop -i &apos;status &gt;= 400&apos; print request status http_referer# 由200个请求路径响应发送的平均正文字节以&apos;foo&apos;开始：ngxtop avg bytes_sent --filter &apos;status == 200 and request_path.startswith(&quot;foo&quot;)&apos;# 使用“common”日志格式从远程机器分析apache访问日志ssh remote tail -f /var/log/apache2/access.log | ngxtop -f common 常见使用场景跨域问题在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加add_headers来支持cors跨域。配置如下： 123456789101112131415server &#123; listen 80; server_name api.xxx.com; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,HEAD&apos;; location / &#123; proxy_pass http://127.0.0.1:3000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; &#125; &#125; 上面更改头信息，还有一种，使用 rewrite 指令重定向URI来解决跨域问题。 1234567891011121314151617181920212223242526272829303132333435363738upstream test &#123; server 127.0.0.1:8080; server localhost:8081;&#125;server &#123; listen 80; server_name api.xxx.com; location / &#123; root html; #去请求../html文件夹里的文件 index index.html index.htm; #首页响应地址 &#125; # 用于拦截请求，匹配任何以 /api/开头的地址， # 匹配符合以后，停止往下搜索正则。 location ^~/api/&#123; # 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用， # 例如www.a.com/proxy/api/msg?meth=1&amp;par=2重写，只对/proxy/api/msg重写。 # rewrite后面的参数是一个简单的正则 ^/api/(.*)$， # $1代表正则中的第一个()，$2代表第二个()的值，以此类推。 rewrite ^/api/(.*)$ /$1 break; # 把请求代理到其他主机 # 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下 # 如果你的请求地址是他 http://server/html/test.jsp # 配置一： http://www.b.com/ 后面有“/” # 将反向代理成 http://www.b.com/html/test.jsp 访问 # 配置一： http://www.b.com 后面没有有“/” # 将反向代理成 http://www.b.com/test.jsp 访问 proxy_pass http://test; # 如果 proxy_pass URL 是 http://a.xx.com/platform/ 这种情况 # proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。 proxy_cookie_path /platfrom/ /; # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header # 设置 Cookie 头通过 proxy_pass_header Set-Cookie; &#125; &#125; 跳转到带www的域上面123456789101112131415server &#123; listen 80; # 配置正常的带www的域名 server_name www.wangchujiang.com; root /home/www/wabg/download; location / &#123; try_files $uri $uri/ /index.html =404; &#125;&#125;server &#123; # 这个要放到下面， # 将不带www的 wangchujiang.com 永久性重定向到 https://www.wangchujiang.com server_name wangchujiang.com; rewrite ^(.*) https://www.wangchujiang.com$1 permanent;&#125; 代理转发12345678910111213141516171819202122232425262728293031323334upstream server-api&#123; # api 代理服务地址 server 127.0.0.1:3110; &#125;upstream server-resource&#123; # 静态资源 代理服务地址 server 127.0.0.1:3120;&#125;server &#123; listen 3111; server_name localhost; # 这里指定域名 root /home/www/server-statics; # 匹配 api 路由的反向代理到API服务 location ^~/api/ &#123; rewrite ^/(.*)$ /$1 break; proxy_pass http://server-api; &#125; # 假设这里验证码也在API服务中 location ^~/captcha &#123; rewrite ^/(.*)$ /$1 break; proxy_pass http://server-api; &#125; # 假设你的图片资源全部在另外一个服务上面 location ^~/img/ &#123; rewrite ^/(.*)$ /$1 break; proxy_pass http://server-resource; &#125; # 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html # 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由 location / &#123; try_files $uri $uri/ /index.html =404; # ^ 空格很重要 &#125;&#125; 监控状态信息通过 nginx -V 来查看是否有 with-http_stub_status_module 该模块。 nginx -V 这里 V 是大写的，如果是小写的 v 即 nginx -v，则不会出现有哪些模块，只会出现 nginx 的版本 1234location /nginx_status &#123; stub_status on; access_log off;&#125; 通过 http://127.0.0.1/nginx_status 访问出现下面结果。 1234Active connections: 3server accepts handled requests 7 7 5 Reading: 0 Writing: 1 Waiting: 2 主动连接(第 1 行) 当前与http建立的连接数，包括等待的客户端连接：3 服务器接受处理的请求(第 2~3 行) 接受的客户端连接总数目：7处理的客户端连接总数目：7客户端总的请求数目：5 读取其它信(第 4 行) 当前，nginx读请求连接当前，nginx写响应返回给客户端目前有多少空闲客户端请求连接 代理转发连接替换1234location ^~/api/upload &#123; rewrite ^/(.*)$ /wfs/v1/upload break; proxy_pass http://wfs-api;&#125; ssl配置超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。 创建SSL证书，如果你购买的证书，就可以直接下载 1234567891011sudo mkdir /etc/nginx/ssl# 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt# 上面命令，会有下面需要填写内容Country Name (2 letter code) [AU]:USState or Province Name (full name) [Some-State]:New YorkLocality Name (eg, city) []:New York CityOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.Organizational Unit Name (eg, section) []:Ministry of Water SlidesCommon Name (e.g. server FQDN or YOUR name) []:your_domain.comEmail Address []:admin@your_domain.com 创建自签证书 123456789101112首先，创建证书和私钥的目录# mkdir -p /etc/nginx/cert# cd /etc/nginx/cert创建服务器私钥，命令会让你输入一个口令：# openssl genrsa -des3 -out nginx.key 2048创建签名请求的证书（CSR）：# openssl req -new -key nginx.key -out nginx.csr在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：# cp nginx.key nginx.key.org# openssl rsa -in nginx.key.org -out nginx.key最后标记证书使用上述私钥和CSR：# openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt 查看目前nginx编译选项 1sbin/nginx -V 输出下面内容 1234nginx version: nginx/1.7.8built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)TLS SNI support enabledconfigure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre 如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。 1./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module 运行完成之后还需要make (不用make install) 1234# 备份nginx的二进制文件cp -rf /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak# 覆盖nginx的二进制文件cp -rf objs/nginx /usr/local/nginx/sbin/ HTTPS server 1234567891011121314151617181920212223242526server &#123; listen 443 ssl; server_name localhost; ssl_certificate /etc/nginx/ssl/nginx.crt; ssl_certificate_key /etc/nginx/ssl/nginx.key; # 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击 server_tokens off; # 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 ssl_session_cache shared:SSL:1m; # 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。 ssl_session_timeout 5m; # 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。 # 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher &apos;RC4:HIGH:!aNULL:!MD5&apos;（后面是你所指定的套件加密算法） 来看所支持算法。 ssl_ciphers HIGH:!aNULL:!MD5; # 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。 ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125; 强制将http重定向到https1234567server &#123; listen 80; server_name example.com; rewrite ^ https://$http_host$request_uri? permanent; # 强制将http重定向到https # 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击 server_tokens off;&#125; 两个虚拟主机纯静态-html 支持 1234567891011121314151617181920http &#123; server &#123; listen 80; server_name www.domain1.com; access_log logs/domain1.access.log main; location / &#123; index index.html; root /var/www/domain1.com/htdocs; &#125; &#125; server &#123; listen 80; server_name www.domain2.com; access_log logs/domain2.access.log main; location / &#123; index index.html; root /var/www/domain2.com/htdocs; &#125; &#125;&#125; 虚拟主机标准配置1234567891011http &#123; server &#123; listen 80 default; server_name _ *; access_log logs/default.access.log main; location / &#123; index index.html; root /var/www/default/htdocs; &#125; &#125;&#125; 爬虫过滤根据 User-Agent 过滤请求，通过一个简单的正则表达式，就可以过滤不符合要求的爬虫请求(初级爬虫)。 ~* 表示不区分大小写的正则匹配 1234567location / &#123; if ($http_user_agent ~* &quot;python|curl|java|wget|httpclient|okhttp&quot;) &#123; return 503; &#125; # 正常处理 # ...&#125; 防盗链12345678location ~* \.(gif|jpg|png|swf|flv)$ &#123; root html valid_referers none blocked *.nginxcn.com; if ($invalid_referer) &#123; rewrite ^/ www.nginx.cn #return 404; &#125;&#125; 虚拟目录配置alias指定的目录是准确的，root是指定目录的上级目录，并且该上级目录要含有location指定名称的同名目录。 12345678location /img/ &#123; alias /var/www/image/;&#125;# 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件location /img/ &#123; root /var/www/image;&#125;# 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。] 防盗图配置123456location ~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf) &#123; valid_referers none blocked *.jslite.io; if ($invalid_referer) &#123; rewrite ^/ http://wangchujiang.com/piratesp.png; &#125;&#125; 屏蔽.git等文件123location ~ (.git|.gitattributes|.gitignore|.svn) &#123; deny all;&#125; 域名路径加不加需要都能正常访问12345http://wangchujiang.com/api/index.php?a=1&amp;name=wcj ^ 有后缀http://wangchujiang.com/api/index?a=1&amp;name=wcj ^ 没有后缀 nginx rewrite规则如下： 12345678910rewrite ^/(.*)/$ /index.php?/$1 permanent;if (!-d $request_filename)&#123; set $rule_1 1$rule_1;&#125;if (!-f $request_filename)&#123; set $rule_1 2$rule_1;&#125;if ($rule_1 = &quot;21&quot;)&#123; rewrite ^/ /index.php last;&#125; 错误问题1The plain HTTP request was sent to HTTPS port 解决办法，fastcgi_param HTTPS $https if_not_empty 添加这条规则， 1234567891011121314server &#123; listen 443 ssl; # 注意这条规则 server_name my.domain.com; fastcgi_param HTTPS $https if_not_empty; fastcgi_param HTTPS on; ssl_certificate /etc/ssl/certs/your.pem; ssl_certificate_key /etc/ssl/private/your.key; location / &#123; # Your config here... &#125;&#125;]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[区块链浏览器部署]]></title>
    <url>%2Fposts%2F984b410.html</url>
    <content type="text"><![CDATA[Hyperledger ExplorerHyperledger Explorer是一个简单，功能强大，易于使用，高度可维护的开源浏览器，用于查看底层区块链网络上的活动 。 postgresql安装创建用户 1useradd postgres 123456789101112131415161718注意：更新yum源，163或者阿里的yum源都可以添加RPM yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-3.noarch.rpm安装PostgreSQL 9.5 yum install postgresql95-server postgresql95-contrib初始化数据库 /usr/pgsql-9.5/bin/postgresql95-setup initdb设置开机自启动 systemctl enable postgresql-9.5.service启动服务 systemctl start postgresql-9.5.service查看服务运行状态 systemctl status postgresql-9.5.service postgreSQL 安装完成后，会建立一下‘postgres’用户，用于执行PostgreSQL，数据库中也会建立一个’postgres’用户，默认密码为自动生成，需要在系统中改一下。 修改用户密码1234su - postgres 切换用户，执行后提示符会变为 &apos;-bash-4.2$&apos;psql -U postgres 登录数据库，执行后提示符变为 &apos;postgres=#&apos;ALTER USER postgres WITH PASSWORD &apos;gooagoo&apos; 设置postgres用户密码\q 退出数据库 开启远程访问123vi /var/lib/pgsql/9.5/data/postgresql.conf修改#listen_addresses = &apos;localhost&apos; 为 listen_addresses=&apos;*&apos;当然，此处‘*’也可以改为任何你想开放的服务器IP 信任远程连接12345vi /var/lib/pgsql/9.5/data/pg_hba.conf 修改如下内容，信任指定服务器连接 # IPv4 local connections: host all all 127.0.0.1/32 trust host all all 10.211.55.6/32（需要连接的服务器IP） trust 重启1systemctl restart postgresql-9.5.service blockchain-explorer克隆存储库12345678git clone https://github.com/hyperledger/blockchain-explorer.gitcd blockchain-explorer也可以从我的百度链接上面下载：链接：https://pan.baidu.com/s/1VsxMlk5qo_5hUKsJ03DTlA 提取码：9s5f cp -apr blockchain-explorer /var/lib/pgsql/ 数据库设置1234567891011121314su - postgrescd blockchain-explorer/app修改explorerconfig.json以更新postgresql属性postgreSQL主机，端口，数据库，用户名，密码详细信息。“postgreSQL”：&#123; &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: &quot;5432&quot;, &quot;database&quot;: &quot;fabricexplorer&quot;, &quot;username&quot;: &quot;postgres&quot;, &quot;passwd&quot;: &quot;gooagoo&quot;&#125; 运行create database脚本12cd blockchain-explorer/app/persistence/fabric/postgreSQL/db./createdb.sh 安装node1234567tar xvf node-v11.10.0-linux-x64.tarcd node-v11.10.0-linux-x64./configure &amp;&amp; make &amp;&amp; make install装cnpm淘宝源npm install -g cnpm --registry=https://registry.npm.taobao.org npm测试12345678910cnpm installcd blockchain-explorer/app/testcnpm installcnpm run testcd client/cnpm installcnpm test -- -u --coveragecnpm run build由于config.json还没有写配置，所以node test会测试不成功 fabric的网络配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586vim blockchain-explorer/app/platform/fabric/config.json&#123; &quot;network-configs&quot;: &#123; &quot;network-1&quot;: &#123; &quot;version&quot;: &quot;1.0&quot;, &quot;clients&quot;: &#123; &quot;client-1&quot;: &#123; &quot;tlsEnable&quot;: false, &quot;organization&quot;: &quot;1D8L291SQ3QRQ80AB2M1029FB60010HCMSP&quot;, &quot;channel&quot;: &quot;vaccine&quot;, &quot;credentialStore&quot;: &#123; &quot;path&quot;: &quot;./tmp/credentialStore_Org1/credential&quot;, &quot;cryptoStore&quot;: &#123; &quot;path&quot;: &quot;./tmp/credentialStore_Org1/crypto&quot; &#125; &#125; &#125; &#125;, &quot;channels&quot;: &#123; &quot;vaccine&quot;: &#123; &quot;peers&quot;: &#123; &quot;peer0.syj.vaccine.com&quot;: &#123;&#125; &#125;, &quot;connection&quot;: &#123; &quot;timeout&quot;: &#123; &quot;peer&quot;: &#123; &quot;endorser&quot;: &quot;6000&quot;, &quot;eventHub&quot;: &quot;6000&quot;, &quot;eventReg&quot;: &quot;6000&quot; &#125; &#125; &#125; &#125; &#125;, &quot;organizations&quot;: &#123; &quot;1D8L291SQ3QRQ80AB2M1029FB60010HCMSP&quot;: &#123; &quot;mspid&quot;: &quot;1D8L291SQ3QRQ80AB2M1029FB60010HCMSP&quot;, &quot;fullpath&quot;: false, &quot;adminPrivateKey&quot;: &#123; &quot;path&quot;: &quot;/data/fabric/fabric-ca-files/vaccine-org/syj.vaccine.com/admin/msp/keystore&quot; &#125;, &quot;signedCert&quot;: &#123; &quot;path&quot;: &quot;/data/fabric/fabric-ca-files/vaccine-org/syj.vaccine.com/admin/msp/signcerts&quot; &#125; &#125;, &quot;1D9K2HVDM752IN0AB2M105R9Q5001125MSP&quot;: &#123; &quot;mspid&quot;: &quot;1D9K2HVDM752IN0AB2M105R9Q5001125MSP&quot;, &quot;fullpath&quot;: false, &quot;adminPrivateKey&quot;: &#123; &quot;path&quot;: &quot;/data/fabric/fabric-ca-files/vaccine-org/czsrmyy.czsjkzx.hbsjkzx.vaccine.com/admin/msp/keystore&quot; &#125;, &quot;signedCert&quot;: &#123; &quot;path&quot;: &quot;/data/fabric/fabric-ca-files/vaccine-org/czsrmyy.czsjkzx.hbsjkzx.vaccine.com/admin/msp/signcerts&quot; &#125; &#125;, &quot;OrdererMSP&quot;: &#123; &quot;mspid&quot;: &quot;OrdererMSP&quot;, &quot;adminPrivateKey&quot;: &#123; &quot;path&quot;: &quot;/data/fabric/fabric-ca-files/vaccine-order/vaccine.syj.vaccine.com/admin/msp/keystore&quot; &#125; &#125; &#125;, &quot;peers&quot;: &#123; &quot;peer0.syj.vaccine.com&quot;: &#123; &quot;url&quot;: &quot;grpc://peer0.syj.vaccine.com:7051&quot;, &quot;eventUrl&quot;: &quot;grpc://peer0.syj.vaccine.com:7053&quot;, &quot;grpcOptions&quot;: &#123; &quot;ssl-target-name-override&quot;: &quot;peer0.syj.vaccine.com&quot; &#125; &#125;, &quot;peer0.czsrmyy.czsjkzx.hbsjkzx.vaccine.com&quot;: &#123; &quot;url&quot;: &quot;grpc://peer0.czsrmyy.czsjkzx.hbsjkzx.vaccine.com:7351&quot; &#125; &#125;, &quot;orderers&quot;: &#123; &quot;orderer1.vaccine.syj.vaccine.com&quot;: &#123; &quot;url&quot;: &quot;grpc://orderer1.vaccine.syj.vaccine.com:7050&quot; &#125; &#125; &#125;, &quot;network-2&quot;: &#123;&#125; &#125;, &quot;configtxgenToolPath&quot;: &quot;/data/fabric/bin&quot;, &quot;license&quot;: &quot;Apache-2.0&quot;&#125; 完成之后，在执行上面的，cnpm test 汉化1234cd /var/lib/pgsql/blockchain-explorer/client/src将components替换成我百度链接的包之后还需要重新，cnpm build一下 注意1234由于区块链浏览器默认需要有锚节点，才能显示所有节点，所以在部署了第一个组织之后，需要在升级下锚节点./bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID vaccine -asOrg Org1MSPdocker exec -it cli-vaccine peer channel update -o orderer1.vaccine.syj.vaccine.com:7050 -c vaccine -f ./channel-artifacts/Org1MSPanchors.tx 启动12cd blockchain-explorer/./start.sh 访问1ip:8080]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python监控es状态]]></title>
    <url>%2Fposts%2F71abe607.html</url>
    <content type="text"><![CDATA[需求用python写一个监控es状态的脚本 实例监控es的机器1234567891011配置文件[root@Ops-script monitor_elasticsearch]# cat escluster_ip.ini[mail]name = sy@xxx.com[tax_es]cluster_ip = 192.168.50.7:9200,192.168.50.8:9200,192.168.50.9:9200name_pass = none,none[analysis_es]cluster_ip = 192.168.50.24:9200,192.168.50.25:9200name_pass = none,none 脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455[root@Ops-script monitor_elasticsearch]# cat monitor_elastic_cluster.pyimport urllib,socket,time,jsonimport logging,requests,configparser,os# 定义日志格式读取配置文件cur_path = os.path.dirname(os.path.realpath(__file__))logging.basicConfig(format=&apos;[ %(asctime)s ] -- %(message)s&apos;, datefmt=&apos;%a, %d %b %Y %H:%M:%S&apos;, filename=cur_path+&quot;/scripts.log&quot;, level=logging.INFO)config_path = os.path.join(cur_path,&quot;escluster_ip.ini&quot;)conf = configparser.ConfigParser()conf.read(config_path)esgroup = conf.sections()def GetClusterIp(): # 按集群名循环检查,集群名为配置文件中的标题 for group in esgroup: # 获取到 mail 中的邮件地址不再继续循环 if group == &quot;mail&quot;: mailname = conf.get(group,&quot;name&quot;) continue # 获取到一个集群 ip 后进行 get 请求 iplist = conf.get(group,&quot;cluster_ip&quot;).split(&quot;,&quot;) for esip in iplist: url = &quot;http://%s/_cat/health&quot;%esip try: # 超时时间为 3 秒, request 的请求值不是200的将全部置为400 # 如果是请求成功,则获取 status 的状态和 status_num 的百分比 response = requests.get(url,timeout=3) request = response.status_code status = response.text.split()[3] status_num = response.text.split()[-1] except: request = 400 # 请求值为 200 后,检查 status 值非 green 状态发送报警邮件,并不在继续检查本集群内的剩余节点 if request == 200: if status != &quot;green&quot;: mailtitle = &quot;elasticsearch集群 [ %s ], ip为:%s ,查状态: %s, 状态百分比: %s&quot;%(group,esip,status,status_num) mailtxt = &quot;elasticsearch集群 [ %s ]\n\nip为: [ %s ]\n\n检查状态为: %s\n\n状态百分比: %s&quot;%(group,esip,status,status_num) command = &quot;echo -e %s%s%s | mail -s %s%s%s %s&quot;%(&apos;&quot;&apos;,mailtxt,&apos;&quot;&apos;,&apos;&quot;&apos;,mailtitle,&apos;&quot;&apos;,mailname) logging.info(mailtitle) os.system(command) break # 请求值不是 200 ,报警后继续检查集群内剩余 ip else: mailtitle = &quot;elasticsearch集群 [ %s ], ip为:%s, 请求超时,请检查端口&quot;%(group,esip) mailtxt = &quot;elasticsearch集群 [ %s ]\n\nip: [ %s ]\n\n请求超时,请检查端口&quot;%(group,esip) command = &quot;echo -e %s%s%s | mail -s %s%s%s %s&quot;%(&apos;&quot;&apos;,mailtxt,&apos;&quot;&apos;,&apos;&quot;&apos;,mailtitle,&apos;&quot;&apos;,mailname) logging.info(mailtitle) os.system(command)if __name__ == &quot;__main__&quot;: GetClusterIp()]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubeadm证书以及etcd证书过期处理]]></title>
    <url>%2Fposts%2Ffk755lfl.html</url>
    <content type="text"><![CDATA[故障现象在测试环境使用kubeadm部署的集群，在运行了一年之后今天，出现k8s api无法调取的现象，使用kubectl命令获取资源均返回如下报错: 12[root@master35 ~]# kubectl get nodesUnable to connect to the server: x509: certificate has expired or is not yet valid 一看报错，大概率是证书到期了，经过命令一查证书时间，果然是 1openssl x509 -in /etc/kubernetes/pki/apiserver.crt -noout -text |grep &apos; Not &apos; 替换apiserver证书进入master节点 1234567891011121314151617181920212223242526272829cd /etc/kubernetes# 备份证书和配置mkdir ./pki_bakmkdir ./conf_bakmv pki/apiserver* ./pki_bak/mv pki/front-proxy-client.* ./pki_bak/ mv ./admin.conf ./conf_bak/ mv ./kubelet.conf ./conf_bak/ mv ./controller-manager.conf ./conf_bak/ mv ./scheduler.conf ./conf_bak/# 创建证书kubeadm alpha phase certs apiserver --apiserver-advertise-address $&#123;MASTER_API_SERVER_IP&#125;kubeadm alpha phase certs apiserver-kubelet-clientkubeadm alpha phase certs front-proxy-client会发现谷歌被强，命令执行不上，会报错，所以用配置文件来执行命令kubeadm alpha phase certs apiserver --config /root/yaml/kubeadm-config.yamlkubeadm alpha phase certs apiserver-kubelet-client --config /root/yaml/kubeadm-config.yamlkubeadm alpha phase certs front-proxy-client --config /root/yaml/kubeadm-config.yaml# 生成新配置文件kubeadm alpha phase kubeconfig all --config /root/yaml/kubeadm-config.yaml# 将新生成的admin配置文件覆盖掉原本的admin文件mv $HOME/.kube/config $HOME/.kube/config.oldcp -i /etc/kubernetes/admin.conf $HOME/.kube/configchown $(id -u):$(id -g) $HOME/.kube/configchmod 777 $HOME/.kube/config 完成上方操作后，docker restart重启kube-apiserver,kube-controller,kube-scheduler这3个容器 如果有多台master节点，先仿照上方将证书文件和配置文件进行备份，然后将这一台配置完成的master上的证书和配置scp过去 验证kubectl命令发现还是无法查看资源，检查apiserver的日志: docker logs 1231 customresource_discovery_controller.go:156] Shutting down DiscoveryController1 available_controller.go:266] Shutting down AvailableConditionController1 crdregistration_controller.go:115] Shutting down crd-autoregister controller 怀疑是etcd证书的原因 etcd证书过期处理看下etcd证书配置文件，发现是8760h 12345678910111213141516171819 cat config.json&#123;&quot;signing&quot;: &#123; &quot;default&quot;: &#123; &quot;expiry&quot;: &quot;8760h&quot; &#125;, &quot;profiles&quot;: &#123; &quot;kubernetes&quot;: &#123; &quot;usages&quot;: [ &quot;signing&quot;, &quot;key encipherment&quot;, &quot;server auth&quot;, &quot;client auth&quot; ], &quot;expiry&quot;: &quot;8760h&quot; &#125; &#125;&#125;&#125; 首先备份etcd数据: 12cd /var/libtar -zvcf etcd.tar.gz etcd/ 修改ca配置文件，将默认证书签署过期时间修改为10年: 12345678910111213141516171819[root@master35 etcd]# cat ca-config.json &#123;&quot;signing&quot;: &#123;&quot;default&quot;: &#123; &quot;expiry&quot;: &quot;87600h&quot;&#125;,&quot;profiles&quot;: &#123; &quot;kubernetes&quot;: &#123; &quot;usages&quot;: [ &quot;signing&quot;, &quot;key encipherment&quot;, &quot;server auth&quot;, &quot;client auth&quot; ], &quot;expiry&quot;: &quot;87600h&quot; &#125;&#125;&#125;&#125; 生成新证书： 1234567891011#删除过期证书rm -f /etc/etcd/ssl/*# 创建新证书cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcdcp etcd.pem etcd-key.pem ca.pem /etc/etcd/ssl/#拷贝到其他etcd节点scp -r /etc/etcd/ssl root@$&#123;other_node&#125;:/etc/etcd/# 重启etcd服务(记住，要3个节点一起重启，不然会hang住)systemctl restart etcd etcd替换成功后，再重启kube-apiserver,kube-controller,kube-scheduler这3个容器]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[钉钉定时发送值班人员]]></title>
    <url>%2Fposts%2F59cdc228.html</url>
    <content type="text"><![CDATA[需求每天运维人员都需要去做些基础服务，就需要值班人员去轮班解决，现在需要写一个定时发送值班人员的脚本 前提需要自己在钉钉群，申请个机器人，申请过程这里不赘述了，下面是脚本 脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869[root@Ops-script dingding]# mkdir /home/monitor/dingding[root@Ops-script dingding]# touch groupkey helpkey[root@Ops-script dingding]# cat send_dingding.sh #!/bin/bashgroupfiles=&quot;/home/monitor/dingding/groupkey&quot;helpfiles=&quot;/home/monitor/dingding/helpkey&quot;Date=`date +%Y-%m-%d\ %H:%M:%S`url=&quot;https://oapi.dingtalk.com/robot/send?access_token=c2123f81820fccfadfc47bbd629d26e7613ae49f1a053edc6e81f5864c550e30&quot;group=(&quot;a:xx;&quot; &quot;b:xx;&quot; &quot;c:xx;&quot;)opshelp=(&quot;a:xx;&quot; &quot;b:xx;&quot; &quot;c:xx;&quot;)groupkey=`sed -n &quot;1p&quot; $groupfiles`helpkeys=`awk &apos;NR==1&#123;print $1&#125;&apos; $helpfiles`helpkey=`awk &apos;NR==1&#123;print $2&#125;&apos; $helpfiles`# 每日值班人for crew in $&#123;group[@]&#125;;do if echo $crew | grep -q $groupkey ;then values=`echo $crew | awk -F&apos;:&apos; &apos;&#123;print $2&#125;&apos;` onduty_mess=&quot;今日运维值班人: [ $values ]&quot; fidone# 修改缓存文件内的运维值班人员 key , 使得下次人员自动更换if [ $groupkey == &quot;a&quot; ];then echo &quot;b&quot; &gt; $groupfileselif [ $groupkey == &quot;b&quot; ];then echo &quot;c&quot; &gt; $groupfileselif [ $groupkey == &quot;c&quot; ];then echo &quot;a&quot; &gt; $groupfilesfi# 修改缓存文件内的运维上线人员 key , 使得下次人员自动更换if [ $helpkeys == 7 ];then helpsum=1else helpsum=$(($helpkeys+1))fiif [ $helpsum == 1 ];then if [ $helpkey == &quot;a&quot; ];then echo &quot;$helpsum b&quot; &gt; $helpfiles elif [ $helpkey == &quot;b&quot; ];then echo &quot;$helpsum c&quot; &gt; $helpfiles elif [ $helpkey == &quot;c&quot; ];then echo &quot;$helpsum a&quot; &gt; $helpfiles fielse echo &quot;$helpsum $helpkey&quot; &gt; $helpfilesfi# 每周支持上线人for opsdit in $&#123;opshelp[@]&#125;;do if [ $helpsum == 1 ];then helpkey=`awk &apos;NR==1&#123;print $2&#125;&apos; $helpfiles` fi if echo $opsdit | grep -q $helpkey ;then helpvalues=`echo $opsdit | awk -F&apos;:&apos; &apos;&#123;print $2&#125;&apos;` help_mess=&quot;本周版本上线运维支持: [ $helpvalues ]&quot; fidonecurl -XPOST -s -L -H &quot;Content-Type:application/json&quot; -H &quot;charset:utf-8&quot; $url -d &quot; &#123; \&quot;msgtype\&quot;: \&quot;text\&quot;, \&quot;text\&quot;: &#123; \&quot;content\&quot;: \&quot;大家好~\n$onduty_mess\n$help_mess\&quot; &#125; &#125;&quot;]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[docker存储驱动]]></title>
    <url>%2Fposts%2F12280181.html</url>
    <content type="text"><![CDATA[摘要Docker最开始采用AUFS作为文件系统，也得益于AUFS分层的概念，实现了多个Container可以共享同一个image。但由于AUFS未并入Linux内核，且只支持Ubuntu，考虑到兼容性问题，在Docker 0.7版本中引入了存储驱动。 目前，Docker支持的存储驱动：aufs，devicemapper，btrfs，zfs，overlay和overlay2。 就如Docker官网上说的，没有单一的驱动适合所有的应用场景，要根据不同的场景选择合适的存储驱动，才能有效的提高Docker的性能。如何选择适合的存储驱动，要先了解存储驱动原理才能更好的判断 写时复制（CoW）所有驱动都用到的技术——写时复制（CoW）。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景。比如基于一个image启动多个Container，如果为每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用CoW可以有效的提高磁盘的利用率。 用时分配（allocate-on-demand）而写时分配是用在原本没有这个文件的场景，只有在要新写入一个文件时才分配空间，这样可以提高存储资源的利用率。比如启动一个容器，并不会为这个容器预分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。 AUFSAUFS（AnotherUnionFS）是一种Union FS，是文件级的存储驱动。AUFS能透明覆盖一或多个现有文件系统的层状文件系统，把多层合并成文件系统的单层表示。简单来说就是支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件系统可以一层一层地叠加修改文件。无论底下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改一个文件时，AUFS创建该文件的一个副本，使用CoW将文件从只读层复制到可写层进行修改，结果也保存在可写层。在Docker中，底下的只读层就是image，可写层就是Container。结构如下图所示： OverlayOverlay是Linux内核3.18后支持的，也是一种Union FS，和AUFS的多层不同的是Overlay只有两层：一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层。当需要修改一个文件时，使用CoW将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。在Docker中，底下的只读层就是image，可写层就是Container。结构如下图所示： Device mapperDevice mapper是Linux内核2.6.9后支持的，提供的一种从逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便的根据自己的需要制定实现存储资源的管理策略。前面讲的AUFS和OverlayFS都是文件级存储，而Device mapper是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照，并不有为容器分配空间。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据，这个叫用时分配。当要修改已有文件时，再使用CoW为容器快照分配块空间，将要修改的数据复制到在容器快照中新的块里再进行修改。Device mapper 驱动默认会创建一个100G的文件包含镜像和容器。每一个容器被限制在10G大小的卷内，可以自己配置调整。结构如下图所示： BtrfsBtrfs被称为下一代写时复制文件系统，并入Linux内核，也是文件级级存储，但可以像Device mapper一直接操作底层设备。Btrfs把文件系统的一部分配置为一个完整的子文件系统，称之为subvolume 。那么采用 subvolume，一个大的文件系统可以被划分为多个子文件系统，这些子文件系统共享底层的设备空间，在需要磁盘空间时便从底层设备中分配，类似应用程序调用 malloc()分配内存一样。为了灵活利用设备空间，Btrfs 将磁盘空间划分为多个chunk 。每个chunk可以使用不同的磁盘空间分配策略。比如某些chunk只存放metadata，某些chunk只存放数据。这种模型有很多优点，比如Btrfs支持动态添加设备。用户在系统中增加新的磁盘之后，可以使用Btrfs的命令将该设备添加到文件系统中。Btrfs把一个大的文件系统当成一个资源池，配置成多个完整的子文件系统，还可以往资源池里加新的子文件系统，而基础镜像则是子文件系统的快照，每个子镜像和容器都有自己的快照，这些快照则都是subvolume的快照。 当写入一个新文件时，为在容器的快照里为其分配一个新的数据块，文件写在这个空间里，这个叫用时分配。而当要修改已有文件时，使用CoW复制分配一个新的原始数据和快照，在这个新分配的空间变更数据，变结束再更新相关的数据结构指向新子文件系统和快照，原来的原始数据和快照没有指针指向，被覆盖。 ZFSZFS 文件系统是一个革命性的全新的文件系统，它从根本上改变了文件系统的管理方式，ZFS 完全抛弃了“卷管理”，不再创建虚拟的卷，而是把所有设备集中到一个存储池中来进行管理，用“存储池”的概念来管理物理存储空间。过去，文件系统都是构建在物理设备之上的。为了管理这些物理设备，并为数据提供冗余，“卷管理”的概念提供了一个单设备的映像。而ZFS创建在虚拟的，被称为“zpools”的存储池之上。每个存储池由若干虚拟设备（virtual devices，vdevs）组成。这些虚拟设备可以是原始磁盘，也可能是一个RAID1镜像设备，或是非标准RAID等级的多磁盘组。于是zpool上的文件系统可以使用这些虚拟设备的总存储容量。 下面看一下在Docker里ZFS的使用。首先从zpool里分配一个ZFS文件系统给镜像的基础层，而其他镜像层则是这个ZFS文件系统快照的克隆，快照是只读的，而克隆是可写的，当容器启动时则在镜像的最顶层生成一个可写层。如下图所示： 当要写一个新文件时，使用按需分配，一个新的数据快从zpool里生成，新的数据写入这个块，而这个新空间存于容器（ZFS的克隆）里。当要修改一个已存在的文件时，使用写时复制，分配一个新空间并把原始数据复制到新空间完成修改。 overlay2OverlayFS将Linux主机上的两个单独目录分层，并将它们显示为一个目录。这些目录称为层，统一过程称为联合安装。OverlayFS指向一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层。用统一视图将整合的目录公开。 该overlay2驱动程序原生支持多达128个较低的OverlayFS层。此功能为与层相关的Docker命令（如docker build和docker commit）提供了更好的性能，并且大量减少了inode的消耗。 对比 存储驱动 简介 优点 缺点 存储级别 场景 aufs 最古老的联合文件系统，没有被内核收录，只支持ubuntu 允许容器共享可执行文件和共享内存，历史悠久，使用广泛 会导致一些严重的内核崩溃，多层，在CoW时如果文件大且在低层会慢一些 文件级存储 大并发少IO devicemapper 自动创建的稀疏文件的loop挂载后，自动创建块设备 精简配置和写时复制（CoW）快照技术，只复制修改的块 不支持共享存储，多个容器读同一个文件复制多份，容器启停可能会有磁盘溢出 块级存储 IO密集场景 btrfs 和devicemapper一样操作底层设备 非常快，支持动态添加设备 设备之间不共享可执行内存 文件级块存储 不适合高密度容器的paas平台 zfs 支持多个容器共享一个缓存块，适合大内存场景 CoW使碎片化问题更严重，文件在磁盘上物理地址不连续，顺序读性能差 所有设备集中到一个共享池里面进行管理 Paas平台和高密度场景 overlay 联合文件系统，内核版本3.18.0开始合并到内核中，只有两层 非常快速的联合文件系统。还支持页面缓存共享，这意味着访问同一文件的多个容器可以共享单个页面缓存条目（或条目），如aufs一样高效 会导致过多的inode消耗，不管修改内容大小都会复制整个文件，修改大文件消耗时间长 文件级存储 大并发少IO overlay2 内核版本4.0有附加功能，避免过多的inode消耗 文件级存储 大并发少IO AUFS VS OverlayAUFS和Overlay都是联合文件系统，但AUFS有多层，而Overlay只有两层，所以在做写时复制操作时，如果文件比较大且存在比较低的层，则AUSF可能会慢一些。而且Overlay并入了linux kernel mainline，AUFS没有，所以可能会比AUFS快。但Overlay还太年轻，要谨慎在生产使用。而AUFS做为docker的第一个存储驱动，已经有很长的历史，比较的稳定，且在大量的生产中实践过，有较强的社区支持。目前开源的DC/OS指定使用Overlay。 Overlay VS Device mapperOverlay是文件级存储，Device mapper是块级存储，当文件特别大而修改的内容很小，Overlay不管修改的内容大小都会复制整个文件，对大文件进行修改显示要比小文件要消耗更多的时间，而块级无论是大文件还是小文件都只复制需要修改的块，并不是整个文件，在这种场景下，显然device mapper要快一些。因为块级的是直接访问逻辑盘，适合IO密集的场景。而对于程序内部复杂，大并发但少IO的场景，Overlay的性能相对要强一些。 Device mapper VS Btrfs Driver VS ZFSDevice mapper和Btrfs都是直接对块操作，都不支持共享存储，表示当有多个容器读同一个文件时，需要生活多个复本，所以这种存储驱动不适合在高密度容器的PaaS平台上使用。而且在很多容器启停的情况下可能会导致磁盘溢出，造成主机不能工作。Device mapper不建议在生产使用。Btrfs在docker build可以很高效。 ZFS最初是为拥有大量内存的Salaris服务器设计的，所在在使用时对内存会有影响，适合内存大的环境。ZFS的COW使碎片化问题更加严重，对于顺序写生成的大文件，如果以后随机的对其中的一部分进行了更改，那么这个文件在硬盘上的物理地址就变得不再连续，未来的顺序读会变得性能比较差。ZFS支持多个容器共享一个缓存块，适合PaaS和高密度的用户场景。 IO性能对比 测试工具：IOzone（是一个文件系统的benchmark工具，可以测试不同的操作系统中文件系统的读写性能） 测试场景：从4K到1G文件的顺序和随机IO性能 测试方法：基于不同的存储驱动启动容器，在容器内安装IOzone，执行命令： 1./iozone -a -n 4k -g 1g -i 0 -i 1 -i 2 -f /root/test.rar -Rb ./iozone.xls 测试项的定义和解释 Write：测试向一个新文件写入的性能。 Re-write：测试向一个已存在的文件写入的性能。 Read：测试读一个已存在的文件的性能。 Re-Read：测试读一个最近读过的文件的性能。 Random Read：测试读一个文件中的随机偏移量的性能。 Random Write：测试写一个文件中的随机偏移量的性能。 通过以上的性能数据可以看到：AUFS在读的方面性能相比Overlay要差一些，但在写的方面性能比Overlay要好。device mapper在512M以上文件的读写性能都非常的差，但在512M以下的文件读写性能都比较好。btrfs在512M以上的文件读写性能都非常好，但在512M以下的文件读写性能相比其他的存储驱动都比较差。ZFS整体的读写性能相比其他的存储驱动都要差一些。 简单的测试了一些数据，对测试出来的数据原理还需要进一步的解析。 参数devicemapper12345678&#123; &quot;storage-driver&quot;: &quot;devicemapper&quot;, &quot;storage-opts&quot;: [ &quot;dm.thinpooldev=/dev/mapper/thin-pool&quot;, &quot;dm.use_deferred_deletion=true&quot;, &quot;dm.use_deferred_removal=true&quot; ]&#125; overlay2overlay2需要使用4.0以上版本的内核，如果使用的是RHEL或CentOS，需要3.10.0-514以上版本的内核 12345# 查看是否开启overlaylsmod |grep over# 开启overlay支持modprobe overlay 配置 1234567&#123; &quot;storage-driver&quot;: &quot;overlay2&quot;, &quot;storage-opts&quot;: [ &quot;overlay2.override_kernel_check=true&quot; #&quot;overlay2.size=1G&quot;, # xfs文件系统 ]&#125;]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kubernetes节点资源耗尽状态的处理]]></title>
    <url>%2Fposts%2Fa54106c5.html</url>
    <content type="text"><![CDATA[最近发现测试环境的k8s集群，总有node利用不上，pod漂移过去之后，启动不了，故仔细排查了一下缘由！ 问题现象12345678[root@master35 scripts]# ./list_pod.sh | grep imisimis-866d46c464-nvz4b 0/1 ContainerCreating 0 3m &lt;none&gt; node149发现有的pod无法启动，刚开始describe查了下原因，看到，一直在拉镜像状态中，但是3分钟了，也不至于镜像拉不下来啊！查看了下node149的状态，发现Warning: “EvictionThresholdMet Attempting to reclaim nodefs”发现大概应该是由于磁盘原因造成的，也可以看下kubelet日志，也会报这个类似的错误 原因分析12345678[root@node149 ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/cl-root 36G 30G 6G 86% /devtmpfs 7.8G 0 7.8G 0% /devtmpfs 7.8G 0 7.8G 0% /dev/shmtmpfs 7.8G 9.3M 7.8G 1% /runtmpfs 7.8G 0 7.8G 0% /sys/fs/cgroup/dev/sda1 1014M 186M 829M 19% /boot 1由于这是测试环境，所以docker的目录，默认在/var/lib/docker，没有单独挂载别的目录，这样的话，也没加定时任务清理磁盘，/ 磁盘就会越来越满，现在看是用了86% 由于某些原因，我们的那个portal pod必须运行于该node上（通过nodeSelector选定node的方式）。在无法扩充根分区size的情况下，为了临时恢复pod运行，我们只能进一步“压榨”node了。于是我们的思路是：通过调整node的eviction threshold值来让node恢复healthy。 解决方案每个node上的kubelet都负责定期采集资源占用数据，并与预设的 threshold值进行比对，如果超过 threshold值，kubelet就会尝试杀掉一些Pod以回收相关资源，对Node进行保护。kubelet关注的资源指标threshold大约有如下几种： 12345- memory.available- nodefs.available- nodefs.inodesFree- imagefs.available- imagefs.inodesFree 每种threshold又分为eviction-soft和eviction-hard两组值。soft和hard的区别在于前者在到达threshold值时会给pod一段时间优雅退出，而后者则崇尚“暴力”，直接杀掉pod，没有任何优雅退出的机会。这里还要提一下nodefs和imagefs的区别： 12nodefs: 指node自身的存储，存储daemon的运行日志等，一般指root分区/；imagefs: 指docker daemon用于存储image和容器可写层(writable layer)的磁盘； 解决步骤我们需要为kubelet重新设定nodefs.available的threshold值。怎么做呢？ kubelet是运行于每个kubernetes node上的daemon，它在system boot时由systemd拉起: 123root@master35 ~# ps -ef|grep kubeletroot 5718 5695 0 16:38 pts/3 00:00:00 grep --color=auto kubeletroot 13640 1 4 10:25 ? 00:17:25 /usr/bin/kubelet --kubeconfig=/etc/kubernetes/kubelet.conf --require-kubeconfig=true --pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true --network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --cluster-dns=10.96.0.10 --cluster-domain=cluster.local --authorization-mode=Webhook --client-ca-file=/etc/kubernetes/pki/ca.crt --cadvisor-port=0 查看一下kubelet service的状态： 123456789101112131415[root@master35 scripts]# systemctl status kubelet ● kubelet.service - kubelet: The Kubernetes Node Agent Loaded: loaded (/etc/systemd/system/kubelet.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/kubelet.service.d └─10-kubeadm.conf Active: active (running) since Thu 2018-07-19 21:04:35 CST; 8 months 29 days ago Docs: http://kubernetes.io/docs/ Main PID: 1921 (kubelet) Tasks: 19 Memory: 54.9M CGroup: /system.slice/kubelet.service └─1921 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --pod-manifest-path=...Apr 14 09:26:16 master35 kubelet[1921]: W0414 09:26:16.673359 1921 reflector.go:341] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: watch o...(56737582)Apr 15 06:36:48 master35 kubelet[1921]: W0415 06:36:48.938194 1921 reflector.go:341] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: watch o...(56940044) 我们定义一个新的Environment var，比如就叫：KUBELET_EVICTION_POLICY_ARGS 在/etc/systemd/system/kubelet.service.d/10-kubeadm.conf 123Environment=&quot;KUBELET_EVICTION_POLICY_ARGS=--eviction-hard=nodefs.available&lt;5%&quot;ExecStart=ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_CADVISOR_ARGS $KUBELET_EXTRA_ARGS $KUBELET_EVICTION_POLICY_ARGS 这样控制，node的磁盘策略为&lt;5%的硬盘就可以用，不像之前默认的15%就用不了了！]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[wordpress快速安装]]></title>
    <url>%2Fposts%2F5842d4c0.html</url>
    <content type="text"><![CDATA[yum安装lnmp环境安装前准备123456789# 配置阿里云 yum 仓库$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo$ yum clean all$ yum makecache# 配置时间同步$ vim /etc/crontab00 00 * * * root /sbin/ntpdate ntp.aliyun.com &amp;&gt;/dev/null 配置 nginx repo1234567891011121314$ vim /etc/yum.repos.d/nginx.repo[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.key yum安装lnmp1$ yum -y install nginx mariadb-server php php-bcmath php-fpm php-gd php-json php-mbstring php-mcrypt php-mysqlnd php-opcache php-pdo php-pdo_dblib php-pgsql php-recode php-snmp php-soap php-xml php-pecl-zip 启动php和mariadb123456# 启动 PHP-FPM$ systemctl enable php-fpm$ systemctl start php-fpm# 启动 mariadb$ systemctl enable mariadb.service$ systemctl start mariadb.service 创建 wordpress 数据库12345678# 连接数据库，默认密码为空mysql -uroot -p# 创建wordpress数据库名为 wpcreate database wp;# 创建数据库用户，用户名: blog 密码：123456grant all privileges on wp.* to &apos;blog&apos;@&apos;127.0.0.1&apos; identified by &apos;123456&apos;;# 刷新授权flush privileges; 配置nginx虚拟主机123456789101112131415161718192021$ vim /etc/nginx/conf.d/blog.confserver &#123; listen 80; server_name 10.100.4.169; index index.html index.php; # 访问日志目录 access_log /var/log/nginx/blog_access.log main; # 网站根目录 root /data/www; location / &#123; root /data/www; &#125; location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 配置wordpress下载最新版wordpress1$ wget https://cn.wordpress.org/latest-zh_CN.tar.gz 配置wordpress连接数据库1234567891011121314151617181920212223$ tar xf latest-zh_CN.tar.gz$ mv wordpress/ /data/www$ cd /data/www/$ cp wp-config-sample.php wp-config.php$ vim wp-config.php// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** ///** WordPress数据库的名称 */define(&apos;DB_NAME&apos;, &apos;wp&apos;);/** MySQL数据库用户名 */define(&apos;DB_USER&apos;, &apos;blog&apos;);/** MySQL数据库密码 */define(&apos;DB_PASSWORD&apos;, &apos;123456&apos;);/** MySQL主机 */define(&apos;DB_HOST&apos;, &apos;127.0.0.1&apos;);/** 创建数据表时默认的文字编码 */define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);/** 数据库整理类型。如不确定请勿更改 */define(&apos;DB_COLLATE&apos;, &apos;&apos;); 启动 nginx123$ systemctl enable nginx$ systemctl start nginx$ ps -ef|grep nginx 访问wordpressnginx 启动后我们就可以在浏览器通过 IP 地址访问 WordPress 了，首先会让我们给博客起个名字，名设置管理员的账号密码，点击安装 WordPress 就完成了。]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[多级缓存]]></title>
    <url>%2Fposts%2F9c74e32c.html</url>
    <content type="text"><![CDATA[每一级缓存的意义时效性高的数据：采取DB和redis缓存双写方案 时效性不高的数据：采取nginx本地缓存+redis分布式缓存+tomcat堆缓存的多级缓存架构 a: nginx本地缓存，抗的是热数据的高并发访问。利用nginx本地缓存，将热数据锁定在nginx的本地缓存内，那么对这些热数据的大量访问，就直接走nginx就可以，不需要走后续的各种网络开销了。 b: redis分布式大规模缓存，抗的是很高的离散访问，支撑海量的数据，高并发的访问，高可用的服务。最完整的数据和缓存。 c: tomcat jvm堆内存缓存，主要是抗redis大规模灾难的，如果redis出现了大规模的宕机，导致nginx大量流量直接涌入数据生产服务，那么最后的tomcat堆内存缓存至少可以再抗一下，不至于让数据库直接裸奔， 同时tomcat jvm堆内存缓存，也可以抗住redis没有cache住的最后那少量的部分缓存。 RedisRedis Cluster通过master的水平扩容，来横向扩展读写吞吐量，还有支撑更多的海量数据 redis cluster 高可用性：redis cluster 提供主备切换。slave做master的热备，一旦master故障。slave提升为master，对外提供服务，保证集群的高可用性。并且，当master恢复后，会作为 slave加入到集群中。 redis cluster水平扩容master的水平扩容，来横向扩展读写吞吐量，还有支撑更多的海量数据 slave 自动迁移为redis cluster 添加冗余slave redis性能（需根据机器配置测试） redis单机，读吞吐是5w/s，写吞吐2w/s 扩展redis更多master，那么如果有5台master，不就读吞吐可以达到总量25w/s QPS，写可以达到10w/s QPS redis单机，内存，6G-8G，内存不易过大fork类操作的时候很耗时，会导致请求延时的问题。扩容到5台master，能支撑的总的缓存数据量就是30G Cache Aside模式12（1）读的时候，先读缓存，缓存没有的话，那么就读数据库，然后取出数据后放入缓存，同时返回响应（2）更新的时候，先删除缓存，然后再更新数据库 DB和缓存双写不一致问题以及解决方案 缓存不一致场景一： 1234 解决思路：先删除缓存，再修改数据库，如果删除缓存成功了，如果修改数据库失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中 缓存不一致场景二： 12345678910111213141516 解决思路： a：更新数据的时候，根据数据的唯一标识，将操作路由之后，发送到一个jvm内部的队列中 b:读取数据的时候，如果发现数据不在缓存中，那么将重新读取数据+更新缓存的操作，根据唯一标识路由之后，也发送同一个jvm内部的队列中 c:一个队列对应一个工作线程 d:每个工作线程串行拿到对应的操作，然后一条一条的执行这样的话，一个数据变更的操作，先执行，删除缓存，然后再去更新数据库，但是还没完成更新此时如果一个读请求过来，读到了空的缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成 e: 多个更新缓存请求处理：这里有一个优化点，一个队列中，其实多个更新缓存请求串在一起是没意义的，因此可以做过滤，如果发现队列中已经有一个更新缓存的请求了，那么就不用再放个更新请求操作进去了，直接等待前面的更新操作请求完成即可待那个队列对应的工作线程完成了上一个操作的数据库的修改之后，才会去执行下一个操作，也就是缓存更新的操作，此时会从数据库中读取最新的值，然后写入缓存中如果请求还在等待时间范围内，不断轮询发现可以取到值了，那么就直接返回; 如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的旧值 f:多个读请求，进行读请求过滤：对一个商品的库存的数据库更新操作已经在内存队列中了然后对这个商品的库存的读取操作，要求读取数据库的库存数据，然后更新到缓存中，多个读这多个读，其实只要有一个读请求操作压到队列里就可以了其他的读操作，全部都wait那个读请求的操作，刷新缓存，就可以读到缓存中的最新数据了如果读请求发现redis缓存中没有数据，就会发送读请求给库存服务，但是此时缓存中为空，可能是因为写请求先删除了缓存，也可能是数据库里压根儿没这条数据如果是数据库中压根儿没这条数据的场景，那么就不应该将读请求操作给压入队列中，而是直接返回空就可以了 大value缓存的全量更新效率低下问题缓存数据的维度化拆分 缓存数据生产服务工作流程 （1）监听多个kafka topic，每个kafka topic对应一个服务（简化一下，监听一个kafka topic） （2）如果一个服务发生了数据变更，那么就发送一个消息到kafka topic中 （3）缓存数据生产服务监听到了消息以后，就发送请求到对应的服务中调用接口以及拉取数据，此时是从mysql中查询的 （4）缓存数据生产服务拉取到了数据之后，会将数据在本地缓存中写入一份，就是ehcache中 ​ 同时会将数据在redis中写入一份 缓存并发重建冲突解决方案 重建缓存：比如数据在所有的缓存中都不存在了（LRU算法弄掉了），就需要重新查询数据写入缓存，重建缓存 123456缓存重建存在的问题一：缓存数据生产服务在多个机器节点上部署了多个实例 若没有缓存数据。12:00的时候发来一个读请求 12:01发来一个读请求（此时12:00的读请求由于网络延迟还未执行完）。12:01请求比12:00的请求执行速度快。更新了生产服务的数据并将数据写入缓存。写完后。12:00的请求将数据写入了缓存。那么此时生产服务的最新数据是12：01的，但是缓存中是服务数据是12:00的。数据不一致。解决思路：对请求的数据ID 进行hash，让对同一个数据的请求落在同一个服务实例上 123456789缓存重建存在的问题二：生产服务发送的变更消息到kafka。由于问题一解决方案中的hash算法与kafka分区策略不一致。数据变更的消息所到的缓存服务实例，跟请求分发到的那个缓存服务实例也许就不在一台机器上了 （1）变更缓存重建以及空缓存请求重建，更新redis之前，都需要先获取对应商品id的分布式锁（2）拿到分布式锁之后，需要根据时间版本去比较一下，如果自己的版本新于redis中的版本，那么就更新，否则就不更新（3）如果拿不到分布式锁，那么就等待，不断轮询等待，直到自己获取到分布式的锁 缓存雪崩问题12345678910111213缓存雪崩产生场景：1、redis集群彻底崩溃2、缓存服务大量对redis的请求hang住，占用资源3、缓存服务大量的请求打到源头服务去查询mysql，直接打死mysql4、源头服务因为mysql被打死也崩溃，对源服务的请求也hang住，占用资源5、缓存服务大量的资源全部耗费在访问redis和源服务无果，最后自己被拖死，无法提供服务6、nginx无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供解决思路 1、对redis访问做资源隔离 2、若redis集群崩溃，对redis进行熔断 3、对源服务的访问做限流 4、限流失败后采用stubbed fallback降级机制 缓存穿透问题每次如果从生产查询到的数据是空，就说明这个数据根本就不存在 那么如果这个数据不存在的话，我们不要不往redis和ehcache等缓存中写入数据，我们呢，给写入一个空的数据，比如说空的productInfo的json串 因为我们有一个异步监听数据变更的机制在里面，也就是说，如果数据变更的话，某个数据本来是没有的，可能会导致缓存穿透，所以我们给了个空数据 但是现在这个数据有了，我们接收到这个变更的消息过后，就可以将数据再次从生产服务中查询出来 然后设置到各级缓存中去了 缓存失效问题设置随机的缓存失效时间]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[fabric分布式部署]]></title>
    <url>%2Fposts%2Fe0275bab.html</url>
    <content type="text"><![CDATA[Kafka模式简介Hyperledger Fabric采用kafka方式实现排序（orderer）服务的集群，kafka模块被认为是半中心化结构。顺便提一下，去中心化的BFT（拜占庭容错）排序（orderer）服务集群方式目前还在开发，还没有规定发布时间，将在1.x周期内发布，可以关注跟踪FAB-33的更新。 Kafka模式由排序（orderer）服务、kafka集群和zookeeper集群组成。每个排序(orderer)服务相互之间不通信，只与kafka集群通信，kafka集群与zookeeper相互连接。 Fabric网络中的各节点（Peer）收到客户端发送的交易请求时，把交易信息发送给与其连接的排序（orderer）服务，交由排序（orderer）服务集群进行排序处理。 配置 orderer1.example.com,kafka1,zookeeper1 192.168.3.98 orderer1.example.com,kafka1,zookeeper1 192.168.3.97 orderer1.example.com,kafka1,zookeeper1 192.168.3.94 peer0.org1.example.com 192.168.10.174 peer1.org1.example.com 192.168.10.173 peer0.org2.example.com 192.168.3.93 安装在六台机器上安装依赖工具docker、go、fabric源码 docker就不多说了，17,03以上就可以，go可以yum安装 123456789101112131415161718192021222324252627安装fabric源码:git clone https://github.com/hyperledger/fabric.gitcd fabricgit checkout v1.4.0拉镜像：# mkdir -p /etc/docker# tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;&#123;&quot;registry-mirrors&quot;: [&quot;https://8w1wqmsz.mirror.aliyuncs.com&quot;]&#125;EOF# systemctl daemon-reload# systemctl restart docker# docker pull hyperledger/fabric-peer:latest# docker pull hyperledger/fabric-orderer:latest# docker pull hyperledger/fabric-tools:latest# docker pull hyperledger/fabric-ccenv:latest# docker pull hyperledger/fabric-baseos:latest# docker pull hyperledger/fabric-kafka:latest# docker pull hyperledger/fabric-zookeeper:latest# docker pull hyperledger/fabric-couchdb:latest# docker pull hyperledger/fabric-ca:latest 部署创建创世快123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339# cd $GOPATH/src/github.com/hyperledger/fabric# mkdir kafkapeer# cd kafkapeer# cat configtx.yaml# Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#---################################################################################## Section: Organizations## - This section defines the different organizational identities which will# be referenced later in the configuration.#################################################################################Organizations: # SampleOrg defines an MSP using the sampleconfig. It should never be used # in production but may be used as a template for other definitions - &amp;OrdererOrg # DefaultOrg defines the organization which is used in the sampleconfig # of the fabric.git development environment Name: OrdererOrg # ID to load the MSP definition as ID: OrdererMSP # MSPDir is the filesystem path which contains the MSP configuration MSPDir: crypto-config/ordererOrganizations/example.com/msp # Policies defines the set of policies at this level of the config tree # For organization policies, their canonical path is usually # /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt; Policies: Readers: Type: Signature Rule: &quot;OR(&apos;OrdererMSP.member&apos;)&quot; Writers: Type: Signature Rule: &quot;OR(&apos;OrdererMSP.member&apos;)&quot; Admins: Type: Signature Rule: &quot;OR(&apos;OrdererMSP.admin&apos;)&quot; - &amp;Org1 # DefaultOrg defines the organization which is used in the sampleconfig # of the fabric.git development environment Name: Org1MSP # ID to load the MSP definition as ID: Org1MSP MSPDir: crypto-config/peerOrganizations/org1.example.com/msp # Policies defines the set of policies at this level of the config tree # For organization policies, their canonical path is usually # /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt; Policies: Readers: Type: Signature Rule: &quot;OR(&apos;Org1MSP.admin&apos;, &apos;Org1MSP.peer&apos;, &apos;Org1MSP.client&apos;)&quot; Writers: Type: Signature Rule: &quot;OR(&apos;Org1MSP.admin&apos;, &apos;Org1MSP.client&apos;)&quot; Admins: Type: Signature Rule: &quot;OR(&apos;Org1MSP.admin&apos;)&quot; AnchorPeers: # AnchorPeers defines the location of peers which can be used # for cross org gossip communication. Note, this value is only # encoded in the genesis block in the Application section context - Host: peer0.org1.example.com Port: 7051 - &amp;Org2 # DefaultOrg defines the organization which is used in the sampleconfig # of the fabric.git development environment Name: Org2MSP # ID to load the MSP definition as ID: Org2MSP MSPDir: crypto-config/peerOrganizations/org2.example.com/msp # Policies defines the set of policies at this level of the config tree # For organization policies, their canonical path is usually # /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt; Policies: Readers: Type: Signature Rule: &quot;OR(&apos;Org2MSP.admin&apos;, &apos;Org2MSP.peer&apos;, &apos;Org2MSP.client&apos;)&quot; Writers: Type: Signature Rule: &quot;OR(&apos;Org2MSP.admin&apos;, &apos;Org2MSP.client&apos;)&quot; Admins: Type: Signature Rule: &quot;OR(&apos;Org2MSP.admin&apos;)&quot; AnchorPeers: # AnchorPeers defines the location of peers which can be used # for cross org gossip communication. Note, this value is only # encoded in the genesis block in the Application section context - Host: peer0.org2.example.com Port: 7051################################################################################## SECTION: Capabilities## - This section defines the capabilities of fabric network. This is a new# concept as of v1.1.0 and should not be utilized in mixed networks with# v1.0.x peers and orderers. Capabilities define features which must be# present in a fabric binary for that binary to safely participate in the# fabric network. For instance, if a new MSP type is added, newer binaries# might recognize and validate the signatures from this type, while older# binaries without this support would be unable to validate those# transactions. This could lead to different versions of the fabric binaries# having different world states. Instead, defining a capability for a channel# informs those binaries without this capability that they must cease# processing transactions until they have been upgraded. For v1.0.x if any# capabilities are defined (including a map with all capabilities turned off)# then the v1.0.x peer will deliberately crash.#################################################################################Capabilities: # Channel capabilities apply to both the orderers and the peers and must be # supported by both. Set the value of the capability to true to require it. Global: &amp;ChannelCapabilities # V1.1 for Global is a catchall flag for behavior which has been # determined to be desired for all orderers and peers running v1.0.x, # but the modification of which would cause incompatibilities. Users # should leave this flag set to true. V1_1: true # Orderer capabilities apply only to the orderers, and may be safely # manipulated without concern for upgrading peers. Set the value of the # capability to true to require it. Orderer: &amp;OrdererCapabilities # V1.1 for Order is a catchall flag for behavior which has been # determined to be desired for all orderers running v1.0.x, but the # modification of which would cause incompatibilities. Users should # leave this flag set to true. V1_1: true # Application capabilities apply only to the peer network, and may be safely # manipulated without concern for upgrading orderers. Set the value of the # capability to true to require it. Application: &amp;ApplicationCapabilities # V1.1 for Application is a catchall flag for behavior which has been # determined to be desired for all peers running v1.0.x, but the # modification of which would cause incompatibilities. Users should # leave this flag set to true. V1_2: true################################################################################## SECTION: Application## - This section defines the values to encode into a config transaction or# genesis block for application related parameters#################################################################################Application: &amp;ApplicationDefaults # Organizations is the list of orgs which are defined as participants on # the application side of the network Organizations: # Policies defines the set of policies at this level of the config tree # For Application policies, their canonical path is # /Channel/Application/&lt;PolicyName&gt; Policies: Readers: Type: ImplicitMeta Rule: &quot;ANY Readers&quot; Writers: Type: ImplicitMeta Rule: &quot;ANY Writers&quot; Admins: Type: ImplicitMeta Rule: &quot;MAJORITY Admins&quot; # Capabilities describes the application level capabilities, see the # dedicated Capabilities section elsewhere in this file for a full # description Capabilities: &lt;&lt;: *ApplicationCapabilities################################################################################## SECTION: Orderer## - This section defines the values to encode into a config transaction or# genesis block for orderer related parameters#################################################################################Orderer: &amp;OrdererDefaults # Orderer Type: The orderer implementation to start # Available types are &quot;solo&quot; and &quot;kafka&quot; OrdererType: kafka Addresses: - orderer0.example.com:7050 - orderer1.example.com:7050 - orderer2.example.com:7050 # Batch Timeout: The amount of time to wait before creating a batch BatchTimeout: 2s # Batch Size: Controls the number of messages batched into a block BatchSize: # Max Message Count: The maximum number of messages to permit in a batch MaxMessageCount: 10 # Absolute Max Bytes: The absolute maximum number of bytes allowed for # the serialized messages in a batch. AbsoluteMaxBytes: 98 MB # Preferred Max Bytes: The preferred maximum number of bytes allowed for # the serialized messages in a batch. A message larger than the preferred # max bytes will result in a batch larger than preferred max bytes. PreferredMaxBytes: 512 KB Kafka: # Brokers: A list of Kafka brokers to which the orderer connects. Edit # this list to identify the brokers of the ordering service. # NOTE: Use IP:port notation. Brokers: - kafka0:9092 - kafka1:9092 - kafka2:9092 - kafka3:9092 # Organizations is the list of orgs which are defined as participants on # the orderer side of the network Organizations: # Policies defines the set of policies at this level of the config tree # For Orderer policies, their canonical path is # /Channel/Orderer/&lt;PolicyName&gt; Policies: Readers: Type: ImplicitMeta Rule: &quot;ANY Readers&quot; Writers: Type: ImplicitMeta Rule: &quot;ANY Writers&quot; Admins: Type: ImplicitMeta Rule: &quot;MAJORITY Admins&quot; # BlockValidation specifies what signatures must be included in the block # from the orderer for the peer to validate it. BlockValidation: Type: ImplicitMeta Rule: &quot;ANY Writers&quot; # Capabilities describes the orderer level capabilities, see the # dedicated Capabilities section elsewhere in this file for a full # description Capabilities: &lt;&lt;: *OrdererCapabilities################################################################################## CHANNEL## This section defines the values to encode into a config transaction or# genesis block for channel related parameters.#################################################################################Channel: &amp;ChannelDefaults # Policies defines the set of policies at this level of the config tree # For Channel policies, their canonical path is # /Channel/&lt;PolicyName&gt; Policies: # Who may invoke the &apos;Deliver&apos; API Readers: Type: ImplicitMeta Rule: &quot;ANY Readers&quot; # Who may invoke the &apos;Broadcast&apos; API Writers: Type: ImplicitMeta Rule: &quot;ANY Writers&quot; # By default, who may modify elements at this config level Admins: Type: ImplicitMeta Rule: &quot;MAJORITY Admins&quot; # Capabilities describes the channel level capabilities, see the # dedicated Capabilities section elsewhere in this file for a full # description Capabilities: &lt;&lt;: *ChannelCapabilities################################################################################## Profile## - Different configuration profiles may be encoded here to be specified# as parameters to the configtxgen tool#################################################################################Profiles: TwoOrgsOrdererGenesis: &lt;&lt;: *ChannelDefaults Orderer: &lt;&lt;: *OrdererDefaults Organizations: - *OrdererOrg Consortiums: SampleConsortium: Organizations: - *Org1 - *Org2 TwoOrgsChannel: Consortium: SampleConsortium Application: &lt;&lt;: *ApplicationDefaults Organizations: - *Org1 - *Org2 1234bin目录从fabric源码里面拷过来，这样方便生成块# mkdir channel-artifacts# ./bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block# ./bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/mychannel.tx -channelID mychannel 完事之后，把kafka目录，拷到所有机器上 部署kafka、zk1234567891011121314151617181920212223242526zk的yaml文件：# cat docker-compose-zookeeper.yaml# Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &apos;2&apos;services: zookeeper0: container_name: zookeeper0 hostname: zookeeper0 image: hyperledger/fabric-zookeeper restart: always environment: - ZOO_MY_ID=1 - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888 ports: - 2181:2181 - 2888:2888 - 3888:3888 dns: - &quot;192.168.3.94&quot; 12345678910111213141516171819202122232425262728293031323334kafka的yaml文件：# cat docker-compose-kafka.yaml# Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &apos;2&apos;services: kafka0: container_name: kafka0 hostname: kafka0 image: hyperledger/fabric-kafka restart: always environment: - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false environment: - KAFKA_BROKER_ID=1 - KAFKA_MIN_INSYNC_REPLICAS=2 - KAFKA_DEFAULT_REPLICATION_FACTOR=3 - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181 ports: - 9092:9092 dns: - &quot;192.168.3.94&quot; 部署orderer1234567891011121314151617181920212223242526272829303132333435363738394041424344因为咱们的fabric证书，没生成tls，所以下面的配置文件需要把tls去掉，zk，kafka都各自按照上述步骤配置在三台不同机器上，orderer也一样cat docker-compose-orderer.yaml# Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &apos;2&apos;services: orderer0.example.com: container_name: orderer0.example.com image: hyperledger/fabric-orderer environment: - ORDERER_GENERAL_LOGLEVEL=debug - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 - ORDERER_GENERAL_GENESISMETHOD=file - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block - ORDERER_GENERAL_LOCALMSPID=OrdererMSP - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp # enabled TLS - ORDERER_GENERAL_TLS_ENABLED=true - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt] - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s - ORDERER_KAFKA_RETRY_LONGTOTAL=100s - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s - ORDERER_KAFKA_VERBOSE=true working_dir: /opt/gopath/src/github.com/hyperledger/fabric command: orderer volumes: - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls ports: - 7050:7050 dns: - &quot;192.168.3.94&quot; 部署peer1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# cat docker-compose-peer.yaml# All elements in this file should depend on the docker-compose-base.yaml# Provided fabric peer nodeversion: &apos;2&apos;services: peer1.org1.example.com: container_name: peer1.org1.example.com hostname: peer1.org1.example.com image: hyperledger/fabric-peer environment: - CORE_PEER_ID=peer1.org1.example.com - CORE_PEER_ADDRESS=peer1.org1.example.com:7051 - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052 - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051 - CORE_PEER_LOCALMSPID=Org1MSP - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock # the following setting starts chaincode containers on the same # bridge network as the peers # https://docs.docker.com/compose/networking/ #- CORE_LOGGING_LEVEL=ERROR - CORE_LOGGING_LEVEL=DEBUG - CORE_PEER_GOSSIP_USELEADERELECTION=true - CORE_PEER_GOSSIP_ORGLEADER=false - CORE_PEER_PROFILE_ENABLED=true - CORE_PEER_TLS_ENABLED=true - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer command: peer node start volumes: - /var/run/:/host/var/run/ - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls ports: - 7051:7051 - 7052:7052 - 7053:7053 dns: - &quot;192.168.3.94&quot; cli: container_name: cli image: hyperledger/fabric-tools tty: true environment: - GOPATH=/opt/gopath - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock # - CORE_LOGGING_LEVEL=ERROR - CORE_LOGGING_LEVEL=DEBUG - CORE_PEER_ID=cli - CORE_PEER_ADDRESS=peer1.org1.example.com:7051 - CORE_PEER_LOCALMSPID=Org1MSP - CORE_PEER_TLS_ENABLED=true - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer volumes: - /var/run/:/host/var/run/ - ./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/kafkapeer/chaincode/go - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts dns: - &quot;192.168.3.94&quot; 启动1234docker-compose -f docker-compose-zookeeper.yaml up -ddocker-compose -f docker-compose-kafka.yaml up -ddocker-compose -f docker-compose-orderer.yaml up -ddocker-compose -f docker-compose-peer.yaml up -d 创建channel123进入cli：peer channel create -o orderer0.example.com:7050 -c mychannel -f ./channel-artifacts/mychannel.txpeer channel join -b mychannel.block 之后切换变量，批量加就可以了]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus添加gateway]]></title>
    <url>%2Fposts%2Fdf2u8ajq.html</url>
    <content type="text"><![CDATA[简介Pushgateway是prometheus的一个重要组件，利用该组件可以实现自动以监控指标，从字面意思来看，该部件不是将数据push到prometheus，而是作为一个中间组件收集外部push来的数据指标，prometheus会定时从pushgateway上pull数据。 pushgateway并不是将Prometheus的pull改成了push，它只是允许用户向他推送指标信息，并记录。而Prometheus每次从 pushgateway拉取的数据并不是期间用户推送上来的所有数据，而是client端最后一次push上来的数据。因此需设置client端向pushgateway端push数据的时间小于等于prometheus去pull数据的时间，这样一来可以保证prometheus的数据是最新的。 使用pushgateway的理由： 1、prometheus默认采用pull模式，由于不在一个网络或者防火墙的问题，导致prometheus 无法拉取各个节点的数据。 2、监控业务数据时，需要将不同数据汇总，然后由prometheus统一收集 pushgateway的缺陷： 1、多个节点的数据汇总到pushgateway，当它宕机后影响很大 2、pushgateway可以持续化推送所有的监控数据，即使监控已经下线，还会获取旧的监控数据。需手动清理不需要的数据 3、重启后数据丢失 部署安装pushgateway1docker run -d --name=pushgateway -p 9091:9091 -v /opt/pushgateway:/pushgateway --restart=always prom/pushgateway:latest prometheus配置1234567- job_name: &apos;pushgateway&apos; scrape_interval: 10s static_configs: - targets: - &apos;192.168.7.107:9091&apos; labels: instance: pushgateway 测试1echo &quot;some_metric 3.14&quot; | curl --data-binary @- http://192.168.7.107:9091/metrics/job/some_job 删除删除某个组下的某实例的所有数据： 1curl -X DELETE http://192.168.7.107:9091/metrics/job/some_job/instance/some_instance 删除某个组下的所有数据： 1curl -X DELETE http://192.168.7.107:9091/metrics/job/some_job]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[tornado-电话报警]]></title>
    <url>%2Fposts%2Faa774e96.html</url>
    <content type="text"><![CDATA[需求某些时候邮件，钉钉的报警我们在家里，或者周末是很少去观看的，这时候如果服务器出了问题，运维人员是没法第一时间排查到，所以短信和电话报警就很有必要去做。 已有阿里云的语音短信报警接口，故做了个端口电话报警。 电话报警脚本[root@aa phone_send]# cat send_model.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445# -*- coding:utf-8 -*-import requestsimport tornado.ioloopimport tornado.webphonenumber = &quot;xxxxxxx,xxxxxxx&quot;portdic = &#123; &quot;9876&quot;:&quot;服务类型MQ,端口9876&quot;, &quot;2181&quot;:&quot;服务类型ZK,端口2181&quot;, &quot;3306&quot;:&quot;服务类型数据库,端口3306&quot;, &quot;27017&quot;:&quot;服务类型数据库,端口27017&quot;, &quot;1908&quot;:&quot;服务类型spada,薛亮应用&quot;, &quot;53&quot;:&quot;服务类型dns,端口53&quot;, &quot;9200&quot;:&quot;服务类型es,端口9200&quot;, &quot;6379&quot;:&quot;服务类型redis,端口6379&quot;, &quot;80&quot;:&quot;服务类型nginx,端口80&quot;&#125;statusdic = &#123; &quot;PROBLEM&quot;:&quot;服务发生故障&quot;, &quot;OK&quot;:&quot;故障恢复&quot;&#125;class MainHandler(tornado.web.RequestHandler): def get(self): status = self.get_argument(&apos;status&apos;) endpoint = self.get_argument(&apos;endpoint&apos;) metric = self.get_argument(&apos;metric&apos;) tags = self.get_argument(&apos;tags&apos;) statusok = statusdic.get(status) port = tags.split(&quot;:&quot;)[1] p_endpoint = endpoint.split(&quot;.&quot;) del(p_endpoint[0]) portmes = portdic.get(port) if portmes == None: portmes = &quot;端口&quot; + port # 短信 requests.get(&quot;http://域名/send_sms/%s,%s,%s,%s/%s&quot;%(statusok,endpoint,metric,portmes,phonenumber)) # 电话 requests.get(&quot;http://域名/send_phone/%s%s%s%s/%s&quot;%(statusok,p_endpoint,metric,portmes,phonenumber)) message = status + endpoint + metric + tags print(status,endpoint,metric,tags,port)application = tornado.web.Application([(r&quot;/message&quot;, MainHandler), ])if __name__ == &quot;__main__&quot;: application.listen(8868) tornado.ioloop.IOLoop.instance().start() 执行1python3 send_model.py callback接口http://ip:8868/message openfalcon监控做模板]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[tornado-hello]]></title>
    <url>%2Fposts%2F6fd83cc1.html</url>
    <content type="text"><![CDATA[概念Tornado是一个Python Web框架和异步网络库，最初是在FriendFeed上开发的。通过使用非阻塞网络I / O，Tornado可以扩展到数万个开放连接，使其成为长轮询， WebSockets和其他需要与每个用户建立长期连接的应用程序的理想选择 。 安装1pip3 install tornado 简单的web12345678910111213import tornado.ioloopimport tornado.webclass MainHandler(tornado.web.RequestHandler): def get(self): self.write(&quot;Hello, world&quot;)if __name__ == &quot;__main__&quot;: application = tornado.web.Application([ (r&quot;/index&quot;, MainHandler), ]) application.listen(8888) tornado.ioloop.IOLoop.current().start() 访问http://ip:8888/index]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[fabric-ca部署]]></title>
    <url>%2Fposts%2F86326b76.html</url>
    <content type="text"><![CDATA[部署一个fabric-ca创建一个由两个组织org1.example.com和org2.example.com组成的的联盟1234567891011121314151617181920还有一个组织example.com用来部署orderer。组织example.com部署了一个solo模式的orderer。（多个orderer的部署方式，以后探讨）orderer.example.com组织org1.example.com部署了两个peer:peer0.org1.example.compeer1.org1.example.com组织org2.example.com部署了一个peer:peer0.org2.example.com每个组织都要有一个Admin用户，每个组件(peer/orderer)也需要一个账号，因此需要通过FabricCA创建7个用户：example.com: Admin@example.com orderer.example.comorg1.example.com: Admin@org1.example.com peer0.org1.example.com peer1.org1.example.com org2.example.com: Admin@org2.example.com peer0.org2.example.com这里只创建了Admin用户和每个组件的账号，普通用户的创建方式相同，只是普通用户的证书不需要添加到目标组件的admincerts目录中。或者说一个用户的证书如果被添加到了对应组织或组件的msp/admincerts目录中，那么这个用户就称为对应的管理员。 启动fabric-ca123456789101112131415161718192021fabirc-ca的编译：$ go get -u github.com/hyperledger/fabric-ca$ cd $GOPATH/src/github.com/hyperledger/fabric-ca$ make fabric-ca-server$ make fabric-ca-client$ ls bin/fabric-ca-client fabric-ca-server这里将fabric-ca部署在/opt/app/fabric-ca/server目录中：mkdir -p /opt/app/fabric-ca/servercp -rf $GOPATH/src/github.com/hyperledger/fabric-ca/bin/* /opt/app/fabric-ca/serverln -s /opt/app/fabric-ca/server/fabric-ca-client /usr/bin/fabric-ca-client直接启动ca，fabric-ca admin的名称为admin，密码为pass。(这里只是演示，生产中使用，你需要根据实际的情况配置)cd /opt/app/fabric-ca/server./fabric-ca-server start -b admin:pass &amp;如果有删除联盟和删除用户的需求，需要用下面的方式启动：cd /opt/app/fabric-ca/server./fabric-ca-server start -b admin:pass --cfg.affiliations.allowremove --cfg.identities.allowremove &amp; 生成fabric-ca admin的凭证123456789101112mkdir /root/fabric-deploycd ~/fabric-deploymkdir fabric-ca-files 生成fabric-ca admin的凭证，用-H参数指定client目录：mkdir -p `pwd`/fabric-ca-files/adminfabric-ca-client enroll -u http://admin:pass@localhost:7054 -H `pwd`/fabric-ca-files/admin也可以用环境变量FABRIC_CA_CLIENT_HOME指定了client的工作目录，生成的用户凭证将存放在这个目录中。export FABRIC_CA_CLIENT_HOME=`pwd`/fabric-ca-files/adminmkdir -p $FABRIC_CA_CLIENT_HOMEfabric-ca-client enroll -u http://admin:pass@localhost:7054 创建联盟123456789101112131415161718192021222324252627282930上面的启动方式默认会创建两个组织：$ fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation list2018/05/07 02:36:46 [INFO] [::1]:56148 GET /affiliations 200 0 &quot;OK&quot;affiliation: . affiliation: org2 affiliation: org2.department1 affiliation: org1 affiliation: org1.department1 affiliation: org1.department2为了查看信息的时候，看到的输出比较简洁，用下面的命令将其删除：fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation remove --force org1fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation remove --force org2执行下面命令创建联盟：fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation add com fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation add com.examplefabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation add com.example.org1fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation add com.example.org2注意：联盟是有层级的。创建联盟如下：$ fabric-ca-client -H `pwd`/fabric-ca-files/admin affiliation list2018/04/28 15:19:34 [INFO] 127.0.0.1:38160 GET /affiliations 201 0 &quot;OK&quot;affiliation: com affiliation: com.example affiliation: com.example.org1 affiliation: com.example.org2 为每个组织准备msp12345678910111213141516171819202122232425262728293031323334353637就是从Fabric-CA中，读取出用来签署用户的根证书等。为example.com准备msp，将ca证书等存放example.com组织的目录中:mkdir -p ./fabric-ca-files/example.com/mspfabric-ca-client getcacert -M `pwd`/fabric-ca-files/example.com/msp //-M需要指定绝对路径命令执行结束后，会在fabric-ca-files/example.com/msp得到文件：$ tree fabric-ca-files/example.com/msp/example.com/msp/|-- cacerts| `-- localhost-7054.pem|-- intermediatecerts| `-- localhost-7054.pem|-- keystore`-- signcerts注意通过getcacert得到msp目录中只有CA证书，而且这里没有使用中间CA，fabric-ca-files/example.com/msp/intermediatecerts/localhost-7054.pem是一个空文件。同样的方式为org1.example.com获取msp:mkdir -p fabric-ca-files/org1.example.com/mspfabric-ca-client getcacert -M `pwd`/fabric-ca-files/org1.example.com/msp为org2.example.com准备msp:mkdir -p ./fabric-ca-files/org2.example.com/mspfabric-ca-client getcacert -M `pwd`/fabric-ca-files/org2.example.com/msp这里是用getcacert为每个组织准备需要的ca文件，在生成创始块的时候会用到。在1.1.0版本的fabric-ca中，只会生成用户在操作区块链的时候用到的证书和密钥，不会生成用来加密grpc通信的证书。这里复用之前用cryptogen生成的tls证书，需要将验证tls证书的ca添加到msp目录中，如下：cp -rf certs/ordererOrganizations/example.com/msp/tlscacerts fabric-ca-files/example.com/msp/cp -rf certs/peerOrganizations/org1.example.com/msp/tlscacerts/ fabric-ca-files/org1.example.com/msp/cp -rf certs/peerOrganizations/org2.example.com/msp/tlscacerts/ fabric-ca-files/org2.example.com/msp/如果在你的环境中，各个组件域名的证书，是由第三方CA签署的，就将第三方CA的根证书添加到msp/tlscacerts目录中。组织的msp目录中，包含都是CA根证书，分别是TLS加密的根证书，和用于身份验证的根证书。另外还需要admin用户的证书，后面的操作中会添加。 注册example.com的管理员Admin@example.com可以直接用命令行（命令比较长，这里用\\截断了）： 123fabric-ca-client register --id.name Admin@example.com --id.type client --id.affiliation &quot;com.example.org1&quot; \ --id.attrs &apos;&quot;hf.Registrar.Roles=client,orderer,peer,user&quot;,&quot;hf.Registrar.DelegateRoles=client,orderer,peer,user&quot;,\ hf.Registrar.Attributes=*,hf.GenCRL=true,hf.Revoker=true,hf.AffiliationMgr=true,hf.IntermediateCA=true,role=admin:ecert&apos; 也可以将命令行参数写在fabric-ca admin的配置文件fabric-ca-files/admin/fabric-ca-client-config.yaml中。 12$ ls fabric-ca-files/admin/admin/fabric-ca-client-config.yaml msp 为了演示清楚，这里使用修改配置文件的方式，将fabric-ca-files/admin/fabric-ca-client-config.yaml其中的id部分修改为： 1234567891011121314151617181920212223id: name: Admin@example.com type: client affiliation: com.example maxenrollments: 0 attributes: - name: hf.Registrar.Roles value: client,orderer,peer,user - name: hf.Registrar.DelegateRoles value: client,orderer,peer,user - name: hf.Registrar.Attributes value: &quot;*&quot; - name: hf.GenCRL value: true - name: hf.Revoker value: true - name: hf.AffiliationMgr value: true - name: hf.IntermediateCA value: true - name: role value: admin ecert: true 注意最后一行role属性，是我们自定义的属性，对于自定义的属性，要设置certs，在配置文件中需要单独设置ecert属性为true或者false。如果在命令行中，添加后缀:ecert表示true，例如: 1fabric-ca-client register --id.affiliation &quot;com.example.org1&quot; --id.attrs &quot;role=admin:ecert&quot; 直接执行下面的命令，即可完成用户`Admin@example.com`注册，注意这时候的注册使用fabricCA的admin账号完成的： 1fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password 如果不用--id.secret指定密码，会自动生成密码。 其它配置的含义是用户名为`Admin@example.com，类型是client，它能够管理com.example.*`下的用户，如下: 1234567891011--id.name Admin@example.com //用户名--id.type client //类型为client--id.affiliation &quot;com.example&quot; //权利访问hf.Registrar.Roles=client,orderer,peer,user //能够管理的用户类型hf.Registrar.DelegateRoles=client,orderer,peer,user //可以授权给子用户管理的用户类型hf.Registrar.Attributes=* //可以为子用户设置所有属性hf.GenCRL=true //可以生成撤销证书列表hf.Revoker=true //可以撤销用户hf.AffiliationMgr=true //能够管理联盟hf.IntermediateCA=true //可以作为中间CArole=admin:ecert //自定义属性 完成注册之后，还需生成Admin@example.com凭证： 1234$ mkdir -p ./fabric-ca-files/example.com/admin$ fabric-ca-client enroll -u http://Admin@example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/example.com/admin$ ls ./fabric-ca-files/example.com/adminfabric-ca-client-config.yaml msp/ 这时候可以用Admin@example.com的身份查看联盟： 123456$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/example.com/admin2018/04/28 15:35:10 [INFO] 127.0.0.1:38172 GET /affiliations 201 0 &quot;OK&quot;affiliation: com affiliation: com.example affiliation: com.example.org1 affiliation: com.example.org2 最后将Admin@example.com的证书复制到example.com/msp/admincerts/中： 12mkdir fabric-ca-files/example.com/msp/admincerts/cp fabric-ca-files/example.com/admin/msp/signcerts/cert.pem fabric-ca-files/example.com/msp/admincerts/ 注册org1.example.com的管理员Admin@org1.example.com为org1.example.com的管理员Admin@org1.example.com准备一个目录: 12cd ~/fabric-deploymkdir -p ./fabric-ca-files/org1.example.com/admin 将fabric-ca-files/admin/fabric-ca-client-config.yaml其中的id部分修改为： 1234567891011121314151617181920212223id: name: Admin@org1.example.com type: client affiliation: com.example.org1 maxenrollments: 0 attributes: - name: hf.Registrar.Roles value: client,orderer,peer,user - name: hf.Registrar.DelegateRoles value: client,orderer,peer,user - name: hf.Registrar.Attributes value: &quot;*&quot; - name: hf.GenCRL value: true - name: hf.Revoker value: true - name: hf.AffiliationMgr value: true - name: hf.IntermediateCA value: true - name: role value: admin ecert: true 注册： 1fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password 生成凭证： 123$ fabric-ca-client enroll -u http://Admin@org1.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org1.example.com/admin$ ls ./fabric-ca-files/org1.example.com/adminfabric-ca-client-config.yaml msp/ 查看联盟： 12345$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/org1.example.com/admin2018/05/04 15:42:53 [INFO] 127.0.0.1:51298 GET /affiliations 201 0 &quot;OK&quot;affiliation: com affiliation: com.example affiliation: com.example.org1 注意与`Admin@example.com`的区别，这里只能看到组织com.example.org1 将Admin@org1.example.com的证书复制到org1.example.com的msp/admincerts中： 12mkdir fabric-ca-files/org1.example.com/msp/admincerts/cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/msp/admincerts/ 在`Admin@org1.example.com目录`中也需要创建msp/admincerts目录，通过peer命令操作fabric的时候会要求admincerts存在： 12mkdir fabric-ca-files/org1.example.com/admin/msp/admincerts/ # 注意是org1.example.com/admin目录cp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/admin/msp/admincerts/ 另外，这里没有使用中间CA，将intermediatecerts中的空文件删除，否则peer会提示Warning： 1rm fabric-ca-files/org1.example.com/admin/msp/intermediatecerts/* 注册org2.example.com的管理员Admin@org2.example.com为org2.example.com的管理员Admin@org2.example.com准备一个目录: 12cd ~/fabric-deploymkdir -p ./fabric-ca-files/org2.example.com/admin 将fabric-ca-files/admin/fabric-ca-client-config.yaml其中的id部分修改为： 1234567891011121314151617181920212223id: name: Admin@org2.example.com type: client affiliation: com.example.org2 maxenrollments: 0 attributes: - name: hf.Registrar.Roles value: client,orderer,peer,user - name: hf.Registrar.DelegateRoles value: client,orderer,peer,user - name: hf.Registrar.Attributes value: &quot;*&quot; - name: hf.GenCRL value: true - name: hf.Revoker value: true - name: hf.AffiliationMgr value: true - name: hf.IntermediateCA value: true - name: role value: admin ecert: true 注册： 1fabric-ca-client register -H `pwd`/fabric-ca-files/admin --id.secret=password 生成凭证： 123$ fabric-ca-client enroll -u http://Admin@org2.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org2.example.com/admin$ ls ./fabric-ca-files/org2.example.com/adminfabric-ca-client-config.yaml msp/ 查看联盟： 12345$ fabric-ca-client affiliation list -H `pwd`/fabric-ca-files/org2.example.com/admin2018/05/02 16:49:00 [INFO] 127.0.0.1:50828 GET /affiliations 201 0 &quot;OK&quot;affiliation: com affiliation: com.example affiliation: com.example.org2 Admin@org2.example.com只能看到组织com.example.org2。 将Admin@org2.example.com的证书复制到org2.example.com的msp/admincerts中： 12mkdir fabric-ca-files/org2.example.com/msp/admincerts/cp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org2.example.com/msp/admincerts/ 在Admin@org2.example.com中也需要创建msp/admincerts目录，通过peer命令操作fabric的时候会要求admincerts存在： 12mkdir fabric-ca-files/org2.example.com/admin/msp/admincerts/cp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org2.example.com/admin/msp/admincerts/ 另外，这里没有使用中间CA，将intermediatecerts中的空文件删除，否则peer会提示Warning： 1rm fabric-ca-files/org2.example.com/admin/msp/intermediatecerts/* 各个组织分别使用自己的Admin账户创建其它账号example.com、org1.example.com、org2.example.com三个组织这时候可以分别使用自己的Admin账号创建子账号。 orderer.example.com使用`Admin@example.com注册账号orderer.example.com。注意这时候指定的目录是fabric-ca-files/example.com`/admin/。 修改fabric-ca-files/example.com/admin/fabric-ca-client-config.yaml: 123456789id: name: orderer.example.com type: orderer affiliation: com.example maxenrollments: 0 attributes: - name: role value: orderer ecert: true 注册以及生成凭证： 123fabric-ca-client register -H `pwd`/fabric-ca-files/example.com/admin --id.secret=passwordmkdir ./fabric-ca-files/example.com/ordererfabric-ca-client enroll -u http://orderer.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/example.com/orderer 将`Admin@example.com`的证书复制到fabric-ca-files/example.com/orderer/msp/admincerts： 12mkdir fabric-ca-files/example.com/orderer/msp/admincertscp fabric-ca-files/example.com/admin/msp/signcerts/cert.pem fabric-ca-files/example.com/orderer/msp/admincerts/ peer0.org1.example.com使用`Admin@org1.example.com注册账号peer0.org1.example.com。这时候指定的目录是fabric-ca-files/org1.example.com`/admin/。 修改fabric-ca-files/org1.example.com/admin/fabric-ca-client-config.yaml: 123456789id: name: peer0.org1.example.com type: peer affiliation: com.example.org1 maxenrollments: 0 attributes: - name: role value: peer ecert: true 注册以及生成凭证： 123fabric-ca-client register -H `pwd`/fabric-ca-files/org1.example.com/admin --id.secret=passwordmkdir ./fabric-ca-files/org1.example.com/peer0fabric-ca-client enroll -u http://peer0.org1.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org1.example.com/peer0 将`Admin@org1.example.com`的证书复制到fabric-ca-files/org1.example.com/peer0/msp/admincerts： 12mkdir fabric-ca-files/org1.example.com/peer0/msp/admincertscp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/peer0/msp/admincerts/ peer1.org1.example.com使用`Admin@org1.example.com注册账号peer1.org1.example.com。这时候指定的目录是fabric-ca-files/org1.example.com`/admin/。 修改fabric-ca-files/org1.example.com/admin/fabric-ca-client-config.yaml: 123456789id: name: peer1.org1.example.com type: peer affiliation: com.example.org1 maxenrollments: 0 attributes: - name: role value: peer ecert: true 注册以及生成凭证： 123fabric-ca-client register -H `pwd`/fabric-ca-files/org1.example.com/admin --id.secret=passwordmkdir ./fabric-ca-files/org1.example.com/peer1fabric-ca-client enroll -u http://peer1.org1.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org1.example.com/peer1 将`Admin@org1.example.com`的证书复制到fabric-ca-files/org1.example.com/peer1/msp/admincerts： 12mkdir fabric-ca-files/org1.example.com/peer1/msp/admincertscp fabric-ca-files/org1.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org1.example.com/peer1/msp/admincerts/ peer0.org2.example.com使用`Admin@org2.example.com注册账号peer0.org2.example.com。这时候指定的目录是fabric-ca-files/org2.example.com`/admin/。 修改fabric-ca-files/org2.example.com/admin/fabric-ca-client-config.yaml: 123456789id: name: peer0.org2.example.com type: peer affiliation: com.example.org2 maxenrollments: 0 attributes: - name: role value: peer ecert: true 注册以及生成凭证： 123fabric-ca-client register -H `pwd`/fabric-ca-files/org2.example.com/admin --id.secret=passwordmkdir ./fabric-ca-files/org2.example.com/peer0fabric-ca-client enroll -u http://peer0.org2.example.com:password@localhost:7054 -H `pwd`/fabric-ca-files/org2.example.com/peer0 将`Admin@org2.example.com`的证书复制到fabric-ca-files/org2.example.com/peer0/msp/admincerts： 12mkdir fabric-ca-files/org2.example.com/peer0/msp/admincertscp fabric-ca-files/org2.example.com/admin/msp/signcerts/cert.pem fabric-ca-files/org2.example.com/peer0/msp/admincerts/ 注意： 之前发现直接这么生成的证书，会少东西，需要在每个组织的msp目录下面配置下config.yaml 1234567891011[root@localhost msp]# pwd/data/fabric/fabric-ca-files/gzyb.vaccine.com/msp[root@localhost msp]# cat config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/localhost-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/localhost-7054.pem OrganizationalUnitIdentifier: peer]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控jvm]]></title>
    <url>%2Fposts%2F68dkdk23.html</url>
    <content type="text"><![CDATA[k8s的jvm监控在pod里面env将jmx环境变量加上，jar包可以本地挂载上 1-javaagent:/home/aa/config/prom-jvm-demo/jmx_prometheus_javaagent-0.3.1.jar=6060:/home/aa/config/prom-jvm-demo/simple-config.yml&quot; 在service添加： 123456789101112131415apiVersion: v1kind: Servicemetadata: name: prometheus-aa namespace: product annotations: prometheus.io/scrape: &quot;true&quot; prometheus.io/jvm-scrape: &quot;true&quot; prometheus.io/jvm-port: &quot;6060&quot; prometheus.io/jvm-path: &quot;/metrics&quot;spec: ports: - port: 6060 selector: app: aa prometheus配置1不用做任何配置 之后运行重读prometheus配置命令 1./reload-prometheus.sh grafana模板quot;__inputs&quot;: [ &#123; &quot;name&quot;: &quot;DS_K8S集群PROMETHEUS&quot;, &quot;label&quot;: &quot;k8s集群Prometheus&quot;, &quot;description&quot;: &quot;&quot;, &quot;type&quot;: &quot;datasource&quot;, &quot;pluginId&quot;: &quot;prometheus&quot;, &quot;pluginName&quot;: &quot;Prometheus&quot; &#125; ], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.4.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;datasource&quot;, &quot;id&quot;: &quot;prometheus&quot;, &quot;name&quot;: &quot;Prometheus&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;singlestat&quot;, &quot;name&quot;: &quot;Singlestat&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot; tomcat JVM Dashboard for JVM metrics with Prometheus / JMX Exporter&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 3066, &quot;graphTooltip&quot;: 0, &quot;id&quot;: null, &quot;iteration&quot;: 1566263556716, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorPostfix&quot;: false, &quot;colorPrefix&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;rgba(50, 172, 45, 0.97)&quot;, &quot;#ba43a9&quot;, &quot;rgba(245, 54, 54, 0.9)&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;description&quot;: &quot;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 0, &quot;y&quot;: 0 &#125;, &quot;hideTimeOverride&quot;: false, &quot;id&quot;: 10, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;minSpan&quot;: 4, &quot;nullPointMode&quot;: &quot;null&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_started_total&#123;kubernetes_pod_name=\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 20 &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM 总线程数&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 4, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 12, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_peak&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM 创建线程峰值&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 8, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 16, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_current&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;当前产生线程数&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#806eb7&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 12, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 14, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_daemon&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;守护进程线程数&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;100%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#bf1b00&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 16, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 18, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_deadlocked_monitor&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM 内线程死锁监视器数量&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;#6ed0e0&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 2, &quot;w&quot;: 4, &quot;x&quot;: 20, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 20, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_deadlocked&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM内线程死锁数&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 8, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 2 &#125;, &quot;id&quot;: 8, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_max&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,area=\&quot;heap\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;最大堆内存 &#123;&#123;kubernetes_pod_name&#125;&#125; &#123;&#123;kubernetes_host_ip&#125;&#125; &quot;, &quot;refId&quot;: &quot;A&quot; &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_init&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,area=\&quot;heap\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;初始化堆内存 &#123;&#123;kubernetes_pod_name&#125;&#125; &#123;&#123;kubernetes_host_ip&#125;&#125; &quot;, &quot;refId&quot;: &quot;B&quot; &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_init&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,area=\&quot;nonheap\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;初始化非堆内存 &#123;&#123;kubernetes_pod_name&#125;&#125; &#123;&#123;kubernetes_host_ip&#125;&#125; &quot;, &quot;refId&quot;: &quot;C&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;jvm 最大内存 / 初始化内存 / 初始化非内存&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 5, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 10 &#125;, &quot;id&quot;: 2, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: false, &quot;avg&quot;: true, &quot;current&quot;: false, &quot;hideEmpty&quot;: false, &quot;hideZero&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;repeat&quot;: null, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_used&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,area=\&quot;heap\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125;--[ &#123;&#123;kubernetes_pod_name&#125;&#125; ]已用堆内存&quot;, &quot;metric&quot;: &quot;jvm_memory_bytes_used&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 5 &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_used&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,area=\&quot;nonheap\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125;--[ &#123;&#123;kubernetes_pod_name&#125;&#125; ]已用非堆内存&quot;, &quot;refId&quot;: &quot;B&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;jvm 已用堆内存 / 已用非堆内存&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 4, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 19 &#125;, &quot;id&quot;: 3, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 2, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_current&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;]当前活跃线程&quot;, &quot;metric&quot;: &quot;jvm_threads_current&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;jvm_threads_daemon&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;]守护进程线程&quot;, &quot;metric&quot;: &quot;jvm_threads_daemon&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;活跃线程&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 2, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 19 &#125;, &quot;id&quot;: 4, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_classes_loaded&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;]&quot;, &quot;metric&quot;: &quot;jvm_classes_loaded&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;JVM 加载类数量&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: &quot;&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 26 &#125;, &quot;id&quot;: 5, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;rate(jvm_gc_collection_seconds_sum&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,gc=\&quot;PS MarkSweep\&quot;&#125;[1m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;] 年老带GC&quot;, &quot;metric&quot;: &quot;jvm_gc_collection_seconds_sum&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;rate(jvm_gc_collection_seconds_sum&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,gc=\&quot;PS Scavenge\&quot;&#125;[1m])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;] 新生代GC&quot;, &quot;refId&quot;: &quot;B&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;新生带GC / 年老带GC&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;s&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 7, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 26 &#125;, &quot;id&quot;: 6, &quot;legend&quot;: &#123; &quot;avg&quot;: false, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: false &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_gc_collection_seconds_count&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,gc=\&quot;PS MarkSweep\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;] 年老带GC次数&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;jvm_gc_collection_seconds_count&#123;kubernetes_pod_name=~\&quot;$kubernetes_pod_name\&quot;,gc=\&quot;PS Scavenge\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;kubernetes_host_ip&#125;&#125; [&#123;&#123;kubernetes_pod_name&#125;&#125;] 新生带GC次数&quot;, &quot;refId&quot;: &quot;B&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;新生代 / 年老带GC次数&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;none&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;refresh&quot;: &quot;30s&quot;, &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;JVM&quot;, &quot;prometheus&quot;, &quot;jmx_exporter&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;allValue&quot;: &quot;()&quot;, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;definition&quot;: &quot;label_values(jvm_memory_bytes_used,app)&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: true, &quot;label&quot;: &quot;请选择pod标签&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;pod_label&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(jvm_memory_bytes_used,app)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$&#123;DS_K8S集群PROMETHEUS&#125;&quot;, &quot;definition&quot;: &quot;label_values(jvm_memory_bytes_used&#123;app=\&quot;$pod_label\&quot;&#125;,kubernetes_pod_name)&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;请选择pod&quot;, &quot;multi&quot;: true, &quot;name&quot;: &quot;kubernetes_pod_name&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(jvm_memory_bytes_used&#123;app=\&quot;$pod_label\&quot;&#125;,kubernetes_pod_name)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-30m&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM&quot;, &quot;uid&quot;: &quot;PVQFY0Pmz&quot;, &quot;version&quot;: 31&#125; 外部tomcat监控添加jmx的jar包 1在tomcat的catalina.sh文件即可 prometheus配置： 12345- job_name: &apos;java&apos; scrape_interval: 10s static_configs: - targets: - &apos;192.168.xx.xx:6060&apos; 模板：quot;__inputs&quot;: [ &#123; &quot;name&quot;: &quot;VAR_JOB&quot;, &quot;type&quot;: &quot;constant&quot;, &quot;label&quot;: &quot;job&quot;, &quot;value&quot;: &quot;java&quot;, &quot;description&quot;: &quot;&quot; &#125; ], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.4.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;datasource&quot;, &quot;id&quot;: &quot;prometheus&quot;, &quot;name&quot;: &quot;Prometheus&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;singlestat&quot;, &quot;name&quot;: &quot;Singlestat&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot;Complete dashboard using metrics from prometheus JMX exporter, with drill down per job &gt; instance&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: 8563, &quot;graphTooltip&quot;: 0, &quot;id&quot;: null, &quot;iteration&quot;: 1566263511855, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#d44a3a&quot;, &quot;#e24d42&quot;, &quot;#299c46&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 3, &quot;x&quot;: 3, &quot;y&quot;: 0 &#125;, &quot;hideTimeOverride&quot;: false, &quot;id&quot;: 21, &quot;interval&quot;: null, &quot;links&quot;: [ &#123; &quot;dashboard&quot;: &quot;Tomcat dashboard&quot;, &quot;includeVars&quot;: true, &quot;keepTime&quot;: true, &quot;targetBlank&quot;: true, &quot;title&quot;: &quot;Tomcat dashboard&quot;, &quot;type&quot;: &quot;dashboard&quot;, &quot;url&quot;: &quot;/d/chanjarster-tomcat-dashboard/tomcat-dashboard&quot; &#125; ], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;up&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;0,1&quot;, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Status&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;UP&quot;, &quot;value&quot;: &quot;1&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;value&quot;: &quot;0&quot; &#125;, &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;DOWN&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 0, &quot;format&quot;: &quot;s&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 6, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 14, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;time() - process_start_time_seconds&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Uptime&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: null, &quot;format&quot;: &quot;dateTimeAsIso&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 10, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 15, &quot;interval&quot;: &quot;&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;process_start_time_seconds&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;*1000&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;35,50&quot;, &quot;title&quot;: &quot;Start time&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 0, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 7, &quot;x&quot;: 14, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 19, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;jdk&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;label_join(jvm_info&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;, \&quot;jdk\&quot;, \&quot;, \&quot;, \&quot;vendor\&quot;, \&quot;runtime\&quot;, \&quot;version\&quot;)&quot;, &quot;format&quot;: &quot;table&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM Version&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;50%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: null, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 6, &quot;y&quot;: 4 &#125;, &quot;id&quot;: 39, &quot;interval&quot;: &quot;&quot;, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;os_available_processors&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Available CPUs&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 10, &quot;y&quot;: 4 &#125;, &quot;id&quot;: 23, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;os_system_load_average&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;System load average&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: false, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#d44a3a&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;format&quot;: &quot;none&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 4, &quot;w&quot;: 4, &quot;x&quot;: 14, &quot;y&quot;: 4 &#125;, &quot;id&quot;: 38, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;rgba(31, 118, 189, 0.18)&quot;, &quot;full&quot;: false, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: false &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;os_open_file_descriptor_count&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;instant&quot;: true, &quot;intervalFactor&quot;: 1, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Open file descriptors&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;avg&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 1, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 8 &#125;, &quot;id&quot;: 29, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;os_system_cpu_load&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;System&quot;, &quot;refId&quot;: &quot;B&quot; &#125;, &#123; &quot;expr&quot;: &quot;os_process_cpu_load&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;JVM&quot;, &quot;refId&quot;: &quot;A&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;CPU load&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 1, &quot;format&quot;: &quot;percentunit&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 17 &#125;, &quot;id&quot;: 8, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;sortDesc&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;minSpan&quot;: 12, &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;repeat&quot;: &quot;memarea&quot;, &quot;repeatDirection&quot;: &quot;h&quot;, &quot;seriesOverrides&quot;: [ &#123; &quot;alias&quot;: &quot;Usage %&quot;, &quot;bars&quot;: true, &quot;color&quot;: &quot;#6d1f62&quot;, &quot;legend&quot;: false, &quot;lines&quot;: false, &quot;yaxis&quot;: 2, &quot;zindex&quot;: -1 &#125; ], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_used&#123;area=\&quot;$memarea\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Used&quot;, &quot;refId&quot;: &quot;A&quot; &#125;, &#123; &quot;expr&quot;: &quot; jvm_memory_bytes_max&#123;area=\&quot;$memarea\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Max&quot;, &quot;refId&quot;: &quot;B&quot; &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_bytes_used&#123;area=\&quot;$memarea\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125; / jvm_memory_bytes_max &gt;= 0&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Usage %&quot;, &quot;refId&quot;: &quot;C&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Memory area [$memarea]&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;percentunit&quot;, &quot;label&quot;: &quot;&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: &quot;1&quot;, &quot;min&quot;: &quot;0&quot;, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 0, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 17 &#125;, &quot;id&quot;: 5, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(jvm_gc_collection_seconds_sum&#123;job=\&quot;$job\&quot;,instance=~\&quot;$instance\&quot;&#125;[$__interval])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;60s&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;gc&#125;&#125;&quot;, &quot;metric&quot;: &quot;jvm_gc_collection_seconds_sum&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;GC time&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;s&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 26 &#125;, &quot;id&quot;: 2, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;sort&quot;: &quot;current&quot;, &quot;sortDesc&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;minSpan&quot;: 12, &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;repeat&quot;: &quot;mempool&quot;, &quot;repeatDirection&quot;: &quot;h&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_memory_pool_bytes_max&#123;pool=\&quot;$mempool\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Max&quot;, &quot;metric&quot;: &quot;jvm_memory_bytes_used&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 5 &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_pool_bytes_used&#123;pool=\&quot;$mempool\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Used&quot;, &quot;metric&quot;: &quot;jvm_memory_bytes_used&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 5 &#125;, &#123; &quot;expr&quot;: &quot;jvm_memory_pool_bytes_committed&#123;pool=\&quot;$mempool\&quot;,job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Committed&quot;, &quot;metric&quot;: &quot;jvm_memory_bytes_used&quot;, &quot;refId&quot;: &quot;C&quot;, &quot;step&quot;: 5 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Memory pool [$mempool]&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;bytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 26 &#125;, &quot;id&quot;: 4, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_classes_loaded&#123;job=\&quot;$job\&quot;, instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;loaded&quot;, &quot;metric&quot;: &quot;jvm_classes_loaded&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Class loading&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: &quot;&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 0, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 35 &#125;, &quot;id&quot;: 6, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;increase(jvm_gc_collection_seconds_count&#123;job=\&quot;$job\&quot;,instance=~\&quot;$instance\&quot;&#125;[$__interval])&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;interval&quot;: &quot;60s&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;&#123;&#123;gc&#125;&#125;&quot;, &quot;metric&quot;: &quot;&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;GC count increase&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 0, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 44 &#125;, &quot;id&quot;: 3, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;hideZero&quot;: true, &quot;max&quot;: true, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;jvm_threads_current&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;JVM current threads&quot;, &quot;metric&quot;: &quot;jvm_threads_current&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;jvm_threads_daemon&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 5, &quot;legendFormat&quot;: &quot;JVM daemon threads&quot;, &quot;metric&quot;: &quot;jvm_threads_daemon&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;step&quot;: 10 &#125;, &#123; &quot;expr&quot;: &quot;jvm_threads_deadlocked&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;JVM deadlocked threads&quot;, &quot;refId&quot;: &quot;C&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Threads used&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;decimals&quot;: 0, &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 10, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 53 &#125;, &quot;id&quot;: 44, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: true, &quot;min&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;expr&quot;: &quot;os_total_physical_memory_bytes&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Total physical memory&quot;, &quot;refId&quot;: &quot;A&quot; &#125;, &#123; &quot;expr&quot;: &quot;os_committed_virtual_memory_bytes&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Committed virtual memory&quot;, &quot;refId&quot;: &quot;B&quot; &#125;, &#123; &quot;expr&quot;: &quot;os_free_physical_memory_bytes&#123;job=\&quot;$job\&quot;,instance=\&quot;$instance\&quot;&#125;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;intervalFactor&quot;: 1, &quot;legendFormat&quot;: &quot;Free physical memory&quot;, &quot;refId&quot;: &quot;C&quot; &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeRegions&quot;: [], &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Physical memory&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;decbytes&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;refresh&quot;: &quot;10s&quot;, &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;JVM&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;current&quot;: &#123; &quot;tags&quot;: [], &quot;text&quot;: &quot;default&quot;, &quot;value&quot;: &quot;default&quot; &#125;, &quot;hide&quot;: 0, &quot;label&quot;: null, &quot;name&quot;: &quot;datasource&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;prometheus&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;type&quot;: &quot;datasource&quot; &#125;, &#123; &quot;current&quot;: &#123; &quot;value&quot;: &quot;$&#123;VAR_JOB&#125;&quot;, &quot;text&quot;: &quot;$&#123;VAR_JOB&#125;&quot; &#125;, &quot;hide&quot;: 0, &quot;label&quot;: &quot;job&quot;, &quot;name&quot;: &quot;job&quot;, &quot;options&quot;: [ &#123; &quot;value&quot;: &quot;$&#123;VAR_JOB&#125;&quot;, &quot;text&quot;: &quot;$&#123;VAR_JOB&#125;&quot; &#125; ], &quot;query&quot;: &quot;$&#123;VAR_JOB&#125;&quot;, &quot;skipUrlSync&quot;: false, &quot;type&quot;: &quot;constant&quot; &#125;, &#123; &quot;allValue&quot;: &quot;.*&quot;, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;definition&quot;: &quot;&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: &quot;instance&quot;, &quot;multi&quot;: false, &quot;name&quot;: &quot;instance&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(jvm_info&#123;job=\&quot;$job\&quot;&#125;,instance)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;definition&quot;: &quot;&quot;, &quot;hide&quot;: 2, &quot;includeAll&quot;: true, &quot;label&quot;: null, &quot;multi&quot;: true, &quot;name&quot;: &quot;mempool&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(jvm_memory_pool_bytes_max&#123;job=\&quot;$job\&quot;, instance=\&quot;$instance\&quot;&#125;, pool)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;definition&quot;: &quot;&quot;, &quot;hide&quot;: 2, &quot;includeAll&quot;: true, &quot;label&quot;: null, &quot;multi&quot;: true, &quot;name&quot;: &quot;memarea&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;label_values(jvm_memory_bytes_used&#123;job=\&quot;$job\&quot;, instance=\&quot;$instance\&quot;&#125;, area)&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;skipUrlSync&quot;: false, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-15m&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;&quot;, &quot;title&quot;: &quot;JVM tomcat&quot;, &quot;uid&quot;: &quot;0CjGA5kWz&quot;, &quot;version&quot;: 1&#125;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控mongo]]></title>
    <url>%2Fposts%2F440gqa86.html</url>
    <content type="text"><![CDATA[安装mongo插件123456789yum -y install glidegit clone git@github.com:dcu/mongodb_exporter.git $GOPATH/src/github.com/dcu/mongodb_exporter也可以去github上，下载源码，在编译安装cd $GOPATH/src/github.com/dcu/mongodb_exportermake build./mongodb_exporter -h注意：go环境需要提前安装好，可以编译也可以yum安装如果不会编译，可以通知本人，给你发编译后的包 启动1nohup ./mongodb_exporter --mongodb.uri &quot;mongodb://readonly:readonly@192.168.50.7:27017&quot; &amp; 上面是单点的，集群的话192.168.50.7:27017,192.168.50.8:27017 这样就可以 prometheus配置123456- job_name: mongo_exporter static_configs: - targets: - &apos;192.168.50.7:9001&apos; labels: service: mongo 导入模板https://grafana.com/dashboards/2583]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控elasticsearch]]></title>
    <url>%2Fposts%2F550bdf86.html</url>
    <content type="text"><![CDATA[安装监控插件12345wget https://github.com/justwatchcom/elasticsearch_exporter/releases/download/v1.0.4rc1/elasticsearch_exporter-1.0.4rc1.linux-amd64.tar.gz tar -zxvf elasticsearch_exporter-1.0.4rc1.linux-amd64.tar.gz cd elasticsearch_exporter-1.0.4rc1.linux-amd64/ nohup ./elasticsearch_exporter --web.listen-address &quot;:9109&quot; --es.uri http://192.168.50.153:9200 &amp; 启动成功后，可以访问 http://192.168.50.153:9109/metrics ，看抓取的信息 监控图表 指标 解析 ##搜索和索引性能 elasticsearch_indices_search_query_total 查询总数 吞吐量 elasticsearch_indices_search_query_time_seconds 查询总时间 性能 elasticsearch_indices_search_fetch_total 提取总数 elasticsearch_indices_search_fetch_time_seconds 花费在提取上的总时间 ##索引请求 elasticsearch_indices_indexing_index_total 索引的文件总数 elasticsearch_indices_indexing_index_time_seconds_total 索引文档总时间 elasticsearch_indices_indexing_delete_total 索引的文件删除总数 elasticsearch_indices_indexing_delete_time_seconds_total 索引的文件删除总时间 elasticsearch_indices_refresh_total 索引刷新总数 elasticsearch_indices_refresh_time_seconds_total 刷新指数的总时间 elasticsearch_indices_flush_total 索引刷新总数到磁盘 elasticsearch_indices_flush_time_seconds 将索引刷新到磁盘上的总时间 累计flush时间 ##JVM内存和垃圾回收 elasticsearch_jvm_gc_collection_seconds_sum GC run time in seconds垃圾回收时间 elasticsearch_jvm_gc_collection_seconds_count Count of JVM GC runs垃圾搜集数 elasticsearch_jvm_memory_committed_bytes JVM memory currently committed by area最大使用内存限制 elasticsearch_jvm_memory_max_bytes 配置的最大jvm值 elasticsearch_jvm_memory_pool_max_bytes JVM内存最大池数 elasticsearch_jvm_memory_pool_peak_max_bytes 最大的JVM内存峰值 elasticsearch_jvm_memory_pool_peak_used_bytes 池使用的JVM内存峰值 elasticsearch_jvm_memory_pool_used_bytes 目前使用的JVM内存池 elasticsearch_jvm_memory_used_bytes JVM memory currently used by area 内存使用量 ##集群健康和节点可用性 elasticsearch_cluster_health_status 集群状态，green（ 所有的主分片和副本分片都正常运行）、yellow（所有的主分片都正常运行，但不是所有的副本分片都正常运行）red（有主分片没能正常运行）值为1的即为对应状态 elasticsearch_cluster_health_number_of_data_nodes node节点的数量 elasticsearch_cluster_health_number_of_in_flight_fetch 正在进行的碎片信息请求的数量 elasticsearch_cluster_health_number_of_nodes 集群内所有的节点 elasticsearch_cluster_health_number_of_pending_tasks 尚未执行的集群级别更改 elasticsearch_cluster_health_initializing_shards 正在初始化的分片数 elasticsearch_cluster_health_unassigned_shards 未分配分片数 elasticsearch_cluster_health_active_primary_shards 活跃的主分片总数 elasticsearch_cluster_health_active_shards 活跃的分片总数（包括复制分片） elasticsearch_cluster_health_relocating_shards 当前节点正在迁移到其他节点的分片数量，通常为0，集群中有节点新加入或者退出时该值会增加 ##资源饱和度 elasticsearch_thread_pool_completed_count 线程池操作完成（bulk、index、search、force_merge） elasticsearch_thread_pool_active_count 线程池线程活动（bulk、index、search、force_merge） elasticsearch_thread_pool_largest_count 线程池最大线程数（bulk、index、search、force_merge） elasticsearch_thread_pool_queue_count 线程池中的排队线程数（bulk、index、search、force_merge） elasticsearch_thread_pool_rejected_count 线程池的被拒绝线程数（bulk、index、search、force_merge） elasticsearch_indices_fielddata_memory_size_bytes fielddata缓存的大小（字节） elasticsearch_indices_fielddata_evictions 来自fielddata缓存的驱逐次数 elasticsearch_indices_filter_cache_evictions 来自过滤器缓存的驱逐次数（仅版本2.x） elasticsearch_indices_filter_cache_memory_size_bytes 过滤器高速缓存的大小（字节）（仅版本2.x） elasticsearch_cluster_health_number_of_pending_tasks 待处理任务数 elasticsearch_indices_get_time_seconds elasticsearch_indices_get_missing_total 丢失的文件的GET请求总数 elasticsearch_indices_get_missing_time_seconds 花费在文档丢失的GET请求上的总时间 elasticsearch_indices_get_exists_time_seconds elasticsearch_indices_get_exists_total elasticsearch_indices_get_total ##主机级别的系统和网络指标 elasticsearch_process_cpu_percent Percent CPU used by process CPU使用率 elasticsearch_filesystem_data_free_bytes Free space on block device in bytes 磁盘可用空间 elasticsearch_process_open_files_count Open file descriptors ES进程打开的文件描述符 elasticsearch_transport_rx_packets_total Count of packets receivedES节点之间网络入流量 elasticsearch_transport_tx_packets_total Count of packets sentES节点之间网络出流量 prometheus配置123456789101112131415161718- job_name: &apos;elasticsearch&apos; scrape_interval: 60s scrape_timeout: 30s metrics_path: &quot;/metrics&quot; static_configs: - targets: - &apos;192.168.50.153:9109&apos; labels: service: elasticsearch relabel_configs: - source_labels: [__address__] regex: &apos;(.*)\:9109&apos; target_label: &apos;instance&apos; replacement: &apos;$1&apos; - source_labels: [__address__] regex: &apos;.*\.(.*)\.lan.*&apos; target_label: &apos;environment&apos; replacement: &apos;$1&apos; 之后运行重读prometheus配置命令 1./reload-prometheus.sh grafana模板1https://grafana.com/dashboards/2322 报警配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283groups:- name: elasticsearchStatsAlert rules: - alert: Elastic_Cluster_Health_RED expr: elasticsearch_cluster_health_status&#123;color=&quot;red&quot;&#125;==1 for: 1m labels: severity: critical annotations: summary: &quot;Instance &#123;&#123; $labels.instance &#125;&#125;: not all primary and replica shards are allocated in elasticsearch cluster &#123;&#123; $labels.cluster &#125;&#125;&quot; description: &quot;Instance &#123;&#123; $labels.instance &#125;&#125;: not all primary and replica shards are allocated in elasticsearch cluster &#123;&#123; $labels.cluster &#125;&#125;.&quot; - alert: Elastic_Cluster_Health_Yellow expr: elasticsearch_cluster_health_status&#123;color=&quot;yellow&quot;&#125;==1 for: 1m labels: severity: critical annotations: summary: &quot; Instance &#123;&#123; $labels.instance &#125;&#125;: not all primary and replica shards are allocated in elasticsearch cluster &#123;&#123; $labels.cluster &#125;&#125;&quot; description: &quot;Instance &#123;&#123; $labels.instance &#125;&#125;: not all primary and replica shards are allocated in elasticsearch cluster &#123;&#123; $labels.cluster &#125;&#125;.&quot; - alert: Elasticsearch_JVM_Heap_Too_High expr: elasticsearch_jvm_memory_used_bytes&#123;area=&quot;heap&quot;&#125; / elasticsearch_jvm_memory_max_bytes&#123;area=&quot;heap&quot;&#125; &gt; 0.8 for: 1m labels: severity: critical annotations: summary: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125; heap usage is high &quot; description: &quot;The heap in &#123;&#123; $labels.instance &#125;&#125; is over 80% for 15m.&quot; - alert: Elasticsearch_health_up expr: elasticsearch_cluster_health_up !=1 for: 1m labels: severity: critical annotations: summary: &quot; ElasticSearch node: &#123;&#123; $labels.instance &#125;&#125; last scrape of the ElasticSearch cluster health failed&quot; description: &quot;ElasticSearch node: &#123;&#123; $labels.instance &#125;&#125; last scrape of the ElasticSearch cluster health failed&quot; - alert: Elasticsearch_Too_Few_Nodes_Running expr: elasticsearch_cluster_health_number_of_nodes &lt; 12 for: 1m labels: severity: critical annotations: summary: &quot;There are only &#123;&#123;$value&#125;&#125; &lt; 12 ElasticSearch nodes running &quot; description: &quot;lasticSearch running on less than 12 nodes(total 14)&quot; - alert: Elasticsearch_Count_of_JVM_GC_Runs expr: rate(elasticsearch_jvm_gc_collection_seconds_count&#123;&#125;[5m])&gt;5 for: 1m labels: severity: critical annotations: summary: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: Count of JVM GC runs &gt; 5 per sec and has a value of &#123;&#123; $value &#125;&#125; &quot; description: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: Count of JVM GC runs &gt; 5 per sec and has a value of &#123;&#123; $value &#125;&#125;&quot; - alert: Elasticsearch_GC_Run_Time expr: rate(elasticsearch_jvm_gc_collection_seconds_sum[5m])&gt;0.3 for: 1m labels: severity: critical annotations: summary: &quot; ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: GC run time in seconds &gt; 0.3 sec and has a value of &#123;&#123; $value &#125;&#125;&quot; description: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: GC run time in seconds &gt; 0.3 sec and has a value of &#123;&#123; $value &#125;&#125;&quot; - alert: Elasticsearch_json_parse_failures expr: elasticsearch_cluster_health_json_parse_failures&gt;0 for: 1m labels: severity: critical annotations: summary: &quot; ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: json parse failures &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; description: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: json parse failures &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; - alert: Elasticsearch_breakers_tripped expr: rate(elasticsearch_breakers_tripped&#123;&#125;[5m])&gt;0 for: 1m labels: severity: critical annotations: summary: &quot; ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: breakers tripped &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; description: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: breakers tripped &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; - alert: Elasticsearch_health_timed_out expr: elasticsearch_cluster_health_timed_out&gt;0 for: 1m labels: severity: critical annotations: summary: &quot; ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: Number of cluster health checks timed out &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; description: &quot;ElasticSearch node &#123;&#123; $labels.instance &#125;&#125;: Number of cluster health checks timed out &gt; 0 and has a value of &#123;&#123; $value &#125;&#125;&quot; elasticsearch-7.x监控123456789101112131415161718192021Since Elasticsearch 7.0.0 : ./bin/elasticsearch-plugin install -b https://github.com/vvanholl/elasticsearch-prometheus-exporter/releases/download/7.2.1.0/prometheus-exporter-7.2.1.0.zipSince Elasticsearch 6.0.0 : ./bin/elasticsearch-plugin install -b https://github.com/vvanholl/elasticsearch-prometheus-exporter/releases/download/6.8.0.0/prometheus-exporter-6.8.0.0.zipOn Elasticsearch 5.x.x : ./bin/elasticsearch-plugin install -b https://github.com/vvanholl/elasticsearch-prometheus-exporter/releases/download/5.6.16.0/elasticsearch-prometheus-exporter-5.6.16.0.zipOn old 2.x.x versions : ./bin/plugin install https://github.com/vvanholl/elasticsearch-prometheus-exporter/releases/download/2.4.1.0/elasticsearch-prometheus-exporter-2.4.1.0.zipDo not forget to restart the node after the installation!Note that the plugin needs the following special permissions:java.lang.RuntimePermission accessClassInPackage.sun.miscjava.lang.RuntimePermission accessDeclaredMembersjava.lang.reflect.ReflectPermission suppressAccessChecksIf you have a lot of indices and think this data is irrelevant, you can disable in the main configuration file:prometheus.indices: falseTo disable exporting cluster settings use:prometheus.cluster.settings: false 123456UninstallSince Elasticsearch 6.0.0: ./bin/elasticsearch-plugin remove prometheus-exporterOn Elasticsearch 5.x.x: ./bin/elasticsearch-plugin remove prometheus-exporterOn old 2.x.x versions: ./bin/plugin remove prometheus-exporter prometheus配置12345678- job_name: elasticsearch scrape_interval: 10s metrics_path: &quot;/_prometheus/metrics&quot; static_configs: - targets: - node1:9200 - node2:9200 - node3:9200 带账号密码： 1234567891011- job_name: &apos;elastic-cluster&apos; scrape_interval: 10s metrics_path: &apos;/_prometheus/metrics&apos; static_configs: - targets: - &apos;node1:9200&apos; - &apos;node2:9200&apos; - &apos;node3:9200&apos; basic_auth: username: &apos;elastic&apos; password: &apos;elastic&apos; grafana1https://grafana.com/grafana/dashboards/266]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus删除数据指标]]></title>
    <url>%2Fposts%2F354cfft6.html</url>
    <content type="text"><![CDATA[概述有的时候我们可能希望从 Prometheus 中删除一些不需要的数据指标，或者只是单纯的想要释放一些磁盘空间。Prometheus 中的时间序列只能通过 HTTP API 来进行管理。 默认情况下，管理时间序列的 API 是被禁用的，要启用它，我们需要在 Prometheus 的启动参数中添加--web.enable-admin-api这个参数，比如我们前面的文章中通过 Kubernetes Pod 来部署的，则同样需要添加上这个参数 12345678command:- &quot;/bin/prometheus&quot;args:- &quot;--config.file=/etc/prometheus/prometheus.yml&quot;- &quot;--storage.tsdb.path=/prometheus&quot;- &quot;--storage.tsdb.retention=24h&quot;- &quot;--web.enable-admin-api&quot; # 控制对admin HTTP API的访问，其中包括删除时间序列等功能- &quot;--web.enable-lifecycle&quot; # 支持热更新，直接执行localhost:9090/-/reload立即生效 删除时间序列指标控制管理 API 启用后，可以使用下面的语法来删除与某个标签匹配的所有时间序列指标： 1curl -X POST -g &apos;http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=&#123;kubernetes_name=&quot;redis&quot;&#125;&apos; 上面命令就可以用于删除具有标签kubernetes_name=&quot;redis&quot;的时间序列指标。 如果要删除一些 job 任务或者 instance 的数据指标，则可以使用下面的命令： 12curl -X POST -g &apos;http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=&#123;job=&quot;kubernetes-service-endpoints&quot;&#125;&apos;curl -X POST -g &apos;http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=&#123;instance=&quot;10.244.2.158:9090&quot;&#125;&apos; 要从 Prometheus 中删除所有的数据，可以使用如下命令： 1curl -X POST -g &apos;http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=&#123;__name__=~&quot;.+&quot;&#125;&apos; 不过需要注意的是上面的 API 调用并不会立即删除数据，实际数据任然还存在磁盘上，会在后面进行数据清理。 要确定何时删除旧数据，可以使用--storage.tsdb.retention参数进行配置（默认情况下，Prometheus 会将数据保留15天）。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Prometheus监控]]></title>
    <url>%2Fposts%2Fe2e612d1.html</url>
    <content type="text"><![CDATA[在Kubernetes上快速部署Prometheus创建一个新的命名空间12345678[root@prometheus]# cat monitor_namespace.yaml apiVersion: v1kind: Namespacemetadata: name: monitor labels: name: monitor[root@prometheus]#kubectl create -f monitor_namespace.yaml rbac文件12345678910111213141516171819202122232425262728293031323334353637383940414243[root@prometheus]# cat rbac-setup.yaml apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata: name: prometheusrules:- apiGroups: [&quot;&quot;] resources: - nodes - nodes/proxy - services - endpoints - pods verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]- apiGroups: - extensions resources: - ingresses verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]- nonResourceURLs: [&quot;/metrics&quot;] verbs: [&quot;get&quot;]---apiVersion: v1kind: ServiceAccountmetadata: name: prometheus namespace: monitor---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: prometheusroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: prometheussubjects:- kind: ServiceAccount name: prometheus namespace: monitor [root@prometheus]#kubectl create -f rbac-setup.yaml prometheus-deploy文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373[root@prometheus]# cat configmap.yamlapiVersion: v1kind: ConfigMapmetadata: name: prometheus-config namespace: monitordata: #被引用到/etc/prometheus/prometheus.yml prometheus.yml: | global: #每15s采集一次数据和15s做一次告警检测 scrape_interval: 15s evaluation_interval: 15s #指定加载的告警规则文件 rule_files: - /etc/prometheus/rules.yml #将报警送至何地进行报警 alerting: alertmanagers: - static_configs: - targets: [&quot;192.168.50.60:9093&quot;] #指定prometheus要监控的目标 scrape_configs: - job_name: &apos;k8s-node&apos; scrape_interval: 10s static_configs: - targets: - &apos;192.168.50.61:31672&apos; #自定义获取监控数据,每个 job_name 都是独立的 - job_name: &apos;tomcat-pods&apos; tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token kubernetes_sd_configs: - role: endpoints relabel_configs: - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape, __meta_kubernetes_service_annotation_prometheus_io_jvm_scrape] regex: true;true action: keep - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_app_metrics_patn] action: replace target_label: __metrics_path__ regex: (.+) - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_service_annotation_prometheus_io_app_metrics_port] action: replace target_label: __address__ regex: (.+);(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_pod_name] action: replace target_label: kubernetes_pod_name - action: labelmap regex: __meta_kubernetes_pod_label_(.+) - source_labels: [__meta_kubernetes_pod_host_ip] action: replace target_label: kubernetes_host_ip - job_name: &apos;kubernetes-apiservers&apos; kubernetes_sd_configs: - role: endpoints scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name] action: keep regex: default;kubernetes;https - job_name: &apos;kubernetes-nodes&apos; kubernetes_sd_configs: - role: node scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics - job_name: &apos;kubernetes-cadvisor&apos; kubernetes_sd_configs: - role: node scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor - job_name: &apos;kubernetes-service-endpoints&apos; kubernetes_sd_configs: - role: endpoints relabel_configs: - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape] action: keep regex: true - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme] action: replace target_label: __scheme__ regex: (https?) - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path] action: replace target_label: __metrics_path__ regex: (.+) - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port] action: replace target_label: __address__ regex: ([^:]+)(?::\d+)?;(\d+) replacement: $1:$2 - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] action: replace target_label: kubernetes_name - job_name: &apos;kubernetes-services&apos; kubernetes_sd_configs: - role: service metrics_path: /probe params: module: [http_2xx] relabel_configs: - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe] action: keep regex: true - source_labels: [__address__] target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] target_label: kubernetes_name - job_name: &apos;kubernetes-ingresses&apos; kubernetes_sd_configs: - role: ingress relabel_configs: - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe] action: keep regex: true - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path] regex: (.+);(.+);(.+) replacement: $&#123;1&#125;://$&#123;2&#125;$&#123;3&#125; target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_ingress_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_ingress_name] target_label: kubernetes_name - job_name: &apos;kubernetes-pods&apos; kubernetes_sd_configs: - role: pod relabel_configs: - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape] action: keep regex: true - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path] action: replace target_label: __metrics_path__ regex: (.+) - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port] action: replace regex: ([^:]+)(?::\d+)?;(\d+) replacement: $1:$2 target_label: __address__ - action: labelmap regex: __meta_kubernetes_pod_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_pod_name] action: replace target_label: kubernetes_pod_name # 监控规则文件,被引用到/etc/prometheus/rules.yml rules.yml: | groups: - name: test-rule rules: ############# Node监控 ############# - alert: k8s-node状态异常 expr: up&#123;job=&quot;k8s-node&quot;&#125; != 1 for: 3m labels: team: k8s-node annotations: summary: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点状态异常&quot; description: &quot;可能是重启了&quot; - alert: k8s-node节点CPU使用率 expr: (1 - avg(irate(node_cpu_seconds_total&#123;job=&quot;k8s-node&quot;,mode=&quot;idle&quot;&#125;[1m])) by (instance)) * 100 &gt; 95 for: 1m labels: team: k8s-node annotations: summary: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点CPU使用率超过95%&quot; description: &quot;&#123;&#123;$labels.instance&#125;&#125;: Node节点当前CPU使用率为: &#123;&#123; $value &#125;&#125;&quot; - alert: k8s-node节点磁盘使用率 expr: (node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125; - node_filesystem_avail_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125;) / node_filesystem_size_bytes&#123;mountpoint=&quot;/&quot;,job=&quot;k8s-node&quot;&#125; * 100 &gt; 85 for: 1m labels: team: k8s-node annotations: description: &quot;Node服务器[[ &#123;&#123;$labels.instance&#125;&#125; ]] 的 &#123;&#123;mountpoint&#125;&#125; 磁盘空间使用率超过85%&quot; summary: &quot;磁盘 &#123;&#123;$labels.device&#125;&#125; 当前使用率为: &#123;&#123; $value &#125;&#125;&quot; - alert: k8s-node节点内存使用率 expr: (node_memory_MemTotal_bytes&#123;job=&quot;k8s-node&quot;&#125; - (node_memory_Buffers_bytes&#123;job=&quot;k8s-node&quot;&#125; + node_memory_Cached_bytes&#123;job=&quot;k8s-node&quot;&#125; + node_memory_MemFree_bytes&#123;job=&quot;k8s-node&quot;&#125;)) / node_memory_MemTotal_bytes&#123;job=&quot;k8s-node&quot;&#125; * 100 for: 1m labels: team: k8s-node annotations: description: &quot;Node服务器[[ &#123;&#123;$labels.instance&#125;&#125; ]] 内存使用率超过95%&quot; summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 当前内存使用率为: &#123;&#123; $value &#125;&#125;&quot; ############ Pod 监控 ############ - alert: 监控k8s的pod状态异常 expr: up&#123;kubernetes_namespace=&quot;monitor&quot;&#125; != 1 for: 3m labels: team: &quot;kube-state-metrics&quot; annotations: description: &quot;&#123;&#123;$labels.kubernetes_namespace&#125;&#125; 内的 pod 状态有变动&quot; summary: &quot;此 Pod 用于获取 k8s 监控数据, 绑定在一个节点上&quot; - alert: 应用的 pod 状态有变动 expr: kube_pod_container_status_ready&#123;namespace=&quot;product&quot;&#125; != 1 for: 3m labels: status: &quot;product 命名空间内的 pod &#123;&#123;$labels.pod&#125;&#125;有变动&quot; annotations: description: &quot;Deployment &#123;&#123;$labels.container&#125;&#125; 内的 pod 状态有变动&quot; summary: &quot;可能是重启或者在升级版本,如果频繁重启,请跟踪排查问题&quot; - alert: 以下应用的 pod 重启次数已经超过15,请查看原因 expr: kube_pod_container_status_restarts_total&#123;namespace=&quot;product&quot;&#125; &gt; 15 for: 3m labels: status: &quot;product 命名空间内的 pod &#123;&#123;$labels.pod&#125;&#125; 重启次数太多&quot; annotations: description: &quot;Deployment &#123;&#123;$labels.container&#125;&#125; 内的 pod 重启次数太多&quot; summary: &quot;重启次数太多,可能是因为 pod 内应用有问题&quot; ########### Java 监控 ############ - alert: jvm线程数过高 expr: jvm_threads_current&#123;job=&quot;tomcat-pods&quot;&#125;&gt;2000 for: 1m labels: status: &quot;空间内 jvm 的变动情况&quot; annotations: description: &quot;&#123;&#123;$labels.kubernetes_pod_name&#125;&#125;: Jvm线程数过高&quot; summary: &apos;&#123;&#123; $labels.kubernetes_pod_name &#125;&#125; : 当前你线程值为: &#123;&#123; $value &#125;&#125;&apos; [root@prometheus]# cat prometheus.deploy.yml ---apiVersion: apps/v1beta2kind: Deploymentmetadata: labels: name: prometheus-deployment name: prometheus namespace: monitorspec: replicas: 1 selector: matchLabels: app: prometheus template: metadata: labels: app: prometheus spec: containers: - image: prom/prometheus:v2.6.0 name: prometheus command: - &quot;/bin/prometheus&quot; args: - &quot;--config.file=/etc/prometheus/prometheus.yml&quot; - &quot;--storage.tsdb.path=/home/prometheus&quot; - &quot;--storage.tsdb.retention=168h&quot; - &quot;--web.enable-lifecycle&quot; ports: - containerPort: 9090 protocol: TCP volumeMounts: - mountPath: &quot;/home/prometheus&quot; name: data - mountPath: &quot;/etc/prometheus&quot; name: config-volume - mountPath: &quot;/etc/localtime&quot; readOnly: false name: localtime resources: requests: cpu: 100m memory: 2048Mi limits: cpu: 500m memory: 3180Mi serviceAccountName: prometheus nodeSelector: nodetype: prometheus volumes: - name: data hostPath: path: &quot;/opt/prometheus/data&quot; - name: config-volume configMap: name: prometheus-config - name: localtime hostPath: path: &quot;/etc/localtime&quot; type: File [root@prometheus]# cat prometheus.svc.yml ---kind: ServiceapiVersion: v1metadata: labels: app: prometheus name: prometheus namespace: monitorspec: type: NodePort ports: - port: 9090 targetPort: 9090 nodePort: 30003 selector: app: prometheus [root@prometheus]#kubectl create -f configmap.yaml[root@prometheus]#kubectl create -f prometheus.deploy.yml[root@prometheus]#kubectl create -f prometheus.svc.yml注：需要在本地创建/opt/prometheus/data作为prometheus数据路径，另需要给data目录赋予777权限 热重读配置文件congfigmap有热重启功能，这样每次改完配置文件都不需要重启prometheus的pod来重读配置了 123456789- &quot;--web.enable-lifecycle&quot;在prometheus.deploy.yml的配置文件里面加上这段话就可以了[root@prometheus]# cat reload-prometheus.sh #!/bin/bashkubectl apply -f configmap.yamlsleep 60curl -XPOST http://192.168.50.60:30003/-/reload可以写个脚本，每次修改完配置文件的配置之后，执行一下脚本就可以同步生效了！ 安装kube-state-metrics123[root@prometheus]# git clone https://github.com/kubernetes/kube-state-metrics.git之后把默认的命名空间改成monitor，进入kube-state-metrics目录[root@prometheus]#kubectl create -f ./ 安装grafana12345678910111213141516创建grafana的数据目录mkdir /opt/grafana/data启动脚本[root@grafana]# cat start_grafana.sh #!/bin/bashdocker stop `docker ps -a |awk &apos;/grafana/&#123;print $1&#125;&apos;`docker rm `docker ps -a |awk &apos;/grafana/&#123;print $1&#125;&apos;`docker run -d \ --name=grafana \ --restart=always \ -p 3000:3000 \ -m 4096m \ -v /opt/grafana/data:/var/lib/grafana \ -v /opt/grafana/log:/var/log/grafana \ grafana/grafana:5.4.3 1、安装完之后，需要添加source，source直接点prometheus，链接就是http://192.168.50.60:30003之前创建的prometheus界面 2、添加模板dashboad（列出几个常用的） 点import导入，有俩种方式，直接填官网模板，或者导入json https://grafana.com/dashboards/9276 node的cpu、内存等 https://grafana.com/dashboards/3146 pod https://grafana.com/dashboards/8588 deployment 安装alertmanager创建配置文件、目录1234567891011121314151617181920212223242526272829303132创建alert数据目录mkdir /opt/alert/data注意：需要alertmanager.yml配置，此配置钉钉和邮件可同时放松[root@docker60 alert]# cat alertmanager.yml global: resolve_timeout: 5mroute: group_by: [&apos;alertname&apos;] group_wait: 10s group_interval: 10s repeat_interval: 6m receiver: defaultreceivers:- name: &apos;default&apos; email_configs: - to: &quot;&quot; send_resolved: true from: &quot;&quot; smarthost: &quot;smtp.xxx.com:25&quot; auth_username: &quot;&quot; auth_password: &quot;&quot; webhook_configs: - url: &apos;http://192.168.50.60:8060/dingtalk/ops_dingding/send&apos; send_resolved: trueinhibit_rules: - source_match: severity: &apos;critical&apos; target_match: severity: &apos;warning&apos; equal: [&apos;alertname&apos;] 启动脚本1234567891011121314[root@alert]# cat start_alert.sh#!/bin/bashdocker stop `docker ps -a |awk &apos;/alertmanager/&#123;print $1&#125;&apos;`docker rm `docker ps -a |awk &apos;/alertmanager/&#123;print $1&#125;&apos;`docker run -d \ --name alertmanager \ --restart=always \ -p 9093:9093 \ -v /etc/localtime:/etc/localtime:ro \ -v /opt/alert/alertmanager.yml:/etc/alertmanager/alertmanager.yml \ -v /opt/alert/data:/alertmanager \ prom/alertmanager:v0.15.3 安装dingding插件1234567891011121、安装go （这里就不叙述了）2、假设go的路径是/usr/local/gomkdir -pv /usr/local/go/src/github.com/timonwong3、下载dingding插件git clone https://github.com/timonwong/prometheus-webhook-dingtalk.git4、添加dingding机器人在dingding群里面添加即可5、启动dingding[root@alert]# cat start_dingding.sh cd /usr/local/go/src/github.com/timonwong/prometheus-webhook-dingtalkkill -9 `ps -ef | grep prometheus-webhook-dingtalk | grep -v grep | awk &apos;&#123;print $2&#125;&apos;`nohup ./prometheus-webhook-dingtalk --ding.profile=&quot;ops_dingding=https://oapi.dingtalk.com/robot/send?access_token=xxxx&quot; 2&gt;&amp;1 1&gt;dingding.log &amp; 企业微信报警123456789101112131415161718192021222324252627282930313233注册企业微信，添加应用即可；[root@node107 alert]# cat alertmanager.ymlglobal: resolve_timeout: 5mroute: group_by: [&apos;alertname&apos;] group_wait: 10s group_interval: 10s repeat_interval: 6m receiver: defaultreceivers:- name: &apos;default&apos; email_configs: - to: &quot;xxx&quot; send_resolved: true from: &quot;xxx&quot; smarthost: &quot;xxxx:25&quot; auth_username: &quot;xxxxx&quot; auth_password: &quot;xxxx&quot; wechat_configs: - corp_id: &apos;xxxxx&apos; ##企业id to_party: &apos;2&apos; ## 看通讯录部门那编号是几 agent_id: &apos;1000003&apos; api_secret: &apos;xxxxxxx&apos; send_resolved: trueinhibit_rules: - source_match: severity: &apos;critical&apos; target_match: severity: &apos;warning&apos; equal: [&apos;alertname&apos;]]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jira-安装及破解]]></title>
    <url>%2Fposts%2F6924c90a.html</url>
    <content type="text"><![CDATA[安装jiraJIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263下载包：wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-7.13.0-x64.bin[root@YZSJHL82-204 ~]# chmod +x atlassian-jira-software-7.13.0-x64.bin[root@YZSJHL82-204 ~]# ./atlassian-jira-software-7.13.0-x64.binUnpacking JRE ...Starting Installer ...十月 23, 2018 4:38:25 下午 java.util.prefs.FileSystemPreferences$1 run信息: Created user preferences directory.十月 23, 2018 4:38:25 下午 java.util.prefs.FileSystemPreferences$2 run信息: Created system preferences directory in java.home.This will install JIRA Software 7.4.1 on your computer.OK [o, Enter], Cancel [c]o #按o安装Choose the appropriate installation or upgrade option.Please choose one of the following:Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing JIRA installation [3]2 #2为自定义安装Where should JIRA Software be installed?[/opt/atlassian/jira]/usr/local/atlassina/jira #自定义安装目录Default location for JIRA Software data[/var/atlassian/application-data/jira]/usr/local/atlassina/jira_data #自定义数据目录Configure which ports JIRA Software will use.JIRA requires two TCP ports that are not being used by any otherapplications on this machine. The HTTP port is where you will access JIRAthrough your browser. The Control port is used to startup and shutdown JIRA.Use default ports (HTTP: 8080, Control: 8005) - Recommended [1, Enter], Set custom value for HTTP and Control ports [2]2 #2为自定义端口HTTP Port Number[8080] #8080为默认端口8050 #http连接端口Control Port Number[8005]8040 #控制端口JIRA can be run in the background.You may choose to run JIRA as a service, which means it will startautomatically whenever the computer restarts.Install JIRA as Service?Yes [y, Enter], No [n]y #是否开机自启Details on where JIRA Software will be installed and the settings that will be used.Installation Directory: /usr/local/atlassina/jira Home Directory: /usr/local/atlassina/jira_data HTTP Port: 8050 RMI Port: 8040 Install as service: Yes Install [i, Enter], Exit [e]i #确认已选配置Extracting files ...Please wait a few moments while JIRA Software is configured.Installation of JIRA Software 7.4.1 is completeStart JIRA Software 7.4.1 now?Yes [y, Enter], No [n]y #启动Please wait a few moments while JIRA Software starts up.Launching JIRA Software ...Installation of JIRA Software 7.4.1 is completeYour installation of JIRA Software 7.4.1 is now ready and can be accessedvia your browser.JIRA Software 7.4.1 can be accessed at http://localhost:8050Finishing installation ... 浏览器访问jira，地址为：http://IP:8050 请自行修改IP和端口。如果可以访问，说明安装成功。 配置数据库及密码在mySQL上创建用户及库做授权123create database jira_new;grant all privileges on *.* to jira@&apos;10.4.82.204&apos; identified by &apos;jira&apos;;flush privileges; 在授权完用户我们不可以马上填写信息，需要添加MySQL的一个jra包，否则下一步会提示找不到mysql的驱动 wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.zip1234567停止jira[root@YZSJHL82-204 ~]# /etc/init.d/jira stop上传软件包[root@YZSJHL82-204 ~]# cp mysql-connector-java-5.1.46-bin.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/启动jira[root@YZSJHL82-204 ~]# /etc/init.d/jira start注意防火墙 安装完数据库插件即可下一步: 设置jira主题 因为第一次安装，我们需要去jira官网注册用户，获取授权码 (免费30天，安装后更换破解即可) 保存好服务器ID，进入atlassian官网获取试用许可证，下边附上注册地址： 注册官网：https://my.atlassian.com 或使用以下地址： https://id.atlassian.com/signup?application=mac&amp;continue=https://my.atlassian.com 登陆账号后，选择New Evaluation License 设置管理员用户:官网注册的账号只可以免费试用30天，所以当我们安装完需要尽快进行破解 破解jirahttps://download.csdn.net/download/lbwahoo/100308071234567停止jira[root@YZSJHL82-204 ~]# /etc/init.d/jira stop进入安装目录下的atlassian-jira/WEB-INF/lib/目录下，用破解包atlassian-extras-3.2.jar替换原来的包。并将mysql连接驱动复制到此目录下。[root@YZSJHL82-204 ~]# cp atlassian-extras-3.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/启动jira[root@YZSJHL82-204 ~]# /etc/init.d/jira start注意防火墙 配置数据库连接地址12/var/atlassian/application-data/jira/dbconfig.xml#此路径为默认路径]]></content>
      <categories>
        <category>版本管理工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python删除mongo表]]></title>
    <url>%2Fposts%2F7c0c3da0.html</url>
    <content type="text"><![CDATA[PyMongoPython 要连接 MongoDB 需要 MongoDB 驱动，这里我们使用 PyMongo 驱动来连接。 pip 安装pip 是一个通用的 Python 包管理工具，提供了对 Python 包的查找、下载、安装、卸载的功能。 安装 pymongo: 1$ python3 -m pip3 install pymongo 也可以指定安装的版本: 1$ python3 -m pip3 install pymongo==3.5.1 更新 pymongo 命令： 1$ python3 -m pip3 install --upgrade pymongo easy_install 安装旧版的 Python 可以使用 easy_install 来安装，easy_install 也是 Python 包管理工具。 1$ python -m easy_install pymongo 更新 pymongo 命令： 1$ python -m easy_install -U pymongo 创建数据库创建数据库需要使用 MongoClient 对象，并且指定连接的 URL 地址和要创建的数据库名。 如下实例中，我们创建的数据库 aa : 123456#!/usr/bin/python3 import pymongo myclient = pymongo.MongoClient(&quot;mongodb://localhost:27017/&quot;)mydb = myclient[&quot;aa&quot;] 删除表12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env python#-*- coding: utf-8 -*-from pymongo import MongoClientfrom datetime import datetimedef delete(year,month,day): try: client = MongoClient(&apos;mongodb://192.168.50.223:27017,192.168.50.224:27017,192.168.50.225:27017&apos;) db_auth = client.admin db_auth.authenticate(&quot;root&quot;, &quot;passwd&quot;) db = client.gag_bill old_count = db.billInfo.count() print (&quot;old_count = %d&quot; % (old_count)) db.billInfo.remove(&#123;&quot;cTimeStamp&quot;:&#123;&quot;$lte&quot;:datetime(year,month,day,0,0,0,000)&#125;&#125;) new_count = db.billInfo.count() client.close() print (&quot;del_data = %d&quot; %(old_count-new_count)) print (&quot;new_count = %d&quot; % (new_count)) except Exception as e: print (e)if __name__ == &apos;__main__&apos;: starttime = datetime.now() print (&quot;start_time = %s&quot; % (starttime)) year = starttime.year month = starttime.month day = starttime.day-4 delete(year,month,day) endtime = datetime.now() print (&quot;end_time = %s&quot; % (endtime)) runtime = (endtime - starttime).seconds print (&quot;run_time = %d seconds&quot; % (runtime))]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[mongo副本集配置及一些常用命令]]></title>
    <url>%2Fposts%2F24c2f149.html</url>
    <content type="text"><![CDATA[在每台机器都配置下mongo配置文件123456789101112[root@mangodb1 conf]# cat mongod.conf dbpath= /data/mongodb/data/logpath=/data/mongodb/logs/mongod.loglogappend=truefork=truemaxConns=2000bind_ip=127.0.0.1,10.92.160.5（IP或者主机名）directoryperdb=true#auth=truepidfilepath=/data/mongodb/logs/mongod.pidreplSet = rep#keyFile = /data/mongodb/conf/mongokey 配置mongo副本集1234config = &#123; _id:&quot;rep&quot;,members:[&#123;_id:0,host:&quot;10.92.160.5:27017&quot;&#125;,&#123;_id:1,host:&quot;10.92.160.6:27017&quot;&#125;,&#123;_id:2,host:&quot;10.92.160.7:27017&quot;&#125;]&#125;rs.initiate(config);rs.status(); （查看集群状态的） 常用命令基本命令1234show dbs 看库use 库db.setSlaveOk()show tables 看表 创建admin用户12use admindb.addUser(&quot;root&quot;,&quot;123456&quot;) 导出表加个-c1/data/mongodb/bin/mongoexport -uroot -p123456 --authenticationDatabase admin -d gag_shop -c organizationManagerAuthorities -o organizationManagerAuthorities.json 导入1/data/mongodb/bin/mongoimport -uroot -p123456 --authenticationDatabase admin -d open /root/userInterfaceAuthority.json 查表某个字段信息12db.表名字.findOne(&#123;&#125;)db.terminalMonitorInfo.findOne(&#123;&quot;_id&quot; : &quot;086273F59379&quot;&#125;) 清除日志123db.runCommand( &#123; dropDatabase: 1 &#125; ) 清楚日志，需谨慎，必须得进指定的库里面或者echo &quot;db.runCommand(&#123;dropDatabase:1&#125;)&quot; | /home/mongodb/bin/mongo -uprivate -pPrivate 127.0.0.1:27017/gag_log 导出命令1/data/server/mongodb/bin/mongoexport -uroot -pNTA3NAa579 --authenticationDatabase admin -d gag_base -c sysAuthority -q &quot;&#123;&quot;_id&quot; : /new_pro/&#125;&quot; -o new_pro.txt 导出命令]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s的pv与pvc]]></title>
    <url>%2Fposts%2Fdfsfa87w.html</url>
    <content type="text"><![CDATA[概念PV 的全称是：PersistentVolume（持久化卷），是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 Ceph、GlusterFS、NFS 等，都是通过插件机制完成与共享存储的对接。 PVC 的全称是：PersistentVolumeClaim（持久化卷声明），PVC 是用户存储的一种声明，PVC 和 Pod 比较类似，Pod 消耗的是节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 和内存，而 PVC 可以请求特定的存储空间和访问模式。对于真正使用存储的用户不需要关心底层的存储实现细节，只需要直接使用 PVC 即可。 但是通过 PVC 请求到一定的存储空间也很有可能不足以满足应用对于存储设备的各种需求，而且不同的应用程序对于存储性能的要求可能也不尽相同，比如读写速度、并发性能等，为了解决这一问题，Kubernetes 又为我们引入了一个新的资源对象：StorageClass，通过 StorageClass 的定义，管理员可以将存储资源定义为某种类型的资源，比如快速存储、慢速存储等，用户根据 StorageClass 的描述就可以非常直观的知道各种存储资源的具体特性了，这样就可以根据应用的特性去申请合适的存储资源了。 NFSserver12345678910111213yum -y install nfs-utils rpcbindmkdir -pv /data/k8scd /data/k8s/chmod 755 /data/k8s/vim /etc/exports/data/k8s *(rw,sync,no_root_squash)systemctl start rpcbind.servicesystemctl status rpcbindsystemctl start nfs.servicesystemctl status nfs client1234yum -y install nfs-utils rpcbindshowmount -e 192.168.6.101mount -t nfs 192.168.6.101:/data/k8s /root/sy/data PVPV 作为存储资源，主要包括存储能力、访问模式、存储类型、回收策略等关键信息，新建一个 PV 对象，使用 nfs 类型的后端存储，1G 的存储空间，访问模式为 ReadWriteOnce，回收策略为 Recyle。 1234567891011121314[root@master101 pv]# cat pv1-demo.yaml apiVersion: v1kind: PersistentVolumemetadata: name: pv1spec: capacity: storage: 1Gi accessModes: - ReadWriteOnce persistentVolumeReclaimPolicy: Recycle nfs: path: /data/k8s server: 192.168.6.101 12345[root@master101 pv]#kubectl create -f pv1-demo.yaml[root@master101 pv]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Available 4s Capacity（存储能力）一般来说，一个 PV 对象都要指定一个存储能力，通过 PV 的 capacity属性来设置的，目前只支持存储空间的设置，就是我们这里的 storage=1Gi，不过未来可能会加入 IOPS、吞吐量等指标的配置。 AccessModes（访问模式）AccessModes 是用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式： ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载 ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载 ReadWriteMany（RWX）：读写权限，可以被多个节点挂载 注意：一些 PV 可能支持多种访问模式，但是在挂载的时候只能使用一种访问模式，多种访问模式是不会生效的。 persistentVolumeReclaimPolicy（回收策略）我这里指定的 PV 的回收策略为 Recycle，目前 PV 支持的策略有三种： Retain（保留）- 保留数据，需要管理员手工清理数据 Recycle（回收）- 清除 PV 中的数据，效果相当于执行 rm -rf /thevoluem/* Delete（删除）- 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务，比如 ASW EBS。 不过需要注意的是，目前只有 NFS 和 HostPath 两种类型支持回收策略。当然一般来说还是设置为 Retain 这种策略保险一点。 状态一个 PV 的生命周期中，可能会处于4中不同的阶段： Available（可用）：表示可用状态，还未被任何 PVC 绑定 Bound（已绑定）：表示 PV 已经被 PVC 绑定 Released（已释放）：PVC 被删除，但是资源还未被集群重新声明 Failed（失败）： 表示该 PV 的自动回收失败 PVC创建不带标签的1234567891011[root@master101 pv]# cat pvc-nfs.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: pvc-nfsspec: accessModes: - ReadWriteOnce resources: requests: storage: 1Gi 12345678910111213141516[root@master101 pv]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Available 8m17s[root@master101 pv]# kubectl create -f pvc-nfs.yaml persistentvolumeclaim/pvc-nfs created[root@master101 pv]# kubectl get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpvc-nfs Bound pv1 1Gi RWO 18s[root@master101 pv]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Bound default/pvc-nfs 9m11s 创建带标签的12345678910111213141516[root@master101 pv]# cat pv2-nfs.yaml apiVersion: v1kind: PersistentVolumemetadata: name: pv2-nfs labels: app: nfsspec: capacity: storage: 2Gi accessModes: - ReadWriteOnce persistentVolumeReclaimPolicy: Recycle nfs: server: 192.168.6.101 path: /data/k8s 123456[root@master101 pv]# kubectl create -f pv2-nfs.yaml persistentvolume/pv2-nfs created[root@master101 pv]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Bound default/pvc-nfs 14mpv2-nfs 2Gi RWO Recycle Available 3s 1234567891011121314[root@master101 pv]# cat pvc2-nfs.yaml kind: PersistentVolumeClaimapiVersion: v1metadata: name: pvc2-nfsspec: accessModes: - ReadWriteOnce resources: requests: storage: 2Gi selector: matchLabels: app: nfs 12345678910[root@master101 pv]# kubectl create -f pvc2-nfs.yamlpersistentvolumeclaim/pvc2-nfs created[root@master101 pv]# kubectl get pvNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGEpv1 1Gi RWO Recycle Bound default/pvc-nfs 15mpv2-nfs 2Gi RWO Recycle Bound default/pvc2-nfs 61s[root@master101 pv]# kubectl get pvcNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGEpvc-nfs Bound pv1 1Gi RWO 7m21spvc2-nfs Bound pv2-nfs 2Gi RWO 4s StorageClass创建 Provisioner要使用 StorageClass，我们就得安装对应的自动配置程序，比如我们这里存储后端使用的是 nfs，那么我们就需要使用到一个 nfs-client 的自动配置程序，我们也叫它 Provisioner，这个程序使用我们已经配置好的 nfs 服务器，来自动创建持久卷，也就是自动帮我们创建 PV。 自动创建的 PV 以${namespace}-${pvcName}-${pvName}这样的命名格式创建在 NFS 服务器上的共享数据目录中 而当这个 PV 被回收后会以archieved-${namespace}-${pvcName}-${pvName}这样的命名格式存在 NFS 服务器上。 123456789101112131415161718192021222324252627282930313233[root@master101 pv]# cat nfs-client.yamlkind: DeploymentapiVersion: extensions/v1beta1metadata: name: nfs-client-provisionerspec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: nfs-client-provisioner spec: serviceAccountName: nfs-client-provisioner containers: - name: nfs-client-provisioner image: quay.io/external_storage/nfs-client-provisioner:latest volumeMounts: - name: nfs-client-root mountPath: /persistentvolumes env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.6.101 - name: NFS_PATH value: /data/k8s volumes: - name: nfs-client-root nfs: server: 192.168.6.101 path: /data/k8s 1234567891011121314151617181920212223242526272829303132333435363738394041[root@master101 pv]# cat nfs-client-sa.yamlapiVersion: v1kind: ServiceAccountmetadata: name: nfs-client-provisioner---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata: name: nfs-client-provisioner-runnerrules: - apiGroups: [&quot;&quot;] resources: [&quot;persistentvolumes&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;persistentvolumeclaims&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;] - apiGroups: [&quot;storage.k8s.io&quot;] resources: [&quot;storageclasses&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;events&quot;] verbs: [&quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;] - apiGroups: [&quot;&quot;] resources: [&quot;endpoints&quot;] verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;]---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata: name: run-nfs-client-provisionersubjects: - kind: ServiceAccount name: nfs-client-provisioner namespace: defaultroleRef: kind: ClusterRole name: nfs-client-provisioner-runner apiGroup: rbac.authorization.k8s.io 123456[root@master101 pv]# cat nfs-client-class.yaml apiVersion: storage.k8s.io/v1kind: StorageClassmetadata: name: nfs-storageprovisioner: fuseim.pri/ifs # or choose another name, must match deployment&apos;s env PROVISIONER_NAME&apos; 123456789101112131415[root@master101 pv]# kubectl create -f nfs-client.yamldeployment.extensions/nfs-client-provisioner created[root@master101 pv]# kubectl create -f nfs-client-sa.yamlserviceaccount/nfs-client-provisioner createdclusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner createdclusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created[root@master101 pv]# kubectl create -f nfs-client-class.yamlstorageclass.storage.k8s.io/nfs-storage created[root@master101 pv]# kubectl get podsNAME READY STATUS RESTARTS AGEnfs-client-provisioner-8c7fc4457-d8v6z 0/1 ContainerCreating 0 10srecycler-for-pv2-nfs 0/1 ContainerCreating 0 10m[root@master101 pv]# kubectl get storageclassNAME PROVISIONER AGEnfs-storage fuseim.pri/ifs 13s 创建pvc俩种方法添加annotations属性123456789101112kind: PersistentVolumeClaimapiVersion: v1metadata: name: test-pvc annotations: volume.beta.kubernetes.io/storage-class: &quot;nfs-storage&quot;spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi 设置默认存储1kubectl patch storageclass nfs-storage -p &apos;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&apos;]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s拉取Harbor私有镜像]]></title>
    <url>%2Fposts%2F5trce44e.html</url>
    <content type="text"><![CDATA[secret介绍1Secret是用来保存小片敏感数据的k8s资源，例如密码，token，或者秘钥。这类数据当然也可以存放在Pod或者镜像中，但是放在Secret中是为了更方便的控制如何使用数据，并减少暴露的风险。 创建先在服务器上登录 Harbor 仓库 123docker login registry.sy.com输入账号密码 查看登录的秘钥数据 12登录成功后会在当前用户下生成 .docker/config.json 文件cat ~/.docker/config.json 12再对上面的 config.json 进行base64加密cat ~/.docker/config.json |base64 -w 0 创建 secret.yaml 文件 1234567apiVersion: v1kind: Secretmetadata: name: logintype: kubernetes.io/dockerconfigjsondata: .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJ0Y2xvdWQuaHViIjogewoJCQkiYXV0aCI6ICJZV1J0YVc0NlNHRnlZbTl5TVRJek5EVT0iCgkJfQoJfSwKCSJIdHRwSGVhZGVycyI6IHsKCQkiVXNlci1BZ2VudCI6ICJEb2NrZXItQ2xpZW50LzE3LjA5LjAtY2UgKGxpbnV4KSIKCX0KfQ== 1kubectl create -f secret.yaml]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s的亲和性]]></title>
    <url>%2Fposts%2Foigg664a.html</url>
    <content type="text"><![CDATA[摘要一般情况下我们部署的 POD 是通过集群自动调度选择某个节点的，默认情况下调度器考虑的是资源足够，并且负载尽量平均，但是有的时候我们需要能够更加细粒度的去控制 POD 的调度，比如我们内部的一些服务 gitlab 之类的也是跑在Kubernetes集群上的，我们就不希望对外的一些服务和内部的服务跑在同一个节点上了，害怕内部服务对外部的服务产生影响；有的时候呢我们两个服务直接交流比较频繁，又希望能够将这两个服务的 POD 调度到同样的节点上。这就需要用到 Kubernetes 里面的一个概念：亲和性，亲和性主要分为两类：nodeAffinity和podAffinity。 nodeSelector我们知道label是kubernetes中一个非常重要的概念，用户可以非常灵活的利用 label 来管理集群中的资源，比如最常见的一个就是 service 通过匹配 label 去选择 POD 的。而 POD 的调度也可以根据节点的 label 进行特定的部署。 我们可以通过下面的命令查看我们的 node 的 label： 1234[root@node1 ~]# kubectl get nodes --show-labelsNAME STATUS ROLES AGE VERSION LABELSnode1 Ready &lt;none&gt; 10d v1.14.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node1,kubernetes.io/os=linuxnode2 Ready &lt;none&gt; 10d v1.14.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node2,kubernetes.io/os=linux 123456[root@node1 ~]# kubectl label nodes node1 source=synode/node1 labeled[root@node1 ~]# kubectl get nodes --show-labels NAME STATUS ROLES AGE VERSION LABELSnode1 Ready &lt;none&gt; 10d v1.14.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node1,kubernetes.io/os=linux,source=synode2 Ready &lt;none&gt; 10d v1.14.2 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node2,kubernetes.io/os=linux 我们可以通过上面的--show-labels参数可以查看上述标签是否生效。当 node 被打上了相关标签后，在调度的时候就可以使用这些标签了，只需要在 POD 的 spec 字段中添加nodeSelector字段，里面是我们需要被调度的节点的 label。例如，下面是我们之前的一个默认的 busybox POD 的 YAML 文件： 1234567891011121314apiVersion: v1kind: Podmetadata: labels: app: busybox-pod name: test-busyboxspec: containers: - command: - sleep - &quot;3600&quot; image: busybox imagePullPolicy: Always name: test-busybox 然后我需要让上面的 POD 被调度到140的节点上，那么最简单的方法就是去匹配140上面的 label，如下： 12345678910111213141516apiVersion: v1kind: Podmetadata: labels: app: busybox-pod name: test-busyboxspec: containers: - command: - sleep - &quot;3600&quot; image: busybox imagePullPolicy: Always name: test-busybox nodeSelector: source: sy nodeAffinitynodeAffinity就是节点亲和性，相对应的是Anti-Affinity，就是反亲和性，这种方法比上面的nodeSelector更加灵活，它可以进行一些简单的逻辑组合了，不只是简单的相等匹配。 调度可以分成软策略和硬策略两种方式，软策略就是如果你没有满足调度要求的节点的话，POD 就会忽略这条规则，继续完成调度过程，说白了就是满足条件最好了，没有的话也无所谓了的策略；而硬策略就比较强硬了，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是你必须满足我的要求，不然我就不干的策略。 nodeAffinity就有两上面两种策略：preferredDuringSchedulingIgnoredDuringExecution和requiredDuringSchedulingIgnoredDuringExecution，前面的就是软策略，后面的就是硬策略。 如下例子：（test-node-affinity.yaml） 123456789101112131415161718192021222324252627apiVersion: v1kind: Podmetadata: name: with-node-affinity labels: app: node-affinity-podspec: containers: - name: with-node-affinity image: nginx affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: kubernetes.io/hostname operator: NotIn values: - node1 preferredDuringSchedulingIgnoredDuringExecution: - weight: 1 preference: matchExpressions: - key: source operator: In values: - sy 上面这个 POD 首先是要求 POD 不能运行在node1这个节点上，如果有个节点满足source=sy的话就优先调度到这个节点上，同样的我们可以使用descirbe命令查看具体的调度情况是否满足我们的要求。这里的匹配逻辑是 label 的值在某个列表中，现在Kubernetes提供的操作符有下面的几种： In：label 的值在某个列表中 NotIn：label 的值不在某个列表中 Gt：label 的值大于某个值 Lt：label 的值小于某个值 Exists：某个 label 存在 DoesNotExist：某个 label 不存在 如果nodeSelectorTerms下面有多个选项的话，满足任何一个条件就可以了；如果matchExpressions有多个选项的话，则必须同时满足这些条件才能正常调度 POD。 podAffinity上面两种方式都是让 POD 去选择节点的，有的时候我们也希望能够根据 POD 之间的关系进行调度，Kubernetes在1.4版本引入的podAffinity概念就可以实现我们这个需求。 和nodeAffinity类似，podAffinity也有requiredDuringSchedulingIgnoredDuringExecution和 preferredDuringSchedulingIgnoredDuringExecution两种调度策略，唯一不同的是如果要使用互斥性，我们需要使用podAntiAffinity字段。 如下例子，我们希望with-pod-affinity和busybox-pod能够就近部署，而不希望和node-affinity-pod部署在同一个拓扑域下面：（test-pod-affinity.yaml） 12345678910111213141516171819202122232425262728293031apiVersion: v1kind: Podmetadata: name: with-pod-affinity labels: app: pod-affinity-podspec: containers: - name: with-pod-affinity image: nginx affinity: podAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - busybox-pod topologyKey: kubernetes.io/hostname podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 1 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - node-affinity-pod topologyKey: kubernetes.io/hostname 上面这个例子中的 POD 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 POD：这个 POD 有一个app=busybox-pod的 label。podAntiAffinity则是希望最好不要调度到这样的节点：这个节点上运行了某个 POD，而这个 POD 有app=node-affinity-pod的 label。 亲和性/反亲和性调度策略比较如下： 调度策略 匹配标签 操作符 拓扑域支持 调度目标 nodeAffinity 主机 In, NotIn, Exists, DoesNotExist, Gt, Lt 否 指定主机 podAffinity POD In, NotIn, Exists, DoesNotExist 是 POD与指定POD同一拓扑域 podAnitAffinity POD In, NotIn, Exists, DoesNotExist 是 POD与指定POD不在同一拓扑域 污点（Taints）与容忍（tolerations）对于nodeAffinity无论是硬策略还是软策略方式，都是调度 POD 到预期节点上，而Taints恰好与之相反，如果一个节点标记为 Taints ，除非 POD 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度pod。 比如用户希望把 Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 POD，则污点就很有用了，POD 不会再被调度到 taint 标记过的节点 1kubectl taint nodes node1 key=value:NoSchedule 如果仍然希望某个 POD 调度到 taint 节点上，则必须在 Spec 中做出Toleration定义，才能调度到该节点，举例如下： 12345tolerations:- key: &quot;key&quot;operator: &quot;Equal&quot;value: &quot;value&quot;effect: &quot;NoSchedule&quot; effect 共有三个可选项，可按实际需求进行设置： NoSchedule：POD 不会被调度到标记为 taints 节点。 PreferNoSchedule：NoSchedule 的软策略版本。 NoExecute：该选项意味着一旦 Taint 生效，如该节点内正在运行的 POD 没有对应 Tolerate 设置，会直接被逐出。]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s的ConfigMap]]></title>
    <url>%2Fposts%2Fdfjg544e.html</url>
    <content type="text"><![CDATA[介绍我们经常都需要为我们的应用程序配置一些特殊的数据，比如密钥、Token 、数据库连接地址或者其他私密的信息。你的应用可能会使用一些特定的配置文件进行配置，比如settings.py文件，或者我们可以在应用的业务逻辑中读取环境变量或者某些标志来处理配置信息。 当然你可以直接将这些应用配置信息直接硬编码到你的应用程序中去，对于一个小型的应用，这或许是可以接受的，但是，对于一个相对较大的应用程序或者微服务的话，硬编码就会变得难以管理了。比如你现在有10个微服务，都连接了数据库A，如果现在需要更改数据库A的连接地址的话，就需要修改10个地方，显然这是难以忍受的。 当然，我们可以使用环境变量和统一的配置文件来解决这个问题，当我们想改变配置的时候，只需要更改环境变量或者配置文件就可以了，但是对于微服务来说的话，这也是比较麻烦的一件事情，Docker 允许我们在 Dockerfile 中指定环境变量，但是如果我们需要在不同的容器中引用相同的数据呢，如果我们的应用程序是运行在集群上的时候，对于配置主机的环境变量也是难以管理的了 （秘钥用secret） configMap用法configMap应用场景 生成为容器内的环境变量 设置容器的启动命令的启动参数 (需要设置为环境变量） 以Volume的形式挂载为容器内部的文件或目录 configMap创建1ConfigMap以一个或多个key:value的形式保存在Kubernetes系统中供应用使用，既可以用于表示一个变量的值(例如apploglevel=info)，也可以用于表示一个完整配置文件的内容(server.xml=&lt;?xml..&gt;..) ConfigMap创建方式 通过直接在命令行中指定configmap参数创建，即–from-literal 通过指定文件创建，即将一个配置文件创建为一个ConfigMap –from-file=&lt;文件&gt; 通过指定目录创建，即将一个目录下的所有配置文件创建为一个ConfigMap，–from-file=&lt;目录&gt; 事先写好标准的configmap的yaml文件，然后kubectl create -f 创建 –from-literal方式创建创建configMap 1kubectl create configmap nginx-config --from-literal=nginx_port=80 --from-literal=server_name=sy.com 替换 1kubectl create configmap nginx-config --from-literal=nginx_port=8080 -o yaml --dry-run | kubectl replace -f - –from-file方式创建注意Pod使用configMap 使用env方式 当configMap修改时，内部环境变量不会动态改变 使用volumeMount方式 修改configMap环境变量随之变化]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kubectl在shell中的自动补全]]></title>
    <url>%2Fposts%2F4ddce2e2.html</url>
    <content type="text"><![CDATA[在zsh上设置1source &lt;(kubectl completion zsh) 可以导入到.zshrc中实现自动加载： 1kubectl completion zsh &gt;&gt; ~/.zshrc 键入-n以后，按tab，自动弹出可用的ns： 12➜ admin kubectl -ndefault demo-echo demo-webshell kong kube-public kube-system 在linux上设置1234yum install bash-completionsource /usr/share/bash-completion/bash_completionecho &apos;source &lt;(kubectl completion bash)&apos; &gt;&gt;~/.bashrckubectl completion bash &gt;/etc/bash_completion.d/kubectl 在mas上设置-bash12345brew install bash-completion@2export BASH_COMPLETION_COMPAT_DIR=/usr/local/etc/bash_completion.d[[ -r /usr/local/etc/profile.d/bash_completion.sh ]] &amp;&amp; . /usr/local/etc/profile.d/bash_completion.shecho &apos;source &lt;(kubectl completion bash)&apos; &gt;&gt;~/.bashrckubectl completion bash &gt;/usr/local/etc/bash_completion.d/kubectl]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[k8s基本命令]]></title>
    <url>%2Fposts%2F5b3b5a45.html</url>
    <content type="text"><![CDATA[pods12345$ kubectl get pods -n pro$ kubectl get pods --all-namespaces -n pro$ kubectl get pod aa -o wide -n pro$ kubectl get pod aa -o yaml -n pro$ kubectl describe pod aa -n pro 不用grep列出node上的pod1kubectl get pods --field-selector spec.nodeName=node04 --all-namespaces POD升级和历史列出部署历史记录1$ kubectl rollout history deployment/DEPLOYMENT_NAME 跳转到特定修订版1$ kubectl rollout undo deployment/DEPLOYMENT_NAME --to-revision=N service查看服务1$ kubectl get services 将POD作为服务公开（创建端点）1$ kubectl expose deployment/aa --port=2000 --type=NodePort login1kubectl exec -ti 1 bash -n product log1kubectl logs -f 1 -n product]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Elasticsearch基础入门]]></title>
    <url>%2Fposts%2F8b341200.html</url>
    <content type="text"><![CDATA[什么是 ElasticSearchElasticSearch是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。 基础概念索引：含有相同属性的文档集合 类型：索引可以定义一个或多个类型，文档必须属于一个类型 文档：可以被索引的基础数据单位 分片：每个索引都有多个分片，每个分片都是 Lucene 索引 备份：拷贝一份分片就完成分片的备份 应用场景 海量数据分析引擎 站内搜索引擎 数据仓库 安装和配置依赖环境JDK 和 NodeJS 安装jdk，和node这里就不写了，源码安装即可！ 下载登陆 elasticSearch 官网下载文件。 安装1234567891011121314151617181920212223242526272829303132333435363738394041#增加 elk 组groupadd elk#增加 elk 用户并附加到 es 组useradd elk -g elk -p elkwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.4.tar.gztar -zxvf elasticsearch-6.2.4.tar.gz -C /data/elkmkdir /data/elk/dataelastic/ulimit -n 65536vim /etc/sysctl.confvm.max_map_count=262144#给目录权限chown -R elk:elk elasticsearch-6.2.4#使用es用户su elk配置文件修改如下： path.data: /data/elk/dataelastic/ cluster.name: gag-elk node.name: gag-elk-node-92 network.host: 192.168.50.92 http.port: 9200 transport.tcp.port: 9300 node.master: true node.data: true discovery.zen.ping.unicast.hosts: [&quot;192.168.50.92&quot;,&quot;192.168.50.93&quot;,&quot;192.168.50.94&quot;] discovery.zen.minimum_master_nodes: 2 gateway.recover_after_nodes: 2 gateway.expected_nodes: 2 gateway.recover_after_time: 1m #检测到副本数不够的时候，1分钟之后才开始同步 xpack.security.enabled: false thread_pool.index.size: 8 thread_pool.index.queue_size: 8000 thread_pool.bulk.size: 8 thread_pool.bulk.queue_size: 8000另俩台机器也这么操作,就可以配置es集群 启动1bin/elasticsearch 或 bin/elasticsearch -d # -d 表示后台启动 下载插件1234567wget https://github.com/shenshengkun/elasticsearch-head/archive/master.zipunzip master.zipcd elasticsearch-head-masternpm installnpm run start也可以用谷歌浏览器，搜索扩展程序ElasticSearch Head，就可以直接使用head插件 Elasticsearch常用命令123curl -XDELETE &apos;http://host.IP.address:9200/logstash-*&apos; 删除索引(后面为索引名称)curl -XGET &apos;host.IP.address:9200/_cat/health?v&amp;pretty&apos; 查看集群状态curl -XGET &apos;host.IP.address:9200/_cat/indices?v&amp;pretty&apos; 查看索引]]></content>
      <categories>
        <category>elk</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[rancher升级]]></title>
    <url>%2Fposts%2Fdf5a27ca.html</url>
    <content type="text"><![CDATA[停掉 rancher先把之前的rancher-server停掉，然后在/etc/hosts上加上ip还有主机名的解析，否则升级完主机不识别 下载1.6.8镜像123docker pull privatecloud.docker.domain/privatecloud3.0/rancher_server:1.6.8在官网下载就有，我这个是自己的私有仓库 运行rancherserver1docker run -d -v /data/rancherdata:/var/lib/mysql --restart=always -p 48080:8080 privatecloud.docker.domain/privatecloud3.0/rancher_server:1.6.8 获取rancher的代理镜像1234567891011121314151617181920docker login privatecloud.docker.domain 从镜像库拉取镜像docker pull privatecloud.docker.domain/privatecloud3.0/rancher_agent:v1.2.6docker pull privatecloud.docker.domain/privatecloud3.0/rancher_network-manager:v0.7.8docker pull privatecloud.docker.domain/privatecloud3.0/rancher_net:v0.11.9docker pull privatecloud.docker.domain/privatecloud3.0/rancher_dns:v0.15.3docker pull privatecloud.docker.domain/privatecloud3.0/rancher_metadata:v0.9.4docker pull privatecloud.docker.domain/privatecloud3.0/rancher_healthcheck:v0.3.3docker pull privatecloud.docker.domain/privatecloud3.0/rancher_scheduler:v0.8.2docker pull privatecloud.docker.domain/privatecloud3.0/rancher_net:holder重命名镜像：docker tag privatecloud.docker.domain/privatecloud3.0/rancher_agent:v1.2.6 rancher/agent:v1.2.6docker tag privatecloud.docker.domain/privatecloud3.0/rancher_network-manager:v0.7.8 rancher/network-manager:v0.7.8docker tag privatecloud.docker.domain/privatecloud3.0/rancher_net:v0.11.9 rancher/net:v0.11.9docker tag privatecloud.docker.domain/privatecloud3.0/rancher_dns:v0.15.3 rancher/dns:v0.15.3docker tag privatecloud.docker.domain/privatecloud3.0/rancher_metadata:v0.9.4 rancher/metadata:v0.9.4docker tag privatecloud.docker.domain/privatecloud3.0/rancher_healthcheck:v0.3.3 rancher/healthcheck:v0.3.3docker tag privatecloud.docker.domain/privatecloud3.0/rancher_scheduler:v0.8.2 rancher/scheduler:v0.8.2docker tag privatecloud.docker.domain/privatecloud3.0/rancher_net:holder rancher/net:holder 升级12进入http://rancherserverip:48080/然后点升级即可]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-sqlite3基础]]></title>
    <url>%2Fposts%2F8df26b6b.html</url>
    <content type="text"><![CDATA[摘要SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它是D.RichardHipp建立的公有领域项目。它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java、Python等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。SQLite第一个Alpha版本诞生于2000年5月。 至2015年已经有15个年头，SQLite也迎来了一个版本 SQLite 3已经发布。 安装SQLite3 可使用 sqlite3 模块与 Python 进行集成。sqlite3 模块是由 Gerhard Haring 编写的。它提供了一个与 PEP 249 描述的 DB-API 2.0 规范兼容的 SQL 接口。您不需要单独安装该模块，因为 Python 2.5.x 以上版本默认自带了该模块。 为了使用 sqlite3 模块，您首先必须创建一个表示数据库的连接对象，然后您可以有选择地创建光标对象，这将帮助您执行所有的 SQL 语句。 Python sqlite3 模块 API以下是重要的 sqlite3 模块程序，可以满足您在 Python 程序中使用 SQLite 数据库的需求。如果您需要了解更多细节，请查看 Python sqlite3 模块的官方文档。 sqlite3.connect(database [,timeout ,other optional arguments])123该 API 打开一个到 SQLite 数据库文件 database 的链接。您可以使用 &quot;:memory:&quot; 来在 RAM 中打开一个到 database 的数据库连接，而不是在磁盘上打开。如果数据库成功打开，则返回一个连接对象。当一个数据库被多个连接访问，且其中一个修改了数据库，此时 SQLite 数据库被锁定，直到事务提交。timeout 参数表示连接等待锁定的持续时间，直到发生异常断开连接。timeout 参数默认是 5.0（5 秒）。如果给定的数据库名称 filename 不存在，则该调用将创建一个数据库。如果您不想在当前目录中创建数据库，那么您可以指定带有路径的文件名，这样您就能在任意地方创建数据库。 connection.cursor([cursorClass])1该例程创建一个 cursor，将在 Python 数据库编程中用到。该方法接受一个单一的可选的参数 cursorClass。如果提供了该参数，则它必须是一个扩展自 sqlite3.Cursor 的自定义的 cursor 类。 cursor.execute(sql [, optional parameters])12该例程执行一个 SQL 语句。该 SQL 语句可以被参数化（即使用占位符代替 SQL 文本）。sqlite3 模块支持两种类型的占位符：问号和命名占位符（命名样式）。例如：cursor.execute(&quot;insert into people values (?, ?)&quot;, (who, age)) connection.execute(sql [, optional parameters])1该例程是上面执行的由光标（cursor）对象提供的方法的快捷方式，它通过调用光标（cursor）方法创建了一个中间的光标对象，然后通过给定的参数调用光标的 execute 方法。 cursor.executemany(sql, seq_of_parameters)1该例程对 seq_of_parameters 中的所有参数或映射执行一个 SQL 命令。 connection.executemany(sql[, parameters])1该例程是一个由调用光标（cursor）方法创建的中间的光标对象的快捷方式，然后通过给定的参数调用光标的 executemany 方法。 cursor.executescript(sql_script)1该例程一旦接收到脚本，会执行多个 SQL 语句。它首先执行 COMMIT 语句，然后执行作为参数传入的 SQL 脚本。所有的 SQL 语句应该用分号（;）分隔。 connection.executescript(sql_script)1该例程是一个由调用光标（cursor）方法创建的中间的光标对象的快捷方式，然后通过给定的参数调用光标的 executescript 方法。 connection.total_changes()1该例程返回自数据库连接打开以来被修改、插入或删除的数据库总行数。 connection.commit()1该方法提交当前的事务。如果您未调用该方法，那么自您上一次调用 commit() 以来所做的任何动作对其他数据库连接来说是不可见的。 connection.rollback()1该方法回滚自上一次调用 commit() 以来对数据库所做的更改。 connection.close()1该方法关闭数据库连接。请注意，这不会自动调用 commit()。如果您之前未调用 commit() 方法，就直接关闭数据库连接，您所做的所有更改将全部丢失！ cursor.fetchone()1该方法获取查询结果集中的下一行，返回一个单一的序列，当没有更多可用的数据时，则返回 None。 cursor.fetchmany([size=cursor.arraysize])1该方法获取查询结果集中的下一行组，返回一个列表。当没有更多的可用的行时，则返回一个空的列表。该方法尝试获取由 size 参数指定的尽可能多的行。 cursor.fetchall()1该例程获取查询结果集中所有（剩余）的行，返回一个列表。当没有可用的行时，则返回一个空的列表。 操作方式连接数据库下面的 Python 代码显示了如何连接到一个现有的数据库。如果数据库不存在，那么它就会被创建，最后将返回一个数据库对象。 1234567891011#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;在这里，您也可以把数据库名称复制为特定的名称 :memory:，这样就会在 RAM 中创建一个数据库。现在，让我们来运行上面的程序，在当前目录中创建我们的数据库 test.db。您可以根据需要改变路径。保存上面代码到 sqlite.py 文件中，并按如下所示执行。如果数据库成功创建，那么会显示下面所示的消息：$chmod +x sqlite.py$./sqlite.pyOpen database successfully 创建表下面的 Python 代码段将用于在先前创建的数据库中创建一个表： 12345678910111213141516171819#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;conn.execute(&apos;&apos;&apos;CREATE TABLE COMPANY (ID INT PRIMARY KEY NOT NULL, NAME TEXT NOT NULL, AGE INT NOT NULL, ADDRESS CHAR(50), SALARY REAL);&apos;&apos;&apos;)print &quot;Table created successfully&quot;;conn.close()上述程序执行时，它会在 test.db 中创建 COMPANY 表，并显示下面所示的消息：Opened database successfullyTable created successfully INSERT 操作下面的 Python 程序显示了如何在上面创建的 COMPANY 表中创建记录： 12345678910111213141516171819202122232425#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;conn.execute(&quot;INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \ VALUES (1, &apos;Paul&apos;, 32, &apos;California&apos;, 20000.00 )&quot;);conn.execute(&quot;INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \ VALUES (2, &apos;Allen&apos;, 25, &apos;Texas&apos;, 15000.00 )&quot;);conn.execute(&quot;INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \ VALUES (3, &apos;Teddy&apos;, 23, &apos;Norway&apos;, 20000.00 )&quot;);conn.execute(&quot;INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \ VALUES (4, &apos;Mark&apos;, 25, &apos;Rich-Mond &apos;, 65000.00 )&quot;);conn.commit()print &quot;Records created successfully&quot;;conn.close()上述程序执行时，它会在 COMPANY 表中创建给定记录，并会显示以下两行：Opened database successfullyRecords created successfully SELECT 操作下面的 Python 程序显示了如何从前面创建的 COMPANY 表中获取并显示记录： 123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;cursor = conn.execute(&quot;SELECT id, name, address, salary from COMPANY&quot;)for row in cursor: print &quot;ID = &quot;, row[0] print &quot;NAME = &quot;, row[1] print &quot;ADDRESS = &quot;, row[2] print &quot;SALARY = &quot;, row[3], &quot;\n&quot;print &quot;Operation done successfully&quot;;conn.close()上述程序执行时，它会产生以下结果：Opened database successfullyID = 1NAME = PaulADDRESS = CaliforniaSALARY = 20000.0ID = 2NAME = AllenADDRESS = TexasSALARY = 15000.0ID = 3NAME = TeddyADDRESS = NorwaySALARY = 20000.0ID = 4NAME = MarkADDRESS = Rich-MondSALARY = 65000.0Operation done successfully UPDATE 操作下面的 Python 代码显示了如何使用 UPDATE 语句来更新任何记录，然后从 COMPANY 表中获取并显示更新的记录： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;conn.execute(&quot;UPDATE COMPANY set SALARY = 25000.00 where ID=1&quot;)conn.commit()print &quot;Total number of rows updated :&quot;, conn.total_changescursor = conn.execute(&quot;SELECT id, name, address, salary from COMPANY&quot;)for row in cursor: print &quot;ID = &quot;, row[0] print &quot;NAME = &quot;, row[1] print &quot;ADDRESS = &quot;, row[2] print &quot;SALARY = &quot;, row[3], &quot;\n&quot;print &quot;Operation done successfully&quot;;conn.close()上述程序执行时，它会产生以下结果：Opened database successfullyTotal number of rows updated : 1ID = 1NAME = PaulADDRESS = CaliforniaSALARY = 25000.0ID = 2NAME = AllenADDRESS = TexasSALARY = 15000.0ID = 3NAME = TeddyADDRESS = NorwaySALARY = 20000.0ID = 4NAME = MarkADDRESS = Rich-MondSALARY = 65000.0Operation done successfully DELETE 操作下面的 Python 代码显示了如何使用 DELETE 语句删除任何记录，然后从 COMPANY 表中获取并显示剩余的记录： 123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/pythonimport sqlite3conn = sqlite3.connect(&apos;test.db&apos;)print &quot;Opened database successfully&quot;;conn.execute(&quot;DELETE from COMPANY where ID=2;&quot;)conn.commit()print &quot;Total number of rows deleted :&quot;, conn.total_changescursor = conn.execute(&quot;SELECT id, name, address, salary from COMPANY&quot;)for row in cursor: print &quot;ID = &quot;, row[0] print &quot;NAME = &quot;, row[1] print &quot;ADDRESS = &quot;, row[2] print &quot;SALARY = &quot;, row[3], &quot;\n&quot;print &quot;Operation done successfully&quot;;conn.close()上述程序执行时，它会产生以下结果：Opened database successfullyTotal number of rows deleted : 1ID = 1NAME = PaulADDRESS = CaliforniaSALARY = 20000.0ID = 3NAME = TeddyADDRESS = NorwaySALARY = 20000.0ID = 4NAME = MarkADDRESS = Rich-MondSALARY = 65000.0Operation done successfully]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-xml、yaml]]></title>
    <url>%2Fposts%2F6f65a2ef.html</url>
    <content type="text"><![CDATA[摘要本文记录一些python中xml和yaml模块 xmlxml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单，不过，古时候，在json还没诞生的黑暗年代，大家只能选择用xml呀，至今很多传统公司如金融行业的很多系统的接口还主要是xml。 xml的格式如下，就是通过&lt;&gt;节点来区别数据结构的: 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot;?&gt;&lt;data&gt; &lt;country name=&quot;Liechtenstein&quot;&gt; &lt;rank updated=&quot;yes&quot;&gt;2&lt;/rank&gt; &lt;year&gt;2008&lt;/year&gt; &lt;gdppc&gt;141100&lt;/gdppc&gt; &lt;neighbor name=&quot;Austria&quot; direction=&quot;E&quot;/&gt; &lt;neighbor name=&quot;Switzerland&quot; direction=&quot;W&quot;/&gt; &lt;/country&gt; &lt;country name=&quot;Singapore&quot;&gt; &lt;rank updated=&quot;yes&quot;&gt;5&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;59900&lt;/gdppc&gt; &lt;neighbor name=&quot;Malaysia&quot; direction=&quot;N&quot;/&gt; &lt;/country&gt; &lt;country name=&quot;Panama&quot;&gt; &lt;rank updated=&quot;yes&quot;&gt;69&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;13600&lt;/gdppc&gt; &lt;neighbor name=&quot;Costa Rica&quot; direction=&quot;W&quot;/&gt; &lt;neighbor name=&quot;Colombia&quot; direction=&quot;E&quot;/&gt; &lt;/country&gt;&lt;/data&gt; xml协议在各个语言里的都 是支持的，在python中可以用以下模块操作xml： 123# print(root.iter(&apos;year&apos;)) #全文搜索# print(root.find(&apos;country&apos;)) #在root的子节点找，只找一个# print(root.findall(&apos;country&apos;)) #在root的子节点找，找所有 1234567891011121314151617181920212223242526272829303132333435363738import xml.etree.ElementTree as ET #导入模块，名字太长了，把这个模块名重命名为ET tree = ET.parse(&quot;xmltest.xml&quot;) #parse解析，用ET模块下的parse这个方法把xml文件解析开，解析开拿到一个tree,tree就是一个对象root = tree.getroot() #这个对象可以调用方法，getroot就是根的意思print(root.tag) #root这个对象有一个属性tag，tag的值就是根标签的名字#遍历xml文档for child in root: print(&apos;========&gt;&apos;,child.tag,child.attrib,child.attrib[&apos;name&apos;]) for i in child: print(i.tag,i.attrib,i.text) #只遍历year 节点for node in root.iter(&apos;year&apos;): print(node.tag,node.text)#---------------------------------------import xml.etree.ElementTree as ET tree = ET.parse(&quot;xmltest.xml&quot;)root = tree.getroot() #修改for node in root.iter(&apos;year&apos;): new_year=int(node.text)+1 node.text=str(new_year) node.set(&apos;updated&apos;,&apos;yes&apos;) node.set(&apos;version&apos;,&apos;1.0&apos;)tree.write(&apos;test.xml&apos;) #删除nodefor country in root.findall(&apos;country&apos;): rank = int(country.find(&apos;rank&apos;).text) if rank &gt; 50: root.remove(country) tree.write(&apos;output.xml&apos;) 12345678910111213#在country内添加（append）节点year2import xml.etree.ElementTree as ETtree = ET.parse(&quot;a.xml&quot;)root=tree.getroot()for country in root.findall(&apos;country&apos;): for year in country.findall(&apos;year&apos;): if int(year.text) &gt; 2000: year2=ET.Element(&apos;year2&apos;) year2.text=&apos;新年&apos; year2.attrib=&#123;&apos;update&apos;:&apos;yes&apos;&#125; country.append(year2) #往country节点下添加子节点tree.write(&apos;a.xml.swap&apos;) 自己创建xml文件 12345678910111213141516import xml.etree.ElementTree as ET new_xml = ET.Element(&quot;namelist&quot;)name = ET.SubElement(new_xml,&quot;name&quot;,attrib=&#123;&quot;enrolled&quot;:&quot;yes&quot;&#125;)age = ET.SubElement(name,&quot;age&quot;,attrib=&#123;&quot;checked&quot;:&quot;no&quot;&#125;)sex = ET.SubElement(name,&quot;sex&quot;)sex.text = &apos;33&apos;name2 = ET.SubElement(new_xml,&quot;name&quot;,attrib=&#123;&quot;enrolled&quot;:&quot;no&quot;&#125;)age = ET.SubElement(name2,&quot;age&quot;)age.text = &apos;19&apos; et = ET.ElementTree(new_xml) #生成文档对象et.write(&quot;test.xml&quot;, encoding=&quot;utf-8&quot;,xml_declaration=True) ET.dump(new_xml) #打印生成的格式 yaml首先安装yaml模块1pip3 install pyyaml 编写yaml配置文件 yaml_example.yaml12345678910 1 name: junxi 2 age: 18 3 spouse: 4 name: Rui 5 age: 18 6 children: 7 - name: Chen You 8 age: 3 9 - name: Ruo Xi10 age: 2 编写解析yaml文件的python程序 yaml_example.py1234567891 import yaml2 3 f = open(&apos;yaml_example.yaml&apos;)4 content = yaml.load(f)5 print(type(content))6 print(&apos;before modification:&apos;, content)7 content[&apos;age&apos;] = 178 content[&apos;children&apos;][1][&apos;age&apos;] = 19 print(&apos;after modification&apos;, content) 程序输出的结果为: 1231 &lt;type &apos;dict&apos;&gt;2 (&apos;before modification:&apos;, &#123;&apos;age&apos;: 18, &apos;spouse&apos;: &#123;&apos;age&apos;: 18, &apos;name&apos;: &apos;Rui&apos;&#125;, &apos;name&apos;: &apos;junxi&apos;, &apos;children&apos;: [&#123;&apos;age&apos;: 3, &apos;name&apos;: &apos;Chen You&apos;&#125;, &#123;&apos;age&apos;: 2, &apos;name&apos;: &apos;Ruo Xi&apos;&#125;]&#125;)3 (&apos;after modification&apos;, &#123;&apos;age&apos;: 17, &apos;spouse&apos;: &#123;&apos;age&apos;: 18, &apos;name&apos;: &apos;Rui&apos;&#125;, &apos;name&apos;: &apos;junxi&apos;, &apos;children&apos;: [&#123;&apos;age&apos;: 3, &apos;name&apos;: &apos;Chen You&apos;&#125;, &#123;&apos;age&apos;: 1, &apos;name&apos;: &apos;Ruo Xi&apos;&#125;]&#125;)]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-序列化]]></title>
    <url>%2Fposts%2F79185f44.html</url>
    <content type="text"><![CDATA[摘要本文记录一些python中序列化的模块 序列化之前我们学习过用eval内置方法可以将一个字符串转成python对象，不过，eval方法是有局限性的，对于普通的数据类型，json.loads和eval都能用，但遇到特殊类型的时候，eval就不管用了,所以eval的重点还是通常用来执行一个字符串表达式，并返回表达式的值。 1234import jsonx=&quot;[null,true,false,1]&quot;print(eval(x)) #报错，无法解析null类型，而json就可以print(json.loads(x)) 什么是序列化？我们把对象(变量)从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。 为什么要序列化？持久保存状态需知一个软件/程序的执行就在处理一系列状态的变化，在编程语言中，’状态’会以各种各样有结构的数据类型(也可简单的理解为变量)的形式被保存在内存中。 内存是无法永久保存数据的，当程序运行了一段时间，我们断电或者重启程序，内存中关于这个程序的之前一段时间的数据（有结构）都被清空了。 在断电或重启程序之前将程序当前内存中所有的数据都保存下来（保存到文件中），以便于下次程序执行能够从文件中载入之前的数据，然后继续执行，这就是序列化。 具体的来说，你玩使命召唤闯到了第13关，你保存游戏状态，关机走人，下次再玩，还能从上次的位置开始继续闯关。或如，虚拟机状态的挂起等。 跨平台数据交互序列化之后，不仅可以把序列化后的内容写入磁盘，还可以通过网络传输到别的机器上，如果收发的双方约定好实用一种序列化的格式，那么便打破了平台/语言差异化带来的限制，实现了跨平台数据交互。 反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。 如何序列化之json和pickle： json如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。 JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下： 12345678910111213141516import json dic=&#123;&apos;name&apos;:&apos;alvin&apos;,&apos;age&apos;:23,&apos;sex&apos;:&apos;male&apos;&#125;print(type(dic))#&lt;class &apos;dict&apos;&gt; j=json.dumps(dic)print(type(j))#&lt;class &apos;str&apos;&gt; f=open(&apos;序列化对象&apos;,&apos;w&apos;)f.write(j) #-------------------等价于json.dump(dic,f)f.close()#-----------------------------反序列化&lt;br&gt;import jsonf=open(&apos;序列化对象&apos;)data=json.loads(f.read())# 等价于data=json.load(f) 注意点123456789import json#dct=&quot;&#123;&apos;1&apos;:111&#125;&quot;#json 不认单引号#dct=str(&#123;&quot;1&quot;:111&#125;)#报错,因为生成的数据还是单引号:&#123;&apos;one&apos;: 1&#125;dct=&apos;&#123;&quot;1&quot;:&quot;111&quot;&#125;&apos;print(json.loads(dct))#conclusion:# 无论数据是怎样创建的，只要满足json格式，就可以json.loads出来,不一定非要dumps的数据才能loads pickle12345678910111213141516171819202122import pickle dic=&#123;&apos;name&apos;:&apos;alvin&apos;,&apos;age&apos;:23,&apos;sex&apos;:&apos;male&apos;&#125; print(type(dic))#&lt;class &apos;dict&apos;&gt; j=pickle.dumps(dic)print(type(j))#&lt;class &apos;bytes&apos;&gt; f=open(&apos;序列化对象_pickle&apos;,&apos;wb&apos;)#注意是w是写入str,wb是写入bytes,j是&apos;bytes&apos;f.write(j) #-------------------等价于pickle.dump(dic,f) f.close()#-------------------------反序列化import picklef=open(&apos;序列化对象_pickle&apos;,&apos;rb&apos;) data=pickle.loads(f.read())# 等价于data=pickle.load(f) print(data[&apos;age&apos;]) Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。 shelveshelve模块比pickle模块简单，只有一个open函数，返回类似字典的对象，可读可写;key必须为字符串，而值可以是python所支持的数据类型 123456789import shelvef=shelve.open(r&apos;sheve.txt&apos;)# f[&apos;stu1_info&apos;]=&#123;&apos;name&apos;:&apos;egon&apos;,&apos;age&apos;:18,&apos;hobby&apos;:[&apos;piao&apos;,&apos;smoking&apos;,&apos;drinking&apos;]&#125;# f[&apos;stu2_info&apos;]=&#123;&apos;name&apos;:&apos;gangdan&apos;,&apos;age&apos;:53&#125;# f[&apos;school_info&apos;]=&#123;&apos;website&apos;:&apos;http://www.pypy.org&apos;,&apos;city&apos;:&apos;beijing&apos;&#125;print(f[&apos;stu1_info&apos;][&apos;hobby&apos;])f.close()]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-configparser]]></title>
    <url>%2Fposts%2Fcf57e5aa.html</url>
    <content type="text"><![CDATA[摘要本文记录一下python中处理配置文件的模块 ConfigParser用于对特定的配置进行操作，当前模块的名称在 python 3.x 版本中变更为 configparser。 12345678910111213# 注释1; 注释2[section1]k1 = v1k2:v2user=egonage=18is_admin=truesalary=31[section2]k1 = v1 读取1234567891011121314151617181920212223242526272829303132import configparserconfig=configparser.ConfigParser()config.read(&apos;a.cfg&apos;)#查看所有的标题res=config.sections() #[&apos;section1&apos;, &apos;section2&apos;]print(res)#查看标题section1下所有key=value的keyoptions=config.options(&apos;section1&apos;)print(options) #[&apos;k1&apos;, &apos;k2&apos;, &apos;user&apos;, &apos;age&apos;, &apos;is_admin&apos;, &apos;salary&apos;]#查看标题section1下所有key=value的(key,value)格式item_list=config.items(&apos;section1&apos;)print(item_list) #[(&apos;k1&apos;, &apos;v1&apos;), (&apos;k2&apos;, &apos;v2&apos;), (&apos;user&apos;, &apos;egon&apos;), (&apos;age&apos;, &apos;18&apos;), (&apos;is_admin&apos;, &apos;true&apos;), (&apos;salary&apos;, &apos;31&apos;)]#查看标题section1下user的值=&gt;字符串格式val=config.get(&apos;section1&apos;,&apos;user&apos;)print(val) #egon#查看标题section1下age的值=&gt;整数格式val1=config.getint(&apos;section1&apos;,&apos;age&apos;)print(val1) #18#查看标题section1下is_admin的值=&gt;布尔值格式val2=config.getboolean(&apos;section1&apos;,&apos;is_admin&apos;)print(val2) #True#查看标题section1下salary的值=&gt;浮点型格式val3=config.getfloat(&apos;section1&apos;,&apos;salary&apos;)print(val3) #31.0 改写123456789101112131415161718192021222324252627282930import configparserconfig=configparser.ConfigParser()config.read(&apos;a.cfg&apos;,encoding=&apos;utf-8&apos;)#删除整个标题section2config.remove_section(&apos;section2&apos;)#删除标题section1下的某个k1和k2config.remove_option(&apos;section1&apos;,&apos;k1&apos;)config.remove_option(&apos;section1&apos;,&apos;k2&apos;)#判断是否存在某个标题print(config.has_section(&apos;section1&apos;))#判断标题section1下是否有userprint(config.has_option(&apos;section1&apos;,&apos;&apos;))#添加一个标题config.add_section(&apos;egon&apos;)#在标题egon下添加name=egon,age=18的配置config.set(&apos;egon&apos;,&apos;name&apos;,&apos;egon&apos;)config.set(&apos;egon&apos;,&apos;age&apos;,18) #报错,必须是字符串#最后将修改的内容写入文件,完成最终的修改config.write(open(&apos;a.cfg&apos;,&apos;w&apos;)) 例子12345678910111213#类似这样的配置文件，一块一块的分类[DEFAULT]ServerAliveInterval = 45Compression = yesCompressionLevel = 9ForwardX11 = yes [bitbucket.org]User = hg [topsecret.server.com]Port = 50022ForwardX11 = no 1234567891011121314151617#生成类似格式的文件import configparserconfig = configparser.ConfigParser()config[&quot;DEFAULT&quot;] = &#123;&apos;ServerAliveInterval&apos;: &apos;45&apos;, &apos;Compression&apos;: &apos;yes&apos;, &apos;CompressionLevel&apos;: &apos;9&apos;&#125;config[&apos;bitbucket.org&apos;] = &#123;&#125;config[&apos;bitbucket.org&apos;][&apos;User&apos;] = &apos;hg&apos;config[&apos;topsecret.server.com&apos;] = &#123;&#125;topsecret = config[&apos;topsecret.server.com&apos;]topsecret[&apos;Host Port&apos;] = &apos;50022&apos; # mutates the parsertopsecret[&apos;ForwardX11&apos;] = &apos;no&apos; # same hereconfig[&apos;DEFAULT&apos;][&apos;ForwardX11&apos;] = &apos;yes&apos;with open(&apos;example.ini&apos;, &apos;w&apos;) as configfile: config.write(configfile) 1234567891011121314151617#删除（创建一个新文件，并删除bitbucket.org）import configparserconfig = configparser.ConfigParser()config.sections()config.read(&apos;example.ini&apos;)rec = config.remove_section(&quot;bitbucket.org&quot;)#删除该项config.write(open(&quot;example.cfg&quot;,&quot;w&quot;))[DEFAULT]compressionlevel = 9compression = yesserveraliveinterval = 45forwardx11 = yes[topsecret.server.com]host port = 50022forwardx11 = no]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-执行系统命令]]></title>
    <url>%2Fposts%2Fa58affda.html</url>
    <content type="text"><![CDATA[摘要可以执行shell命令的相关模块和函数有： os.system os.spawn* os.popen* –废弃 popen2.* –废弃 commands.* –废弃，3.x中被移除 subprocess commands123456import commandsresult = commands.getoutput(&apos;cmd&apos;)result = commands.getstatus(&apos;cmd&apos;)result = commands.getstatusoutput(&apos;cmd&apos;)(status, out) = commands.getstatusoutput(&apos;cmd&apos; + &apos; 2&gt;&amp;1&apos;) 以上执行shell命令的相关的模块和函数的功能均在 subprocess 模块中实现，并提供了更丰富的功能。 subprocesscall执行命令，返回状态码 12ret = subprocess.call([&quot;ls&quot;, &quot;-l&quot;], shell=False)ret = subprocess.call(&quot;ls -l&quot;, shell=True) shell = True ，允许 shell 命令是字符串形式 check_call执行命令，如果执行状态码是 0 ，则返回0，否则抛异常 12subprocess.check_call([&quot;ls&quot;, &quot;-l&quot;])subprocess.check_call(&quot;exit 1&quot;, shell=True) check_output执行命令，如果状态码是 0 ，则返回执行结果，否则抛异常 12subprocess.check_output([&quot;echo&quot;, &quot;Hello World!&quot;])subprocess.check_output(&quot;exit 1&quot;, shell=True) subprocess.Popen(…)用于执行复杂的系统命令 参数： args：shell命令，可以是字符串或者序列类型（如：list，元组） bufsize：指定缓冲。0 无缓冲,1 行缓冲,其他 缓冲区大小,负值 系统缓冲 stdin, stdout, stderr：分别表示程序的标准输入、输出、错误句柄 preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用 close_sfs：在windows平台下，如果close_fds被设置为True，则新创建的子进程将不会继承父进程的输入、输出、错误管道。所以不能将close_fds设置为True同时重定向子进程的标准输入、输出与错误(stdin, stdout, stderr)。 shell：同上 cwd：用于设置子进程的当前目录 env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。 universal_newlines：不同系统的换行符不同，True -&gt; 同意使用 \n startupinfo与createionflags只在windows下有效将被传递给底层的CreateProcess()函数，用于设置子进程的一些属性，如：主窗口的外观，进程的优先级等等 123import subprocessret1 = subprocess.Popen([&quot;mkdir&quot;,&quot;t1&quot;])ret2 = subprocess.Popen(&quot;mkdir t2&quot;, shell=True) 终端输入的命令分为两种： 输入即可得到输出，如：ifconfig 输入进行某环境，依赖再输入，如：python 123import subprocessobj = subprocess.Popen(&quot;mkdir t3&quot;, shell=True, cwd=&apos;/home/dev&apos;,) 12345678910111213141516import subprocessobj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)obj.stdin.write(&apos;print 1 \n &apos;)obj.stdin.write(&apos;print 2 \n &apos;)obj.stdin.write(&apos;print 3 \n &apos;)obj.stdin.write(&apos;print 4 \n &apos;)obj.stdin.close()cmd_out = obj.stdout.read()obj.stdout.close()cmd_error = obj.stderr.read()obj.stderr.close()print cmd_outprint cmd_error 12345678910import subprocessobj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)obj.stdin.write(&apos;print 1 \n &apos;)obj.stdin.write(&apos;print 2 \n &apos;)obj.stdin.write(&apos;print 3 \n &apos;)obj.stdin.write(&apos;print 4 \n &apos;)out_error_list = obj.communicate()print out_error_list 1234567891011121314151617181920212223242526272829303132333435import subprocessobj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)out_error_list = obj.communicate(&apos;print &quot;hello&quot;&apos;)print out_error_listimport subprocess&apos;&apos;&apos;sh-3.2# ls /Users/egon/Desktop |grep txt$mysql.txttt.txt事物.txt&apos;&apos;&apos;res1=subprocess.Popen(&apos;ls /Users/jieli/Desktop&apos;,shell=True,stdout=subprocess.PIPE)res=subprocess.Popen(&apos;grep txt$&apos;,shell=True,stdin=res1.stdout, stdout=subprocess.PIPE)print(res.stdout.read().decode(&apos;utf-8&apos;))#等同于上面,但是上面的优势在于,一个数据流可以和另外一个数据流交互,可以通过爬虫得到结果然后交给grepres1=subprocess.Popen(&apos;ls /Users/jieli/Desktop |grep txt$&apos;,shell=True,stdout=subprocess.PIPE)print(res1.stdout.read().decode(&apos;utf-8&apos;))#windows下:# dir | findstr &apos;test*&apos;# dir | findstr &apos;txt$&apos;import subprocessres1=subprocess.Popen(r&apos;dir C:\Users\Administrator\PycharmProjects\test\函数备课&apos;,shell=True,stdout=subprocess.PIPE)res=subprocess.Popen(&apos;findstr test*&apos;,shell=True,stdin=res1.stdout, stdout=subprocess.PIPE)print(res.stdout.read().decode(&apos;gbk&apos;)) #subprocess使用当前系统默认编码，得到结果为bytes类型，在windows下需要用gbk解码 系统命令例子安装cmdb 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#!/usr/bin/env python2# -*- coding: utf-8 -*-import osimport subprocessimport argparseimport timedef base(cmd): if subprocess.call(cmd, shell=True): raise Exception(&quot;&#123;&#125; 执行失败&quot;.format(cmd))def install_docker(): base(&quot;sudo yum install -y yum-utils device-mapper-persistent-data lvm2&quot;) base(&quot;sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&quot;) base(&quot;sudo yum makecache fast&quot;) base(&quot;sudo yum -y install docker-ce&quot;) if(not os.path.exists(&quot;/etc/docker&quot;)): base(&quot;mkdir -p /etc/docker&quot;) with open(&quot;/etc/docker/daemon.json&quot;, &quot;w&quot;) as f: f.write(&apos;&#123;\n &quot;registry-mirrors&quot;: [&quot;https://9f4w4icn.mirror.aliyuncs.com&quot;] \n&#125;&apos;) base(&quot;sudo systemctl daemon-reload&quot;) base(&quot;sudo systemctl start docker&quot;)def create_dir(): if (not os.path.exists(&quot;/var/cmdb/db&quot;)): base(&quot;sudo mkdir -p /var/cmdb/db&quot;) if (not os.path.exists(&quot;/var/cmdb/es&quot;)): base(&quot;sudo mkdir -p /var/cmdb/es&quot;)def run_db_container(): base(&quot;sudo docker run --name cmdb-db -d -e MYSQL_ROOT_PASSWORD=cmdbcmdb -v /var/cmdb/db:/var/lib/mysql mysql:5.7.21&quot;)def run_es_container(): base(&quot;sudo docker run --name cmdb-es -d -v /var/cmdb/es:/usr/share/elasticsearch/data elasticsearch:5.6.8&quot;)def init_db(): base(&quot;sudo docker run -it --rm --link cmdb-db -e DB_HOST=cmdb-db -e ENV=PRO -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb mingmingtang/cmdb init-db&quot;)def run_cmdb_container(site_url, email_host, email_port, email_username, email_password): base(&quot;sudo docker run -d --name cmdb --link cmdb-db --link cmdb-es -p 80:80 -e ENV=PRO -e SITE_URL=&#123;&#125; -e DB_HOST=cmdb-db -e DB_PORT=3306 -e DB_USERNAME=root -e DB_PASSWORD=cmdbcmdb -e DB_NAME=cmdb -e ELASTICSEARCH_HOSTS=cmdb-es -e EMAIL_HOST=&#123;&#125; -e EMAIL_PORT=&#123;&#125; -e EMAIL_USERNAME=&#123;&#125; -e EMAIL_PASSWORD=&#123;&#125; mingmingtang/cmdb start&quot;.format(site_url, email_host, email_port, email_username, email_password))def input_para(help): value = &quot;&quot; while(not value): value = raw_input(help) return valueif __name__ == &apos;__main__&apos;: if(os.geteuid() != 0): raise(&quot;请以root权限运行&quot;) # parser = argparse.ArgumentParser() # parser.add_argument(&quot;--siteurl&quot;, type=str, help=&quot;E.g: http://cmdb.xxx.com, http://172.17.100.1&quot;) # parser.add_argument(&quot;--emailhost&quot;, type=str, help=&quot;E.g: http://cmdb.xxx.com, http://172.17.100.1&quot;) # parser.add_argument(&quot;--emailport&quot;, type=str, help=&quot;E.g: http://cmdb.xxx.com, http://172.17.100.1&quot;) # parser.add_argument(&quot;--emailusername&quot;, type=str, help=&quot;E.g: http://cmdb.xxx.com, http://172.17.100.1&quot;) # parser.add_argument(&quot;--emailpassword&quot;, type=str, help=&quot;E.g: http://cmdb.xxx.com, http://172.17.100.1&quot;) # args = parser.parse_args() # SITE_URL = args.SITE_URL site_url = input_para(&quot;请输入网站域名或IP（http://cmdb.xxx.com）：&quot;) email_host = input_para(&quot;网站邮箱服务器（smtp.163.com）：&quot;) email_port = input_para(&quot;邮箱服务器端口（25）：&quot;) email_username = input_para(&quot;邮箱用户名（cmdb@163.com）：&quot;) email_password = input_para(&quot;邮箱密码|独立授权码（P@ssw0rd）：&quot;) print(&quot;开始安装docker&quot;) install_docker() print(&quot;开始创建目录&quot;) create_dir() print(&quot;开始运行mysql容器&quot;) run_db_container() print(&quot;开始运行elasticsearch容器&quot;) run_es_container() print(&quot;等待数据库启动完成(10s)&quot;) time.sleep(10) print(&quot;开始初始化数据库&quot;) init_db() print(&quot;开始运行cmdb&quot;) run_cmdb_container(site_url, email_host, email_port, email_username, email_password) print(&quot;完成！&quot;)]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-argparse、optparse]]></title>
    <url>%2Fposts%2F7961baec.html</url>
    <content type="text"><![CDATA[摘要本文记录一些python中optparse和argparse模块的常用方法 optparseoptparse模块主要用来为脚本传递命令参数，采用预先定义好的选项来解析命令行参数。 首先需要引入optparser模块，然后执行初始化，实例化一个OptionParser对象(可以带参，也可以不带参数)，再为命令行添加选项 12345678import optparseusage=&quot;python %prog -H &lt;target host&gt; -p/-P &lt;target ports&gt;&quot; #用于显示帮助信息parser=optparse.OptionParser(usage) #创建对象实例parser.add_option(&apos;-H&apos;,dest=&apos;Host&apos;,type=&apos;string&apos;,help=&apos;target host&apos;) ##需要的命令行参数parser.add_option(&apos;-P&apos;,&apos;-p&apos;,dest=&apos;Ports&apos;,type=&apos;string&apos;,help=&apos;target ports&apos; default=&quot;20,21&quot;) ## -p/-P 都可以(options,args)=parser.parse_args()print(options.Host)print(options.Ports) 12345678910from optparse import OptionParserusage=&quot;show something usefull-- for example: how to use this program&quot;parser = OptionParser(usage) #带参的话会把参数变量的内容作为帮助信息输出parser.add_option(&quot;-f&quot;,&quot;--file&quot;,dest=&quot;filename&quot;,help=&quot;read picture from File&quot;,metavar=&quot;FILE&quot;,action = &quot;store&quot;,type=&quot;string&quot;)parser.add_option(&quot;-s&quot;,&quot;--save&quot;,dest=&quot;save_mold&quot;,help=&quot;save image to file or not&quot;,default = True)(options,args)=parser.parse_args()print options.filenameprint options.save_mold 12345678910各个参数的含义：dest：用于保存输入的临时变量，其值通过options的属性进行访问，存储的内容是dest之前输入的参数，多个参数用逗号分隔type: 用于检查命令行参数传入的参数的数据类型是否符合要求，有 string，int，float 等类型help：用于生成帮助信息default: 给dest的默认值，如果用户没有在命令行参数给dest分配值，则使用默认值action: 用于指导程序在遇到命令行参数时候该如何处理，有三种值可选： store,store_false和store_true,默认值是store store：读取参数，如果参数类型符合type的要求，则将参数值传递给dest变量，作为options的一个属性供使用。 store_true/store_false: 一般作为一个标记使用，分别设置dest变量的值为True和Falsemetavar: 占位字符串，用于在输出帮助信息时，代替当前命令选项的附加参数的值进行输出，只在帮助信息里有用，注意其和default的区别 argparse1234567891011import argparseparser = argparse.ArgumentParser(description=&apos;Process some integers.&apos;)parser.add_argument(&apos;integers&apos;, metavar=&apos;N&apos;, type=int, nargs=&apos;+&apos;, help=&apos;an integer for the accumulator&apos;)parser.add_argument(&apos;--sum&apos;, dest=&apos;accumulate&apos;, action=&apos;store_const&apos;, const=sum, default=max, help=&apos;sum the integers (default: find the max)&apos;)args = parser.parse_args()print(args.accumulate(args.integers)) 1234567891011121314151617181920212223$ python prog.py -husage: prog.py [-h] [--sum] N [N ...]Process some integers.positional arguments: N an integer for the accumulatoroptional arguments: -h, --help show this help message and exit --sum sum the integers (default: find the max)### $ python prog.py 1 2 3 44$ python prog.py 1 2 3 4 --sum10### $ python prog.py a b cusage: prog.py [-h] [--sum] N [N ...]prog.py: error: argument N: invalid int value: &apos;a&apos; 使用步骤12345678910# 导入模块1:import argparse# 创建解析对象2:parser = argparse.ArgumentParser()# 添加参数项3:parser.add_argument()# 解析参数项4:args = parser.parse_args()# 使用5:args.xxx ArgumentParser对象参数解析这部分并非重点内容，只要知道前几个参数的用法即可 12class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&apos;-&apos;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&apos;error&apos;, add_help=True, allow_abbrev=True)Create a new ArgumentParser object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are: prog - The name of the program (default: sys.argv[0]) usage - The string describing the program usage (default: generated from arguments added to parser) description - Text to display before the argument help (default: none) epilog - Text to display after the argument help (default: none) parents - A list of ArgumentParser objects whose arguments should also be included formatter_class - A class for customizing the help output prefix_chars - The set of characters that prefix optional arguments (default: ‘-‘) fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None) argument_default - The global default value for arguments (default: None) conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary) add_help - Add a -h/–help option to the parser (default: True) allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: True) progprog参数相当于python中的sys.argv[0]，默认为当前执行脚本的脚本名，可以进行自定义。 1parser = argparse.ArgumentParser(prog=&apos;myprogram&apos;) usageusage参数用来提示参数项使用方式，默认会自动生成，可以进行自定义 1parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, usage=&apos;%(prog)s [options]&apos;) descriptiondescription用来添加帮助菜单中的描述信息，默认为空。 1parser = argparse.ArgumentParser(description=&apos;A foo that bars&apos;) epilogepilog用来添加帮助菜单中的程序结尾描述信息，默认为空。 123parser = argparse.ArgumentParser( description=&apos;A foo that bars&apos;, epilog=&quot;And that&apos;s how you&apos;d foo a bar&quot;) parents有时候，有些参数项可能作为一组通用参数项来分享给不通的程序，而无需重复的来定义这些参数项，这时候就可以用到parents参数，子对象会继承parents的所有参数项。 123456789101112131415# 首先定义一个用来继承的parents，需要关闭add_help参数parent_parser = argparse.ArgumentParser(add_help=False)parent_parser.add_argument(&apos;--parent&apos;, type=int)# 子对象foo_parser = argparse.ArgumentParser(parents=[parent_parser])foo_parser.add_argument(&apos;foo&apos;)foo_parser.parse_args([&apos;--parent&apos;, &apos;2&apos;, &apos;XXX&apos;])Namespace(foo=&apos;XXX&apos;, parent=2)# 子对象bar_parser = argparse.ArgumentParser(parents=[parent_parser])bar_parser.add_argument(&apos;--bar&apos;)bar_parser.parse_args([&apos;--bar&apos;, &apos;YYY&apos;])Namespace(bar=&apos;YYY&apos;, parent=None) formatter_class使用这个参数的几个选项可以把帮助信息中的格式进行修改。 RawDescriptionHelpFormatter定制描述信息缩进格式 123456789101112131415161718192021parser = argparse.ArgumentParser( prog=&apos;PROG&apos;, formatter_class=argparse.RawDescriptionHelpFormatter, description=textwrap.dedent(&apos;&apos;&apos;\ Please do not mess up this text! -------------------------------- I have indented it exactly the way I want it &apos;&apos;&apos;))usage: PROG [-h]Please do not mess up this text!-------------------------------- I have indented it exactly the way I want itoptional arguments: -h, --help show this help message and exit ArgumentDefaultsHelpFormatter自动增加defaults值显示 1234567891011121314parser = argparse.ArgumentParser( prog=&apos;PROG&apos;, formatter_class=argparse.ArgumentDefaultsHelpFormatter)parser.add_argument(&apos;--foo&apos;, type=int, default=42, help=&apos;FOO!&apos;)parser.add_argument(&apos;bar&apos;, nargs=&apos;*&apos;, default=[1, 2, 3], help=&apos;BAR!&apos;)usage: PROG [-h] [--foo FOO] [bar [bar ...]]positional arguments: bar BAR! (default: [1, 2, 3])optional arguments: -h, --help show this help message and exit --foo FOO FOO! (default: 42) MetavarTypeHelpFormatter用参数类型来替代帮助信息 1234567891011121314parser = argparse.ArgumentParser( prog=&apos;PROG&apos;, formatter_class=argparse.MetavarTypeHelpFormatter)parser.add_argument(&apos;--foo&apos;, type=int)parser.add_argument(&apos;bar&apos;, type=float)usage: PROG [-h] [--foo int] floatpositional arguments: floatoptional arguments: -h, --help show this help message and exit --foo int prefix_charsprefix_chars可以定义选项参数的前缀，默认为[-/–]。 123parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, prefix_chars=&apos;-+&apos;)parser.add_argument(&apos;+f&apos;)parser.add_argument(&apos;++bar&apos;) fromfile_prefix_charsfromfile_prefix_chars可以指定文件为添加参数项值。 123456with open(&apos;args.txt&apos;, &apos;w&apos;) as fp: fp.write(&apos;-f\nbar&apos;)parser = argparse.ArgumentParser(fromfile_prefix_chars=&apos;@&apos;)parser.add_argument(&apos;-f&apos;)parser.parse_args([&apos;-f&apos;, &apos;foo&apos;, &apos;@args.txt&apos;])Namespace(f=&apos;bar&apos;) argument_default正常来说给一个参数项设定默认值可以通过add_argument()或者set_defaults()方法来添加，但是只能对每个参数单独制定，但是使用argument_default参数可以给所有没有默认值的参数一个默认值。 1Generally, argument defaults are specified either by passing a default to add_argument() or by calling the set_defaults() methods with a specific set of name-value pairs. Sometimes however, it may be useful to specify a single parser-wide default for arguments. This can be accomplished by passing the argument_default= keyword argument to ArgumentParser. For example, to globally suppress attribute creation on parse_args() calls, we supply argument_default=SUPPRESS: 这个参数没看懂，贴一下官方文档吧 1parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS) allow_abbrev通常情况，当你传递一个参数项的时候，可以传递一个缩写的参数项，allow_abbrev参数可以关闭缩写参数项（python3）。 12345678910111213parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, allow_abbrev=False)parser.add_argument(&apos;--foobar&apos;, action=&apos;store_true&apos;)parser.add_argument(&apos;--foonley&apos;, action=&apos;store_false&apos;)parser.parse_args([&apos;--foon&apos;])usage: PROG [-h] [--foobar] [--foonley]PROG: error: unrecognized arguments: --foon# 不关闭的情况parser.parse_args([&apos;--foob&apos;])Namespace(foobar=True, foonley=True)parser.parse_args([&apos;--foon&apos;])Namespace(foobar=False, foonley=False) conflict_handler正常来说你指定了一个参数项，是不能在此指定来覆盖已经指定的参数项的，conflict_handler可以开放这个功能。 123456789101112131415161718&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-f&apos;, &apos;--foo&apos;, help=&apos;old foo help&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, help=&apos;new foo help&apos;)Traceback (most recent call last): ..ArgumentError: argument --foo: conflicting option string(s): --foo&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, conflict_handler=&apos;resolve&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-f&apos;, &apos;--foo&apos;, help=&apos;old foo help&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, help=&apos;new foo help&apos;)&gt;&gt;&gt; parser.print_help()usage: PROG [-h] [-f FOO] [--foo FOO]optional arguments: -h, --help show this help message and exit -f FOO old foo help --foo FOO new foo help add_help可以用这个参数来关闭默认的help信息，然后自定义。关闭了之后还是可以用parser.print_help() 来打印帮助信息的。 1parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, add_help=False) add_argument方法参数解析这个才是本文的重点 12ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are: name or flags - Either a name or a list of option strings, e.g. foo or -f, –foo. action - The basic type of action to be taken when this argument is encountered at the command line. nargs - The number of command-line arguments that should be consumed. const - A constant value required by some action and nargs selections. default - The value produced if the argument is absent from the command line. type - The type to which the command-line argument should be converted. choices - A container of the allowable values for the argument. required - Whether or not the command-line option may be omitted (optionals only). help - A brief description of what the argument does. metavar - A name for the argument in usage messages. dest - The name of the attribute to be added to the object returned by parse_args(). name or flags选项名、参数名、标签。分为两种 带前缀：-f -foo ，参数项 不带前缀：bar，位置变量 12parser.add_argument(&apos;-f&apos;, &apos;--foo&apos;)parser.add_argument(&apos;bar&apos;) actionaction用来定义添加参数项的属性类型。 store默认类型，只是用来存储一个值。 1234&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;)&gt;&gt;&gt; parser.parse_args(&apos;--foo 1&apos;.split())Namespace(foo=&apos;1&apos;) store_const和const参数一起使用，存储一个常量。 1234&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=&apos;store_const&apos;, const=42)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;])Namespace(foo=42) store_true &amp; store_false存储常量的特殊类型，存储布尔值。 123456&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--bar&apos;, action=&apos;store_false&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--baz&apos;, action=&apos;store_false&apos;)&gt;&gt;&gt; parser.parse_args(&apos;--foo --bar&apos;.split())Namespace(foo=True, bar=False, baz=True) append追加属性，参数项可以多次出现，多次值会追加成一个list。 1234&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=&apos;append&apos;)&gt;&gt;&gt; parser.parse_args(&apos;--foo 1 --foo 2&apos;.split())Namespace(foo=[&apos;1&apos;, &apos;2&apos;]) append_const和const一起使用，用来追加常量。 12345&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--str&apos;, dest=&apos;types&apos;, action=&apos;append_const&apos;, const=str)&gt;&gt;&gt; parser.add_argument(&apos;--int&apos;, dest=&apos;types&apos;, action=&apos;append_const&apos;, const=int)&gt;&gt;&gt; parser.parse_args(&apos;--str --int&apos;.split())Namespace(types=[&lt;class &apos;str&apos;&gt;, &lt;class &apos;int&apos;&gt;]) count数量统计，参数项可以多次出现，记录出现次数为选项的值。 1234&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--verbose&apos;, &apos;-v&apos;, action=&apos;count&apos;)&gt;&gt;&gt; parser.parse_args([&apos;-vvv&apos;])Namespace(verbose=3) help自定义help选项的时候使用的。 version创建版本信息使用。 12345&gt;&gt;&gt; import argparse&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--version&apos;, action=&apos;version&apos;, version=&apos;%(prog)s 2.0&apos;)&gt;&gt;&gt; parser.parse_args([&apos;--version&apos;])PROG 2.0 自定义action1234567891011121314151617&gt;&gt;&gt; class FooAction(argparse.Action):... def __init__(self, option_strings, dest, nargs=None, **kwargs):... if nargs is not None:... raise ValueError(&quot;nargs not allowed&quot;)... super(FooAction, self).__init__(option_strings, dest, **kwargs)... def __call__(self, parser, namespace, values, option_string=None):... print(&apos;%r %r %r&apos; % (namespace, values, option_string))... setattr(namespace, self.dest, values)...&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=FooAction)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, action=FooAction)&gt;&gt;&gt; args = parser.parse_args(&apos;1 --foo 2&apos;.split())Namespace(bar=None, foo=None) &apos;1&apos; NoneNamespace(bar=&apos;1&apos;, foo=None) &apos;2&apos; &apos;--foo&apos;&gt;&gt;&gt; argsNamespace(bar=&apos;1&apos;, foo=&apos;2&apos;) nargs这个参数用来规定添加的参数项对应参数值的个数。 1、2、3… ‘?’ 0或1个 ‘+’ 至少一个 ‘*’ 0到多个 argparse.REMAINDER ？？？ 12345&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, nargs=2)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, nargs=1)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, nargs=&apos;?&apos;, const=&apos;c&apos;, default=&apos;d&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--bar&apos;, nargs=&apos;*&apos;)&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, nargs=&apos;+&apos;) const设定一个常量的值，与store_const 和append_const 一起使用。 default设定一个默认值 type设定参数项的值的类型。默认str类型，可以int、float等。 12345678910&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, type=int)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, type=open)&gt;&gt;&gt; parser.parse_args(&apos;2 temp.txt&apos;.split())Namespace(bar=&lt;_io.TextIOWrapper name=&apos;temp.txt&apos; encoding=&apos;UTF-8&apos;&gt;, foo=2)&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, type=argparse.FileType(&apos;w&apos;))&gt;&gt;&gt; parser.parse_args([&apos;out.txt&apos;])Namespace(bar=&lt;_io.TextIOWrapper name=&apos;out.txt&apos; encoding=&apos;UTF-8&apos;&gt;) 可以自定义类型 123456789101112131415&gt;&gt;&gt; def perfect_square(string):... value = int(string)... sqrt = math.sqrt(value)... if sqrt != int(sqrt):... msg = &quot;%r is not a perfect square&quot; % string... raise argparse.ArgumentTypeError(msg)... return value...&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, type=perfect_square)&gt;&gt;&gt; parser.parse_args([&apos;9&apos;])Namespace(foo=9)&gt;&gt;&gt; parser.parse_args([&apos;7&apos;])usage: PROG [-h] fooPROG: error: argument foo: &apos;7&apos; is not a perfect square 可以配合使用choices参数来定义参数值范围 1234567&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, type=int, choices=range(5, 10))&gt;&gt;&gt; parser.parse_args([&apos;7&apos;])Namespace(foo=7)&gt;&gt;&gt; parser.parse_args([&apos;11&apos;])usage: PROG [-h] &#123;5,6,7,8,9&#125;PROG: error: argument foo: invalid choice: 11 (choose from 5, 6, 7, 8, 9) choices用来限制参数值的选定范围 12parser.add_argument(&apos;move&apos;, choices=[&apos;rock&apos;, &apos;paper&apos;, &apos;scissors&apos;])parser.add_argument(&apos;door&apos;, type=int, choices=range(1, 4)) required设定这个属性可是让参数项变成必选项。 1234567&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, required=True)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;, &apos;BAR&apos;])Namespace(foo=&apos;BAR&apos;)&gt;&gt;&gt; parser.parse_args([])usage: argparse.py [-h] [--foo FOO]argparse.py: error: option --foo is required help用来添加参数项的帮助信息 metavar打印帮助信息时，参数项的演示值。 1234567891011121314151617181920212223242526&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, metavar=&apos;YYY&apos;)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, metavar=&apos;XXX&apos;)&gt;&gt;&gt; parser.parse_args(&apos;X --foo Y&apos;.split())Namespace(bar=&apos;X&apos;, foo=&apos;Y&apos;)&gt;&gt;&gt; parser.print_help()usage: [-h] [--foo YYY] XXXpositional arguments: XXXoptional arguments: -h, --help show this help message and exit --foo YYY &gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-x&apos;, nargs=2)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, nargs=2, metavar=(&apos;bar&apos;, &apos;baz&apos;))&gt;&gt;&gt; parser.print_help()usage: PROG [-h] [-x X X] [--foo bar baz]optional arguments: -h, --help show this help message and exit -x X X --foo bar baz dest可以用来指定参数项名字。 1234&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, dest=&apos;bar&apos;)&gt;&gt;&gt; parser.parse_args(&apos;--foo XXX&apos;.split())Namespace(bar=&apos;XXX&apos;) parse_args()方法参数说明用来解析参数项，这部分不是重点，看看就好。 Option value syntax参数项使用方式 1234567891011121314151617181920&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-x&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;)&gt;&gt;&gt; parser.parse_args([&apos;-x&apos;, &apos;X&apos;])Namespace(foo=None, x=&apos;X&apos;)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;, &apos;FOO&apos;])Namespace(foo=&apos;FOO&apos;, x=None)&gt;&gt;&gt; parser.parse_args([&apos;--foo=FOO&apos;])Namespace(foo=&apos;FOO&apos;, x=None)&gt;&gt;&gt; parser.parse_args([&apos;-xX&apos;])Namespace(foo=None, x=&apos;X&apos;)&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-x&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-y&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-z&apos;)&gt;&gt;&gt; parser.parse_args([&apos;-xyzZ&apos;])Namespace(x=True, y=True, z=&apos;Z&apos;) Invalid arguments错误输出，参数项或参数值不符合规定时会提示错误信息 123456789101112131415161718&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, type=int)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;, nargs=&apos;?&apos;)&gt;&gt;&gt; # invalid type&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;, &apos;spam&apos;])usage: PROG [-h] [--foo FOO] [bar]PROG: error: argument --foo: invalid int value: &apos;spam&apos;&gt;&gt;&gt; # invalid option&gt;&gt;&gt; parser.parse_args([&apos;--bar&apos;])usage: PROG [-h] [--foo FOO] [bar]PROG: error: no such option: --bar&gt;&gt;&gt; # wrong number of arguments&gt;&gt;&gt; parser.parse_args([&apos;spam&apos;, &apos;badger&apos;])usage: PROG [-h] [--foo FOO] [bar]PROG: error: extra arguments found: badger Arguments containing1234567891011121314151617181920212223242526272829&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-x&apos;)&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, nargs=&apos;?&apos;)&gt;&gt;&gt; # no negative number options, so -1 is a positional argument&gt;&gt;&gt; parser.parse_args([&apos;-x&apos;, &apos;-1&apos;])Namespace(foo=None, x=&apos;-1&apos;)&gt;&gt;&gt; # no negative number options, so -1 and -5 are positional arguments&gt;&gt;&gt; parser.parse_args([&apos;-x&apos;, &apos;-1&apos;, &apos;-5&apos;])Namespace(foo=&apos;-5&apos;, x=&apos;-1&apos;)&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-1&apos;, dest=&apos;one&apos;)&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, nargs=&apos;?&apos;)&gt;&gt;&gt; # negative number options present, so -1 is an option&gt;&gt;&gt; parser.parse_args([&apos;-1&apos;, &apos;X&apos;])Namespace(foo=None, one=&apos;X&apos;)&gt;&gt;&gt; # negative number options present, so -2 is an option&gt;&gt;&gt; parser.parse_args([&apos;-2&apos;])usage: PROG [-h] [-1 ONE] [foo]PROG: error: no such option: -2&gt;&gt;&gt; # negative number options present, so both -1s are options&gt;&gt;&gt; parser.parse_args([&apos;-1&apos;, &apos;-1&apos;])usage: PROG [-h] [-1 ONE] [foo]PROG: error: argument -1: expected one argument Argument abbreviations (prefix matching)12345678910&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-bacon&apos;)&gt;&gt;&gt; parser.add_argument(&apos;-badger&apos;)&gt;&gt;&gt; parser.parse_args(&apos;-bac MMM&apos;.split())Namespace(bacon=&apos;MMM&apos;, badger=None)&gt;&gt;&gt; parser.parse_args(&apos;-bad WOOD&apos;.split())Namespace(bacon=None, badger=&apos;WOOD&apos;)&gt;&gt;&gt; parser.parse_args(&apos;-ba BA&apos;.split())usage: PROG [-h] [-bacon BACON] [-badger BADGER]PROG: error: ambiguous option: -ba could match -badger, -bacon Beyond sys.argv1234567891011&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(... &apos;integers&apos;, metavar=&apos;int&apos;, type=int, choices=range(10),... nargs=&apos;+&apos;, help=&apos;an integer in the range 0..9&apos;)&gt;&gt;&gt; parser.add_argument(... &apos;--sum&apos;, dest=&apos;accumulate&apos;, action=&apos;store_const&apos;, const=sum,... default=max, help=&apos;sum the integers (default: find the max)&apos;)&gt;&gt;&gt; parser.parse_args([&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;])Namespace(accumulate=&lt;built-in function max&gt;, integers=[1, 2, 3, 4])&gt;&gt;&gt; parser.parse_args([&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;--sum&apos;])Namespace(accumulate=&lt;built-in function sum&gt;, integers=[1, 2, 3, 4]) The Namespace object1234567891011121314151617&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;)&gt;&gt;&gt; args = parser.parse_args([&apos;--foo&apos;, &apos;BAR&apos;])&gt;&gt;&gt; vars(args)&#123;&apos;foo&apos;: &apos;BAR&apos;&#125;&gt;&gt;&gt; class C:... pass...&gt;&gt;&gt; c = C()&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;)&gt;&gt;&gt; parser.parse_args(args=[&apos;--foo&apos;, &apos;BAR&apos;], namespace=c)&gt;&gt;&gt; c.foo&apos;BAR&apos; 其他方法这部分内容有一些东西还是比较有用的 Sub-commands子参数项，可以设置子参数项的参数项。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&gt;&gt;&gt; # create the top-level parser&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=&apos;store_true&apos;, help=&apos;foo help&apos;)&gt;&gt;&gt; subparsers = parser.add_subparsers(help=&apos;sub-command help&apos;)&gt;&gt;&gt;&gt;&gt;&gt; # create the parser for the &quot;a&quot; command&gt;&gt;&gt; parser_a = subparsers.add_parser(&apos;a&apos;, help=&apos;a help&apos;)&gt;&gt;&gt; parser_a.add_argument(&apos;bar&apos;, type=int, help=&apos;bar help&apos;)&gt;&gt;&gt;&gt;&gt;&gt; # create the parser for the &quot;b&quot; command&gt;&gt;&gt; parser_b = subparsers.add_parser(&apos;b&apos;, help=&apos;b help&apos;)&gt;&gt;&gt; parser_b.add_argument(&apos;--baz&apos;, choices=&apos;XYZ&apos;, help=&apos;baz help&apos;)&gt;&gt;&gt;&gt;&gt;&gt; # parse some argument lists&gt;&gt;&gt; parser.parse_args([&apos;a&apos;, &apos;12&apos;])Namespace(bar=12, foo=False)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;, &apos;b&apos;, &apos;--baz&apos;, &apos;Z&apos;])Namespace(baz=&apos;Z&apos;, foo=True)#####&gt;&gt;&gt; parser.parse_args([&apos;--help&apos;])usage: PROG [-h] [--foo] &#123;a,b&#125; ...positional arguments: &#123;a,b&#125; sub-command help a a help b b helpoptional arguments: -h, --help show this help message and exit --foo foo help&gt;&gt;&gt; parser.parse_args([&apos;a&apos;, &apos;--help&apos;])usage: PROG a [-h] barpositional arguments: bar bar helpoptional arguments: -h, --help show this help message and exit&gt;&gt;&gt; parser.parse_args([&apos;b&apos;, &apos;--help&apos;])usage: PROG b [-h] [--baz &#123;X,Y,Z&#125;]optional arguments: -h, --help show this help message and exit --baz &#123;X,Y,Z&#125; baz help 还可以设置单独的标题和描述信息 12345678910111213141516&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; subparsers = parser.add_subparsers(title=&apos;subcommands&apos;,... description=&apos;valid subcommands&apos;,... help=&apos;additional help&apos;)&gt;&gt;&gt; subparsers.add_parser(&apos;foo&apos;)&gt;&gt;&gt; subparsers.add_parser(&apos;bar&apos;)&gt;&gt;&gt; parser.parse_args([&apos;-h&apos;])usage: [-h] &#123;foo,bar&#125; ...optional arguments: -h, --help show this help message and exitsubcommands: valid subcommands &#123;foo,bar&#125; additional help 可以添加别名 123456&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; subparsers = parser.add_subparsers()&gt;&gt;&gt; checkout = subparsers.add_parser(&apos;checkout&apos;, aliases=[&apos;co&apos;])&gt;&gt;&gt; checkout.add_argument(&apos;foo&apos;)&gt;&gt;&gt; parser.parse_args([&apos;co&apos;, &apos;bar&apos;])Namespace(foo=&apos;bar&apos;) 12345678910111213141516171819202122232425262728293031&gt;&gt;&gt; # sub-command functions&gt;&gt;&gt; def foo(args):... print(args.x * args.y)...&gt;&gt;&gt; def bar(args):... print(&apos;((%s))&apos; % args.z)...&gt;&gt;&gt; # create the top-level parser&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; subparsers = parser.add_subparsers()&gt;&gt;&gt;&gt;&gt;&gt; # create the parser for the &quot;foo&quot; command&gt;&gt;&gt; parser_foo = subparsers.add_parser(&apos;foo&apos;)&gt;&gt;&gt; parser_foo.add_argument(&apos;-x&apos;, type=int, default=1)&gt;&gt;&gt; parser_foo.add_argument(&apos;y&apos;, type=float)&gt;&gt;&gt; parser_foo.set_defaults(func=foo)&gt;&gt;&gt;&gt;&gt;&gt; # create the parser for the &quot;bar&quot; command&gt;&gt;&gt; parser_bar = subparsers.add_parser(&apos;bar&apos;)&gt;&gt;&gt; parser_bar.add_argument(&apos;z&apos;)&gt;&gt;&gt; parser_bar.set_defaults(func=bar)&gt;&gt;&gt;&gt;&gt;&gt; # parse the args and call whatever function was selected&gt;&gt;&gt; args = parser.parse_args(&apos;foo 1 -x 2&apos;.split())&gt;&gt;&gt; args.func(args)2.0&gt;&gt;&gt;&gt;&gt;&gt; # parse the args and call whatever function was selected&gt;&gt;&gt; args = parser.parse_args(&apos;bar XYZYX&apos;.split())&gt;&gt;&gt; args.func(args)((XYZYX)) 12345678&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; subparsers = parser.add_subparsers(dest=&apos;subparser_name&apos;)&gt;&gt;&gt; subparser1 = subparsers.add_parser(&apos;1&apos;)&gt;&gt;&gt; subparser1.add_argument(&apos;-x&apos;)&gt;&gt;&gt; subparser2 = subparsers.add_parser(&apos;2&apos;)&gt;&gt;&gt; subparser2.add_argument(&apos;y&apos;)&gt;&gt;&gt; parser.parse_args([&apos;2&apos;, &apos;frobble&apos;])Namespace(subparser_name=&apos;2&apos;, y=&apos;frobble&apos;) FileType objects12345678910&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--raw&apos;, type=argparse.FileType(&apos;wb&apos;, 0))&gt;&gt;&gt; parser.add_argument(&apos;out&apos;, type=argparse.FileType(&apos;w&apos;, encoding=&apos;UTF-8&apos;))&gt;&gt;&gt; parser.parse_args([&apos;--raw&apos;, &apos;raw.dat&apos;, &apos;file.txt&apos;])Namespace(out=&lt;_io.TextIOWrapper name=&apos;file.txt&apos; mode=&apos;w&apos; encoding=&apos;UTF-8&apos;&gt;, raw=&lt;_io.FileIO name=&apos;raw.dat&apos; mode=&apos;wb&apos;&gt;)&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;infile&apos;, type=argparse.FileType(&apos;r&apos;))&gt;&gt;&gt; parser.parse_args([&apos;-&apos;])Namespace(infile=&lt;_io.TextIOWrapper name=&apos;&lt;stdin&gt;&apos; encoding=&apos;UTF-8&apos;&gt;) Argument groups参数项组 1234567891011121314151617&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;, add_help=False)&gt;&gt;&gt; group1 = parser.add_argument_group(&apos;group1&apos;, &apos;group1 description&apos;)&gt;&gt;&gt; group1.add_argument(&apos;foo&apos;, help=&apos;foo help&apos;)&gt;&gt;&gt; group2 = parser.add_argument_group(&apos;group2&apos;, &apos;group2 description&apos;)&gt;&gt;&gt; group2.add_argument(&apos;--bar&apos;, help=&apos;bar help&apos;)&gt;&gt;&gt; parser.print_help()usage: PROG [--bar BAR] foogroup1: group1 description foo foo helpgroup2: group2 description --bar BAR bar help Mutual exclusion12345678910111213141516171819&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; group = parser.add_mutually_exclusive_group()&gt;&gt;&gt; group.add_argument(&apos;--foo&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; group.add_argument(&apos;--bar&apos;, action=&apos;store_false&apos;)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;])Namespace(bar=True, foo=True)&gt;&gt;&gt; parser.parse_args([&apos;--bar&apos;])Namespace(bar=False, foo=False)&gt;&gt;&gt; parser.parse_args([&apos;--foo&apos;, &apos;--bar&apos;])usage: PROG [-h] [--foo | --bar]PROG: error: argument --bar: not allowed with argument --foo&gt;&gt;&gt; parser = argparse.ArgumentParser(prog=&apos;PROG&apos;)&gt;&gt;&gt; group = parser.add_mutually_exclusive_group(required=True)&gt;&gt;&gt; group.add_argument(&apos;--foo&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; group.add_argument(&apos;--bar&apos;, action=&apos;store_false&apos;)&gt;&gt;&gt; parser.parse_args([])usage: PROG [-h] (--foo | --bar)PROG: error: one of the arguments --foo --bar is required Parser defaults123456789101112131415161718&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;foo&apos;, type=int)&gt;&gt;&gt; parser.set_defaults(bar=42, baz=&apos;badger&apos;)&gt;&gt;&gt; parser.parse_args([&apos;736&apos;])Namespace(bar=42, baz=&apos;badger&apos;, foo=736)&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, default=&apos;bar&apos;)&gt;&gt;&gt; parser.set_defaults(foo=&apos;spam&apos;)&gt;&gt;&gt; parser.parse_args([])Namespace(foo=&apos;spam&apos;)&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, default=&apos;badger&apos;)&gt;&gt;&gt; parser.get_default(&apos;foo&apos;)&apos;badger&apos; Printing help12345678910111213ArgumentParser.print_usage(file=None)Print a brief description of how the ArgumentParser should be invoked on the command line. If file is None, sys.stdout is assumed.ArgumentParser.print_help(file=None)Print a help message, including the program usage and information about the arguments registered with the ArgumentParser. If file is None, sys.stdout is assumed.There are also variants of these methods that simply return a string instead of printing it:ArgumentParser.format_usage()Return a string containing a brief description of how the ArgumentParser should be invoked on the command line.ArgumentParser.format_help()Return a string containing a help message, including the program usage and information about the arguments registered with the ArgumentParser. Partial parsing12345&gt;&gt;&gt; parser = argparse.ArgumentParser()&gt;&gt;&gt; parser.add_argument(&apos;--foo&apos;, action=&apos;store_true&apos;)&gt;&gt;&gt; parser.add_argument(&apos;bar&apos;)&gt;&gt;&gt; parser.parse_known_args([&apos;--foo&apos;, &apos;--badger&apos;, &apos;BAR&apos;, &apos;spam&apos;])(Namespace(bar=&apos;BAR&apos;, foo=True), [&apos;--badger&apos;, &apos;spam&apos;]) Customizing file parsing123class MyArgumentParser(argparse.ArgumentParser): def convert_arg_line_to_args(self, arg_line): return arg_line.split() Exiting methods12345ArgumentParser.exit(status=0, message=None)This method terminates the program, exiting with the specified status and, if given, it prints a message before that.ArgumentParser.error(message)This method prints a usage message including the message to the standard error and terminates the program with a status code of 2.]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-hashlib加密]]></title>
    <url>%2Fposts%2F263d2024.html</url>
    <content type="text"><![CDATA[摘要本文记录hashlib的常用方法 hashlibhash：一种算法,用于加密相关的操作,3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法三个特点： 内容相同则hash运算结果相同，内容稍微改变则hash值则变 不可逆推 相同算法：无论校验多长的数据，得到的哈希值长度固定。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import hashlib# ######## md5 ######## hash = hashlib.md5()hash.update(&apos;hello&apos;.encode(&apos;utf8&apos;))print(hash.hexdigest())#5d41402abc4b2a76b9719d911017c592 hash.update(&apos;alvin&apos;.encode(&apos;utf8&apos;)) print(hash.hexdigest())#92a7e713c30abbb0319fa07da2a5c4af m2=hashlib.md5()m2.update(&apos;helloalvin&apos;.encode(&apos;utf8&apos;))print(m2.hexdigest())#92a7e713c30abbb0319fa07da2a5c4af# 注意：把一段很长的数据update多次，与一次update这段长数据，得到的结果一样# 但是update多次为校验大文件提供了可能。 # ######## sha1 ########hash = hashlib.sha1()hash.update(&apos;admin&apos;)print hash.hexdigest() # ######## sha256 ########hash = hashlib.sha256()hash.update(&apos;admin&apos;)print hash.hexdigest() hash = hashlib.sha256(&apos;898oaFs09f&apos;.encode(&apos;utf8&apos;))hash.update(&apos;alvin&apos;.encode(&apos;utf8&apos;))print (hash.hexdigest())#e79e68f070cdedcfe63eaf1a2e92c83b4cfb1b5c6bc452d214c1b7e77cdfd1c7 # ######## sha384 ######## hash = hashlib.sha384()hash.update(&apos;admin&apos;)print hash.hexdigest() # ######## sha512 ######## hash = hashlib.sha512()hash.update(&apos;admin&apos;) 以上加密算法虽然依然非常厉害，但时候存在缺陷，即：通过撞库可以反解。所以，有必要对加密算法中添加自定义key再来做加密。 1234567import hashlib # ######## md5 ######## hash = hashlib.md5(&apos;898oaFs09f&apos;)hash.update(&apos;admin&apos;)print hash.hexdigest() 模拟撞库破解密码 123456789101112131415161718192021222324import hashlibpasswds=[ &apos;alex3714&apos;, &apos;alex1313&apos;, &apos;alex94139413&apos;, &apos;alex123456&apos;, &apos;123456alex&apos;, &apos;a123lex&apos;, ]def make_passwd_dic(passwds): dic=&#123;&#125; for passwd in passwds: m=hashlib.md5() m.update(passwd.encode(&apos;utf-8&apos;)) dic[passwd]=m.hexdigest() return dicdef break_code(cryptograph,passwd_dic): for k,v in passwd_dic.items(): if v == cryptograph: print(&apos;密码是===&gt;\033[46m%s\033[0m&apos; %k)cryptograph=&apos;aee949757a2e698417463d47acac93df&apos;break_code(cryptograph,make_passwd_dic(passwds)) 还不够吊？python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密 123456import hmach = hmac.new(&apos;alvin&apos;.encode(&apos;utf8&apos;))h.update(&apos;hello&apos;.encode(&apos;utf8&apos;))print(h.hexdigest())#320df9832eab4c038b6c1d7ed73a5940 注意！注意！注意 1234567891011121314151617181920212223#要想保证hmac最终结果一致，必须保证：#1:hmac.new括号内指定的初始key一样#2:无论update多少次，校验的内容累加到一起是一样的内容import hmach1=hmac.new(b&apos;egon&apos;)h1.update(b&apos;hello&apos;)h1.update(b&apos;world&apos;)print(h1.hexdigest())h2=hmac.new(b&apos;egon&apos;)h2.update(b&apos;helloworld&apos;)print(h2.hexdigest())h3=hmac.new(b&apos;egonhelloworld&apos;)print(h3.hexdigest())&apos;&apos;&apos;f1bf38d054691688f89dcd34ac3c27f2f1bf38d054691688f89dcd34ac3c27f2bcca84edd9eeb86f30539922b28f3981&apos;&apos;&apos;]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-time、datetime]]></title>
    <url>%2Fposts%2F5d959c43.html</url>
    <content type="text"><![CDATA[摘要在Python中，通常有这几种方式来表示时间： 时间戳 格式化的时间字符串 元组（struct_time）共九个元素。 由于Python的time模块实现主要调用C库，所以各个平台可能有所不同。 UTC（Coordinated Universal Time）即格林威治天文时间，为世界标准时间。中国北京为UTC+8。 DST（Daylight Saving Time）即夏令时。 时间戳（timestamp）的方式：通常来说，时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。我们运行“type(time.time())”，返回的是float类型。返回时间戳方式的函数主要有time()，clock()等。 元组（struct_time）方式：struct_time元组共有9个元素，返回struct_time的函数主要有gmtime()，localtime()，strptime()。 datetimeimport datetime1.返回当前时间&gt;&gt;&gt; datetime.datetime.now()datetime.datetime(2017, 5, 9, 17, 7, 0, 514481)2.时间戳转换成日期&gt;&gt;&gt; datetime.date.fromtimestamp(1178766678)datetime.date(2007, 5, 10)3.当前时间+3天&gt;&gt;&gt; datetime.datetime.now() + datetime.timedelta(+3)datetime.datetime(2017, 5, 12, 17, 12, 42, 124379)4.当前时间-3天&gt;&gt;&gt; datetime.datetime.now() + datetime.timedelta(-3)datetime.datetime(2017, 5, 6, 17, 13, 18, 474406)5.当前时间+3小时&gt;&gt;&gt; datetime.datetime.now() + datetime.timedelta(hours=3)datetime.datetime(2017, 5, 9, 20, 13, 55, 678310)6.当前时间+30分钟&gt;&gt;&gt; datetime.datetime.now() + datetime.timedelta(minutes=30)datetime.datetime(2017, 5, 9, 17, 44, 40, 392370)1. 日期输出格式化 datetime =&gt; stringimport datetimenow = datetime.datetime.now()now.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) 输出&apos;2015-04-07 19:11:21&apos;strftime是datetime类的实例方法。 2. 日期输出格式化 string =&gt; datetimeimport datetimet_str = &apos;2015-04-07 19:11:21&apos;d = datetime.datetime.strptime(t_str, &apos;%Y-%m-%d %H:%M:%S&apos;)strptime是datetime类的静态方法。 3. 日期比较操作在datetime模块中有timedelta类，这个类的对象用于表示一个时间间隔，比如两个日期或者时间的差别。构造方法：import datetimedatetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) 所有的参数都有默认值0，这些参数可以是int或float，正的或负的。可以通过 timedelta.days、tiemdelta.seconds 等获取相应的时间值。timedelta 类的实例，支持加、减、乘、除等操作，所得的结果也是 timedelta 类的实例。比如：import datetimeyear = datetime.timedelta(days=365)ten_years = year *10nine_years = ten_years - year 同时，date、time和datetime类也支持与timedelta的加、减运算。datetime1 = datetime2 + timedeltatimedelta = datetime1 - datetime2这样，可以很方便的实现一些功能。 4. 两个日期相差多少天。import datetimed1 = datetime.datetime.strptime(&apos;2015-03-05 17:41:20&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;)d2 = datetime.datetime.strptime(&apos;2015-03-02 17:41:20&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;)delta = d1 - d2print delta.days 输出：3 5. 今天的n天后的日期。import datetimenow = datetime.datetime.now()delta = datetime.timedelta(days=3)n_days = now + deltaprint n_days.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) 输出：2015-04-10 19:16:34 #coding=utf-8import datetimenow=datetime.datetime.now()print now #将日期转化为字符串datetime =&gt; stringimport datetimenow=datetime.datetime.now()print now.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) #将字符串转换为日期 string =&gt; datetimeimport datetimet_str = &apos;2015-03-05 16:26:23&apos;d=datetime.datetime.strptime(t_str,&apos;%Y-%m-%d %H:%M:%S&apos;)print d#在datetime模块中有timedelta类，这个类的对象用于表示一个时间间隔，比如两个日#期或者时间的差别。 #计算两个日期的间隔import datetimed1 = datetime.datetime.strptime(&apos;2012-03-05 17:41:20&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;)d2 = datetime.datetime.strptime(&apos;2012-03-02 17:41:20&apos;, &apos;%Y-%m-%d %H:%M:%S&apos;)delta = d1 - d2print delta.days print delta #今天的n天后的日期import datetimenow=datetime.datetime.now()delta=datetime.timedelta(days=3)n_days=now+deltaprint n_days.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)datetime的好处是可以实现方便的时间运算,比如 endTime - starTime,这在时间duration计算时非常方便.##datetime 模块常用方法小记datetime模块常用的主要有下面这四个类：1. datetime.date: 是指年月日构成的日期(相当于日历)2. datetime.time: 是指时分秒微秒构成的一天24小时中的具体时间(相当于手表)3. datetime.datetime: 上面两个合在一起，既包含时间又包含日期4. datetime.timedelta: 时间间隔对象(timedelta)。一个时间点(datetime)加上一个时间间隔(timedelta)可以得到一个新的时间点(datetime)。比如今天的上午3点加上5个小时得到今天的上午8点。同理，两个时间点相减会得到一个时间间隔。1.datetime.date 类1.新建一个date对象，日期为今天，既可以直接调用datetime.date.today()，也可以直接向datetime.date()传值，如下：In [4]: today = datetime.date.today()In [5]: todayOut[5]: datetime.date(2014, 8, 15)In [6]: t = datetime.date(2014,8,15)In [7]: tOut[7]: datetime.date(2014, 8, 15)2.datetime.date.strftime(format) 格式化为需要的时间，如常用的 “年-月-日 小时：分钟：秒” 格式In [8]: today.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[8]: &apos;2014-08-15 00:00:00’date对象中小时、分钟、秒默认都是0，纪元年的那个时间3.datetime.date.timple() 转成struct_time格式，这样传递给time.mktime(t) 后，直接转成时间戳格式In [9]: today.timetuple()Out[9]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=227, tm_isdst=-1)In [10]: time.mktime(today.timetuple())Out[10]: 1408032000.04.datetime.date.replace(year, month, day) 返回一个替换后的date对象In [11]: today.replace(year=2013)Out[11]: datetime.date(2013, 8, 15)5.datetime.date.fromtimestamp(timestamp) 将时间戳转化为date对象In [12]: datetime.date.fromtimestamp(1408058729)Out[12]: datetime.date(2014, 8, 15)2.datetime.time 类1.新建一个time对象In [15]: tOut[15]: datetime.time(8, 45, 20)2.datetime.time.(format)格式化输出In [16]: t.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[16]: &apos;1900-01-01 08:45:20’time对应的年、月、日为1900、01、01，纪元年的那个时间3.datetime.time.replace([hour[, minute[, second[, microsecond[, tzinfo]]]]]) 返回一个替换后的time对象In [17]: t.replace(hour=9)Out[17]: datetime.time(9, 45, 20)3.datetime.datetime类其实和date的那些方法差不多了，大概看以下，简单说说1.新建一个datetime对象，日期为今天，既可以直接调用datetime.datetime.today()，也可以直接向datetime.datetime()传值，如下：In [21]: d1 = datetime.datetime.today()In [22]: d1Out[22]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)In [23]: d2 = datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)In [24]: d2Out[24]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)2.datetime.datetime.now([tz]) 当不指定时区时，和datetime.datetime.today()是一样的结果，如下In [25]: datetime.datetime.now()Out[25]: datetime.datetime(2014, 8, 15, 8, 14, 50, 738672)3..datetime.datetime.strftime(format) 格式化为需要的时间，如常用的 “年-月-日 小时：分钟：秒” 格式In [27]: d1Out[27]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)In [28]: d1.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[28]: &apos;2014-08-15 08:12:34’4.datetime.datetime.timple() 转成struct_time格式，这样传递给time.mktime(t) 后，直接转成时间戳格式In [29]: d1Out[29]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)In [30]: d1.timetuple()Out[30]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=8, tm_min=12, tm_sec=34, tm_wday=4, tm_yday=227, tm_isdst=-1)In [31]: time.mktime(d1.timetuple())Out[31]: 1408061554.05.datetime.datetime.replace(year, month, day) 返回一个替换后的date对象In [32]: d1Out[32]: datetime.datetime(2014, 8, 15, 8, 12, 34, 790945)In [33]: d1.replace(year=2000)Out[33]: datetime.datetime(2000, 8, 15, 8, 12, 34, 790945)6.datetime.datetime.fromtimestamp(timestamp) 将时间戳转化为datetime对象In [34]: time.time()Out[34]: 1408061894.081552In [35]: datetime.datetime.fromtimestamp(1408061894)Out[35]: datetime.datetime(2014, 8, 15, 8, 18, 14)4.datetime.timedelta类没啥好说的，主要做时间的加减法用，如下：In [78]: today = datetime.datetime.today()In [79]: yesterday = today - datetime.timedelta(days=1)In [80]: yesterdayOut[80]: datetime.datetime(2014, 8, 14, 15, 8, 25, 783471)In [81]: todayOut[81]: datetime.datetime(2014, 8, 15, 15, 8, 25, 783471)#!/usr/bin/python# -*- coding: UTF-8 -*-import datetimei = datetime.datetime.now()print (&quot;当前的日期和时间是 %s&quot; % i)print (&quot;ISO格式的日期和时间是 %s&quot; % i.isoformat() )print (&quot;当前的年份是 %s&quot; %i.year)print (&quot;当前的月份是 %s&quot; %i.month)print (&quot;当前的日期是 %s&quot; %i.day)print (&quot;dd/mm/yyyy 格式是 %s/%s/%s&quot; % (i.day, i.month, i.year) )print (&quot;当前小时是 %s&quot; %i.hour)print (&quot;当前分钟是 %s&quot; %i.minute)print (&quot;当前秒是 %s&quot; %i.second) time1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681.以元组方式返回本地当前时间&gt;&gt;&gt; time.localtime()time.struct_time(tm_year=2017, tm_mon=5, tm_mday=8, tm_hour=16, tm_min=13, tm_sec=34, tm_wday=0, tm_yday=128, tm_isdst=0)2.以元组方式返回格林威治时间&gt;&gt;&gt; time.gmtime() time.struct_time(tm_year=2017, tm_mon=5, tm_mday=8, tm_hour=8, tm_min=13, tm_sec=38, tm_wday=0, tm_yday=128, tm_isdst=0)3.将元组时间转换为时间戳&gt;&gt;&gt; x = time.localtime()&gt;&gt;&gt; time.mktime(x)1494232890.04.将元组时间转换为字符串格式时间&gt;&gt;&gt; x = time.localtime()&gt;&gt;&gt; time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,x)&apos;2017-05-08 16:57:38&apos;5.将字符串格式时间转换为元组格式时间&gt;&gt;&gt; time.strptime(&apos;2017-05-08 17:03:12&apos;,&apos;%Y-%m-%d %H:%M:%S&apos;)time.struct_time(tm_year=2017, tm_mon=5, tm_mday=8, tm_hour=17, tm_min=3, tm_sec=12, tm_wday=0, tm_yday=128, tm_isdst=-1)6.元组格式时间转换为字符串格式时间&gt;&gt;&gt; time.asctime()&apos;Tue May 9 15:23:21 2017&apos;&gt;&gt;&gt; x = time.localtime()&gt;&gt;&gt; time.asctime(x)&apos;Tue May 9 15:23:39 2017&apos;7.时间戳转换成字符串格式时间&gt;&gt;&gt; time.ctime()&apos;Tue May 9 16:07:24 2017&apos;&gt;&gt;&gt; time.ctime(987867475)&apos;Sat Apr 21 23:37:55 2001&apos;格式参照%a 本地（locale）简化星期名称 %A 本地完整星期名称 %b 本地简化月份名称 %B 本地完整月份名称 %c 本地相应的日期和时间表示 %d 一个月中的第几天（01 - 31） %H 一天中的第几个小时（24小时制，00 - 23） %I 第几个小时（12小时制，01 - 12） %j 一年中的第几天（001 - 366） %m 月份（01 - 12） %M 分钟数（00 - 59） %p 本地am或者pm的相应符 %S 秒（01 - 61） %U 一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。 %w 一个星期中的第几天（0 - 6，0是星期天）%W 和%U基本相同，不同的是%W以星期一为一个星期的开始。 %x 本地相应日期 %X 本地相应时间 %y 去掉世纪的年份（00 - 99） %Y 完整的年份 %Z 时区的名字（如果不存在为空字符） %% ‘%’字符import time # 当前时间print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) t = time.localtime(time.time() - 300) # 5分钟前print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, t)python datetime 获取 几分钟 小时 天之前的时间 print ((datetime.datetime.now()-datetime.timedelta(minutes=2)).strftime(&quot;%Y-%m-%d %H:%M&quot;))可以控制days、seconds、minutes、hours、weeks等------一：经常使用的时间方法1.得到当前时间使用time模块，首先得到当前的时间戳In [42]: time.time()Out[42]: 1408066927.208922将时间戳转换为时间元组 struct_timeIn [43]: time.localtime(time.time())Out[43]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=9, tm_min=42, tm_sec=20, tm_wday=4, tm_yday=227, tm_isdst=0)格式化输出想要的时间In [44]: time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time()))Out[44]: &apos;2014-08-15 09:43:04&apos;接上文，不加参数时，默认就是输出当前的时间In [48]: time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[48]: &apos;2014-08-15 09:46:53’当然也可以透过datetime模块来实现，如下：In [68]: t = time.time()In [69]: datetime.datetime.fromtimestamp(t).strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[69]: &apos;2014-08-15 10:04:51’同时，也可以只使用datetime模块In [46]: datetime.datetime.now().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[46]: &apos;2014-08-15 09:45:27’In [47]: datetime.datetime.today().strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[47]: &apos;2014-08-15 09:46:10&apos;2.获取时间差，计算程序的执行时间等：使用time模块：In [75]: def t(): ....: start = time.time() ....: time.sleep(10) ....: end = time.time() ....: print end - start ....:In [76]: t()10.0014948845使用datetime模块：In [49]: starttime = datetime.datetime.now()In [50]: endtime = datetime.datetime.now()In [51]: print (endtime - starttime).seconds63.计算昨天的日期（发散思维，计算其他日期相加、相减等）：In [52]: d1 = datetime.datetime.now()In [53]: d2 = d1 - datetime.timedelta(days=1)In [54]: d1Out[54]: datetime.datetime(2014, 8, 15, 9, 54, 10, 68665)In [55]: d2Out[55]: datetime.datetime(2014, 8, 14, 9, 54, 10, 68665)4.时间元组 struct_time转化为时间戳In [56]: datetime.datetime.now()Out[56]: datetime.datetime(2014, 8, 15, 9, 57, 52, 779893)In [57]: datetime.datetime.now().timetuple()Out[57]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=9, tm_min=58, tm_sec=12, tm_wday=4, tm_yday=227, tm_isdst=-1)In [58]: time.mktime(datetime.datetime.now().timetuple())Out[58]: 1408067904.05.strptime也挺有用的，将时间字符串转换为时间元组struct_timeIn [73]: time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)Out[73]: &apos;2014-08-15 10:27:36&apos;In [74]: time.strptime(&apos;2014-08-15 10:27:36&apos;,&apos;%Y-%m-%d %H:%M:%S&apos;)Out[74]: time.struct_time(tm_year=2014, tm_mon=8, tm_mday=15, tm_hour=10, tm_min=27, tm_sec=36, tm_wday=4, tm_yday=227, tm_isdst=-1)]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-shutl]]></title>
    <url>%2Fposts%2Fe1b5539d.html</url>
    <content type="text"><![CDATA[摘要本文记录shutil模块的常用方法 shutil高级的 文件、文件夹、压缩包 处理模块 shutil.copyfileobj(fsrc, fdst[, length])将文件内容拷贝到另一个文件中 123import shutil shutil.copyfileobj(open(&apos;old.xml&apos;,&apos;r&apos;), open(&apos;new.xml&apos;, &apos;w&apos;)) shutil.copyfile(src, dst)拷贝文件 1shutil.copyfile(&apos;f1.log&apos;, &apos;f2.log&apos;) #目标文件无需存在 shutil.copymode(src, dst)仅拷贝权限。内容、组、用户均不变 1shutil.copymode(&apos;f1.log&apos;, &apos;f2.log&apos;) #目标文件必须存在 shutil.copystat(src, dst)仅拷贝状态的信息，包括：mode bits, atime, mtime, flags 1shutil.copystat(&apos;f1.log&apos;, &apos;f2.log&apos;) #目标文件必须存在 shutil.copy(src, dst)拷贝文件和权限 123import shutil shutil.copy(&apos;f1.log&apos;, &apos;f2.log&apos;) shutil.copy2(src, dst)拷贝文件和状态信息 123import shutil shutil.copy2(&apos;f1.log&apos;, &apos;f2.log&apos;) shutil.ignore_patterns(*patterns)shutil.copytree(src, dst, symlinks=False, ignore=None)递归的去拷贝文件夹 123import shutil shutil.copytree(&apos;folder1&apos;, &apos;folder2&apos;, ignore=shutil.ignore_patterns(&apos;*.pyc&apos;, &apos;tmp*&apos;)) #目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 1234567import shutilshutil.copytree(&apos;f1&apos;, &apos;f2&apos;, symlinks=True, ignore=shutil.ignore_patterns(&apos;*.pyc&apos;, &apos;tmp*&apos;))&apos;&apos;&apos;通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件&apos;&apos;&apos; shutil.rmtree(path[, ignore_errors[, onerror]])递归的去删除文件 123import shutil shutil.rmtree(&apos;folder1&apos;) shutil.move(src, dst)递归的去移动文件，它类似mv命令，其实就是重命名。 123import shutil shutil.move(&apos;folder1&apos;, &apos;folder3&apos;) shutil.make_archive(base_name, format,…)创建压缩包并返回文件路径，例如：zip、tar 12345678base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，如 data_bak =&gt;保存至当前路径如：/tmp/data_bak =&gt;保存至/tmp/format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”root_dir： 要压缩的文件夹路径（默认当前目录）owner： 用户，默认当前用户group： 组，默认当前组logger： 用于记录日志，通常是logging.Logger对象 12345678#将 /data 下的文件打包放置当前程序目录import shutilret = shutil.make_archive(&quot;data_bak&quot;, &apos;gztar&apos;, root_dir=&apos;/data&apos;) #将 /data下的文件打包放置 /tmp/目录import shutilret = shutil.make_archive(&quot;/tmp/data_bak&quot;, &apos;gztar&apos;, root_dir=&apos;/data&apos;) shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细： 1234567891011121314151617181920212223242526272829import zipfile# 压缩z = zipfile.ZipFile(&apos;laxi.zip&apos;, &apos;w&apos;)z.write(&apos;a.log&apos;)z.write(&apos;data.data&apos;)z.close()# 解压z = zipfile.ZipFile(&apos;laxi.zip&apos;, &apos;r&apos;)z.extractall(path=&apos;.&apos;)z.close()zipfile压缩解压缩import tarfile# 压缩&gt;&gt;&gt; t=tarfile.open(&apos;/tmp/egon.tar&apos;,&apos;w&apos;)&gt;&gt;&gt; t.add(&apos;/test1/a.py&apos;,arcname=&apos;a.bak&apos;)&gt;&gt;&gt; t.add(&apos;/test1/b.py&apos;,arcname=&apos;b.bak&apos;)&gt;&gt;&gt; t.close()# 解压&gt;&gt;&gt; t=tarfile.open(&apos;/tmp/egon.tar&apos;,&apos;r&apos;)&gt;&gt;&gt; t.extractall(&apos;/egon&apos;)&gt;&gt;&gt; t.close()tarfile压缩解压缩]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-re]]></title>
    <url>%2Fposts%2F4333f888.html</url>
    <content type="text"><![CDATA[摘要正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。Python自1.5版本起增加了re模块，它提供Perl风格的正则表达式模式。 re模块使Python语言拥有全部的正则表达式功能。 compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。 re模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。 语法: 1234567891011121314import re #导入模块名p = re.compile(&quot;^[0-9]&quot;)#生成要匹配的正则对象，^代表从开头匹配，[0-9]代表匹配0至9的任意一个数字，所以这里的意思是对传进来的字符串进行匹配，如果这个字符串的开头第一个字符是数字，就代表匹配上了m = p.match(&apos;14534Abc&apos;)#按上面生成的正则对象去匹配字符串，如果能匹配成功，这个m就会有值，否则m为Noneif m: #不为空代表匹配上了 print(m.group()) #m.group()返回匹配上的结果，此处为1，因为匹配上的是1这个字符else: print(&quot;doesn&apos;t match.&quot;) 上面的第2 和第3行也可以合并成一行来写 1m = p.match(&quot;^[0-9]&quot;,&apos;14534Abc&apos;) 效果是一样的，区别在于，第一种方式是提前对要匹配的格式进行了编译（对匹配公式进行解析），这样再去匹配的时候就不用在编译匹配的格式，第2种简写是每次匹配的时候都要进行一次匹配公式的编译，所以，如果你需要从一个5w行的文件中匹配出所有以数字开头的行，建议先把正则公式进行编译再匹配，这样速度会快点。 re.match函数re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。 函数语法：1re.match(pattern, string, flags=0) 函数参数说明： 参数 描述 pattern 匹配的正则表达式 string 要匹配的字符串。 flags 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。 匹配成功re.match方法返回一个匹配的对象，否则返回None。 我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。 匹配对象方法 描述 group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。 groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。 实例：12345678910111213#!/usr/bin/pythonimport re line = &quot;Cats are smarter than dogs&quot; matchObj = re.match( r&apos;(.*) are (.*?) .*&apos;, line, re.M|re.I) if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2)else: print &quot;No match!!&quot; 以上实例执行结果如下： 123matchObj.group() : Cats are smarter than dogsmatchObj.group(1) : CatsmatchObj.group(2) : smarter re.search方法re.search 扫描整个字符串并返回第一个成功的匹配。 函数语法：1re.search(pattern, string, flags=0) 函数参数说明： 参数 描述 pattern 匹配的正则表达式 string 要匹配的字符串。 flags 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。 匹配成功re.search方法方法返回一个匹配的对象，否则返回None。 我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。 匹配对象方法 描述 group(num=0) 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。 groups() 返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。 实例：12345678910111213#!/usr/bin/pythonimport re line = &quot;Cats are smarter than dogs&quot;; matchObj = re.match( r&apos;(.*) are (.*?) .*&apos;, line, re.M|re.I) if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2)else: print &quot;No match!!&quot; 以上实例执行结果如下： 123matchObj.group() : Cats are smarter than dogsmatchObj.group(1) : CatsmatchObj.group(2) : smarter re.match与re.search的区别re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。 实例：12345678910111213141516#!/usr/bin/pythonimport re line = &quot;Cats are smarter than dogs&quot;; matchObj = re.match( r&apos;dogs&apos;, line, re.M|re.I)if matchObj: print &quot;match --&gt; matchObj.group() : &quot;, matchObj.group()else: print &quot;No match!!&quot; matchObj = re.search( r&apos;dogs&apos;, line, re.M|re.I)if matchObj: print &quot;search --&gt; matchObj.group() : &quot;, matchObj.group()else: print &quot;No match!!&quot; 以上实例运行结果如下： 12No match!!search --&gt; matchObj.group() : dogs 检索和替换 re.subPython 的re模块提供了re.sub用于替换字符串中的匹配项。 语法：1re.sub(pattern, repl, string, max=0) pattern : 正则中的模式字符串。repl : 替换的字符串，也可为一个函数。string : 要被查找替换的原始字符串。count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。 返回的字符串是在字符串中用 RE 最左边不重复的匹配来替换。如果模式没有发现，字符将被没有改变地返回。 可选参数 count 是模式匹配后替换的最大次数；count 必须是非负整数。缺省值是 0 表示替换所有的匹配。 实例：123456789101112#!/usr/bin/pythonimport re phone = &quot;2004-959-559 # This is Phone Number&quot; # Delete Python-style commentsnum = re.sub(r&apos;#.*$&apos;, &quot;&quot;, phone)print &quot;Phone Num : &quot;, num # Remove anything other than digitsnum = re.sub(r&apos;\D&apos;, &quot;&quot;, phone) print &quot;Phone Num : &quot;, num 以上实例执行结果如下： 12Phone Num : 2004-959-559Phone Num : 2004959559 re.findallPython 的re模块提供了re.findall用于找出字符串中所有的匹配项。 实例：12str1 = &quot;This is a apple! This is a pen!&quot;print(re.findall(r&quot;is&quot;, str1)) 执行输出结果为： 1[&apos;is&apos;, &apos;is&apos;, &apos;is&apos;, &apos;is&apos;] repl 参数是一个函数以下实例中将字符串中的匹配的数字乘于 2： 123456789101112#!/usr/bin/python# -*- coding: UTF-8 -*-import re# 将匹配的数字乘于 2def double(matched): value = int(matched.group(&apos;value&apos;)) return str(value * 2)s = &apos;A23G4HFD567&apos;print(re.sub(&apos;(?P&lt;value&gt;\d+)&apos;, double, s)) 执行输出结果为： 1A46G8HFD1134 一些正则实例正则表达式常用5种操作 re.match(pattern, string) # 从头匹配 re.search(pattern, string) # 匹配整个字符串，直到找到一个匹配 re.split() # 将匹配到的格式当做分割点对字符串分割成列表 123&gt;&gt;&gt;m = re.split(&quot;[0-9]&quot;, &quot;alex1rain2jack3helen rachel8&quot;)&gt;&gt;&gt;print(m)输出： [&apos;alex&apos;, &apos;rain&apos;, &apos;jack&apos;, &apos;helen rachel&apos;, &apos;&apos;] re.findall() # 找到所有要匹配的字符并返回列表格式 123&gt;&gt;&gt;m = re.findall(&quot;[0-9]&quot;, &quot;alex1rain2jack3helen rachel8&quot;)&gt;&gt;&gt;print(m)&lt;br&gt;输出：[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;8&apos;] re.sub(pattern, repl, string, count,flag) # 替换匹配到的字符 123m=re.sub(&quot;[0-9]&quot;,&quot;|&quot;, &quot;alex1rain2jack3helen rachel8&quot;,count=2 )print(m)输出：alex|rain|jack3helen rachel8 “abbbcccbba” -&gt; “abcba”12345&gt;&gt;&gt; import re&gt;&gt;&gt; p = re.compile(ur&quot;([a-zA-Z])(\1+)&quot;)&gt;&gt;&gt; s = &quot;abbbcccbba&quot;&gt;&gt;&gt; p.sub(ur&quot;\1&quot;,s)&apos;abcba&apos; “abbbcccbba” -&gt; “a1b3c3b2a1”12345&gt;&gt;&gt; import re&gt;&gt;&gt; p = re.compile(ur&quot;([a-zA-Z])(\1*)&quot;)&gt;&gt;&gt; s = &quot;abbbcccbba&quot;&gt;&gt;&gt; p.sub(lambda m: m.group(1)+str(1+len(m.group(2))), s)&apos;a1b3c3b2a1&apos; 手机号123456phone_str = &quot;hey my name is alex, and my phone number is 13651054607, please call me if you are pretty!&quot;phone_str2 = &quot;hey my name is alex, and my phone number is 18651054604, please call me if you are pretty!&quot; m = re.search(&quot;(1)([358]\d&#123;9&#125;)&quot;,phone_str2)if m: print(m.group()) 匹配IP V412345ip_addr = &quot;inet 192.168.60.223 netmask 0xffffff00 broadcast 192.168.60.255&quot; m = re.search(&quot;\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;&quot;, ip_addr) print(m.group()) 分组匹配地址12345678910111213141516171819contactInfo = &apos;Oldboy School, Beijing Changping Shahe: 010-8343245&apos;match = re.search(r&apos;(\w+), (\w+): (\S+)&apos;, contactInfo) #分组&quot;&quot;&quot;&gt;&gt;&gt; match.group(1) &apos;Doe&apos; &gt;&gt;&gt; match.group(2) &apos;John&apos; &gt;&gt;&gt; match.group(3) &apos;555-1212&apos;&quot;&quot;&quot;match = re.search(r&apos;(?P&lt;last&gt;\w+), (?P&lt;first&gt;\w+): (?P&lt;phone&gt;\S+)&apos;, contactInfo)&quot;&quot;&quot; &gt;&gt;&gt; match.group(&apos;last&apos;) &apos;Doe&apos; &gt;&gt;&gt; match.group(&apos;first&apos;) &apos;John&apos; &gt;&gt;&gt; match.group(&apos;phone&apos;) &apos;555-1212&apos;&quot;&quot;&quot; 匹配email1234email = &quot;alex.li@126.com http://www.oldboyedu.com&quot; m = re.search(r&quot;[0-9.a-z]&#123;0,26&#125;@[0-9.a-z]&#123;0,20&#125;.[0-9a-z]&#123;0,8&#125;&quot;, email)print(m.group()) 正则表达式修饰符 - 可选标志正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志： 修饰符 描述 re.I 使匹配对大小写不敏感 re.L 做本地化识别（locale-aware）匹配 re.M 多行匹配，影响 ^ 和 $ re.S 使 . 匹配包括换行在内的所有字符 re.U 根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B. re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 正则表达式模式模式字符串使用特殊的语法来表示一个正则表达式： 字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。 多数字母和数字前加一个反斜杠时会拥有不同的含义。 标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。 反斜杠本身需要使用反斜杠转义。 由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r’/t’，等价于’//t’)匹配相应的特殊字符。 下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。 模式 描述 ^ 匹配字符串的开头 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 […] 用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’ [^…] 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。 re* 匹配0个或多个的表达式。 re+ 匹配1个或多个的表达式。 re? 匹配0个或1个由前面的正则表达式定义的片段，贪婪方式 re{ n} re{ n,} 精确匹配n个前面表达式。 re{ n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a丨b 匹配a或b (re) G匹配括号内的表达式，也表示一个组 (?imx) 正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。 (?-imx) 正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。 (?: re) 类似 (…), 但是不表示一个组 (?imx: re) 在括号中使用i, m, 或 x 可选标志 (?-imx: re) 在括号中不使用i, m, 或 x 可选标志 (?#…) 注释. (?= re) 前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。 (?! re) 前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功 (?&gt; re) 匹配的独立模式，省去回溯。 \w 匹配字母数字 \W 匹配非字母数字 \s 匹配任意空白字符，等价于 [\t\n\r\f]. \S 匹配任意非空字符 \d 匹配任意数字，等价于 [0-9]. \D 匹配任意非数字 \A 匹配字符串开始 \Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c \z 匹配字符串结束 \G 匹配最后匹配完成的位置。 \b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \B 匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \n, \t, 等. 匹配一个换行符。匹配一个制表符。等 \1…\9 匹配第n个分组的子表达式。 \10 匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。/ 正则表达式实例字符匹配 实例 描述 python 匹配 “python”. 字符类 实例 描述 [Pp]ython 匹配 “Python” 或 “python” rub[ye] 匹配 “ruby” 或 “rube” [aeiou] 匹配中括号内的任意一个字母 [0-9] 匹配任何数字。类似于 [0123456789] [a-z] 匹配任何小写字母 [A-Z] 匹配任何大写字母 [a-zA-Z0-9] 匹配任何字母及数字 [^aeiou] 除了aeiou字母以外的所有字符 [^0-9] 匹配除了数字外的字符 特殊字符类 实例 描述 . 匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。 \d 匹配一个数字字符。等价于 [0-9]。 \D 匹配一个非数字字符。等价于 [^0-9]。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-random]]></title>
    <url>%2Fposts%2F1901393b.html</url>
    <content type="text"><![CDATA[摘要本文记录random常用方法 random123456789101112131415161718192021222324#!/usr/bin/env python#_*_encoding: utf-8_*_import randomprint (random.random()) #0.6445010863311293 #random.random()用于生成一个0到1的随机符点数: 0 &lt;= n &lt; 1.0print (random.randint(1,7)) #4#random.randint()的函数原型为：random.randint(a, b)，用于生成一个指定范围内的整数。# 其中参数a是下限，参数b是上限，生成的随机数n: a &lt;= n &lt;= bprint (random.randrange(1,10)) #5#random.randrange的函数原型为：random.randrange([start], stop[, step])，# 从指定范围内，按指定基数递增的集合中 获取一个随机数。如：random.randrange(10, 100, 2)，# 结果相当于从[10, 12, 14, 16, ... 96, 98]序列中获取一个随机数。# random.randrange(10, 100, 2)在结果上与 random.choice(range(10, 100, 2) 等效。print(random.choice(&apos;liukuni&apos;)) #i#random.choice从序列中获取一个随机元素。# 其函数原型为：random.choice(sequence)。参数sequence表示一个有序类型。# 这里要说明一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。# list, tuple, 字符串都属于sequence。有关sequence可以查看python手册数据模型这一章。# 下面是使用choice的一些例子：print(random.choice(&quot;学习Python&quot;))#学print(random.choice([&quot;JGood&quot;,&quot;is&quot;,&quot;a&quot;,&quot;handsome&quot;,&quot;boy&quot;])) #Listprint(random.choice((&quot;Tuple&quot;,&quot;List&quot;,&quot;Dict&quot;))) #Listprint(random.sample([1,2,3,4,5],3)) #[1, 2, 5]#random.sample的函数原型为：random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列。 实际使用123456789101112131415161718192021222324252627#!/usr/bin/env python# encoding: utf-8import randomimport string#随机整数：print( random.randint(0,99)) #70 #随机选取0到100间的偶数：print(random.randrange(0, 101, 2)) #4 #随机浮点数：print( random.random()) #0.2746445568079129print(random.uniform(1, 10)) #9.887001463194844 #随机字符：print(random.choice(&apos;abcdefg&amp;#%^*f&apos;)) #f #多个字符中选取特定数量的字符：print(random.sample(&apos;abcdefghij&apos;,3)) #[&apos;f&apos;, &apos;h&apos;, &apos;d&apos;] #随机选取字符串：print( random.choice ( [&apos;apple&apos;, &apos;pear&apos;, &apos;peach&apos;, &apos;orange&apos;, &apos;lemon&apos;] )) #apple#洗牌#items = [1,2,3,4,5,6,7]print(items) #[1, 2, 3, 4, 5, 6, 7]random.shuffle(items)print(items) #[1, 4, 7, 2, 5, 3, 6] 生成随机验证码12345678910import randomcheckcode = &apos;&apos;for i in range(4): current = random.randrange(0,4) if current != i: temp = chr(random.randint(65,90)) else: temp = random.randint(0,9) checkcode += str(temp)print (checkcode)]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-os、sys]]></title>
    <url>%2Fposts%2F5d02f982.html</url>
    <content type="text"><![CDATA[摘要本文记录一些python中os和sys模块的常用方法 os123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107## diros.getcwd()#获取当前工作目录，即当前python脚本工作的目录路径os.chdir(&quot;dirname&quot;)#改变当前脚本工作目录；相当于shell下cdos.curdir#返回当前目录: (&apos;.&apos;)os.pardir#获取当前目录的父目录字符串名：(&apos;..&apos;)os.makedirs(&apos;dirname1/dirname2&apos;)#可生成多层递归目录os.removedirs(&apos;dirname1&apos;)#若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推os.mkdir(&apos;dirname&apos;)#生成单级目录；相当于shell中mkdir dirnameos.rmdir(&apos;dirname&apos;)#删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirnameos.listdir(&apos;dirname&apos;)#列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印## fileos.remove()#删除一个文件os.rename(&quot;oldname&quot;,&quot;newname&quot;)#重命名文件/目录os.stat(&apos;path/filename&apos;)#获取文件/目录信息## otheros.sep#输出操作系统特定的路径分隔符，win下为&quot;\\&quot;,Linux下为&quot;/&quot;os.linesep#输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;os.pathsep#输出用于分割文件路径的字符串os.name#输出字符串指示当前使用平台。win-&gt;&apos;nt&apos;; Linux-&gt;&apos;posix&apos;os.system(&quot;bash command&quot;)#运行shell命令，直接显示os.environ#获取系统环境变量## os.pathos.path.isfile(path)#如果path是一个存在的文件，返回True。否则返回Falseos.path.isdir(path)#如果path是一个存在的目录，则返回True。否则返回Falseos.path.abspath(path)#返回绝对路径os.path.basename(path)# 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素os.path.commonprefix(list)#返回list(多个路径)中，所有path共有的最长的路径。os.path.dirname(path)#返回path的目录。其实就是os.path.split(path)的第一个元素os.path.exists(path)#如果path存在，返回True；如果path不存在，返回Falseos.path.lexists#路径存在则返回True,路径损坏也返回Trueos.path.expanduser(path)#把path中包含的&quot;~&quot;和&quot;~user&quot;转换成用户目录os.path.expandvars(path)#根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”os.path.getatime(path)#返回path所指向的文件或者目录的最后存取时间os.path.getmtime(path)#返回path所指向的文件或者目录的最后修改时间os.path.getctime(path)#返回path的大小os.path.getsize(path)#返回文件大小，如果文件不存在就返回错误os.path.isabs(path)#判断是否为绝对路径os.path.islink(path)#判断路径是否为链接os.path.ismount(path)#判断路径是否为挂载点（）os.path.join(path1[, path2[, ...]])#把目录和文件名合成一个路径os.path.normcase(path)#转换path的大小写和斜杠os.path.normpath(path)#规范path字符串形式os.path.realpath(path)#返回path的真实路径os.path.relpath(path[, start])#从start开始计算相对路径os.path.samefile(path1, path2)#判断目录或文件是否相同os.path.sameopenfile(fp1, fp2)#判断fp1和fp2是否指向同一文件os.path.samestat(stat1, stat2)#判断stat tuple stat1和stat2是否指向同一个文件os.path.split(path)#把路径分割成dirname和basename，返回一个元组os.path.splitdrive(path)#一般用在windows下，返回驱动器名和路径组成的元组os.path.splitext(path)#分割路径，返回路径名和文件扩展名的元组os.path.splitunc(path)#把路径分割为加载点与文件os.path.walk(path, visit, arg)#遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数os.path.supports_unicode_filenames#设置是否支持unicode路径名 123456789101112在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。&gt;&gt;&gt; os.path.normcase(&apos;c:/windows\\system32\\&apos;) &apos;c:\\windows\\system32\\&apos; 规范化路径，如..和/&gt;&gt;&gt; os.path.normpath(&apos;c://windows\\System32\\../Temp/&apos;) &apos;c:\\windows\\Temp&apos; &gt;&gt;&gt; a=&apos;/Users/jieli/test1/\\\a1/\\\\aa.py/../..&apos;&gt;&gt;&gt; print(os.path.normpath(a))/Users/jieli/test1 123456简单使用import oscur_path = os.path.dirname(os.path.realpath(__file__)) #当前路径print(cur_path)filename = cur_path + &quot;/scripts.log&quot; #带上文件路径print(filename) 12345678910111213141516os路径处理#方式一：推荐使用import os#具体应用import os,syspossible_topdir = os.path.normpath(os.path.join( os.path.abspath(__file__), os.pardir, #上一级 os.pardir, os.pardir))sys.path.insert(0,possible_topdir)#方式二：不推荐使用os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) sys12345678sys.argv 命令行参数List，第一个元素是程序本身路径sys.exit(n) 退出程序，正常退出时exit(0)sys.version 获取Python解释程序的版本信息sys.maxint 最大的Int值sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值sys.platform 返回操作系统平台名称sys.stdout.write(&apos;please:&apos;)val = sys.stdin.readline()[:-1] 模拟打印进度条 12345678910111213141516171819202122232425262728293031323334353637383940414243#=========知识储备==========#进度条的效果[# ][## ][### ][#### ]#指定宽度print(&apos;[%-15s]&apos; %&apos;#&apos;)print(&apos;[%-15s]&apos; %&apos;##&apos;)print(&apos;[%-15s]&apos; %&apos;###&apos;)print(&apos;[%-15s]&apos; %&apos;####&apos;)#打印%print(&apos;%s%%&apos; %(100)) #第二个%号代表取消第一个%的特殊意义#可传参来控制宽度print(&apos;[%%-%ds]&apos; %50) #[%-50s]print((&apos;[%%-%ds]&apos; %50) %&apos;#&apos;)print((&apos;[%%-%ds]&apos; %50) %&apos;##&apos;)print((&apos;[%%-%ds]&apos; %50) %&apos;###&apos;)#=========实现打印进度条函数==========import sysimport timedef progress(percent,width=50): if percent &gt;= 1: percent=1 show_str=(&apos;[%%-%ds]&apos; %width) %(int(width*percent)*&apos;#&apos;) print(&apos;\r%s %d%%&apos; %(show_str,int(100*percent)),file=sys.stdout,flush=True,end=&apos;&apos;)#=========应用==========data_size=1025recv_size=0while recv_size &lt; data_size: time.sleep(0.1) #模拟数据的传输延迟 recv_size+=1024 #每次收1024 percent=recv_size/data_size #接收的比例 progress(percent,width=70) #进度条的宽度70]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[python模块-logging]]></title>
    <url>%2Fposts%2F8d289766.html</url>
    <content type="text"><![CDATA[摘要本文记录logging模块的使用方法 logging日志级别123456CRITICAL = 50 #FATAL = CRITICALERROR = 40WARNING = 30 #WARN = WARNINGINFO = 20DEBUG = 10NOTSET = 0 #不设置 默认级别为warning，默认打印到终端12345678910111213import logginglogging.debug(&apos;调试debug&apos;)logging.info(&apos;消息info&apos;)logging.warning(&apos;警告warn&apos;)logging.error(&apos;错误error&apos;)logging.critical(&apos;严重critical&apos;)&apos;&apos;&apos;WARNING:root:警告warnERROR:root:错误errorCRITICAL:root:严重critical&apos;&apos;&apos; 为logging模块指定全局配置，针对所有logger有效，控制打印到文件中12345678910111213141516171819202122232425262728可在logging.basicConfig()函数中通过具体参数来更改logging模块默认行为，可用参数有filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。format：指定handler使用的日志显示格式。 datefmt：指定日期时间格式。 level：设置rootlogger（后边会讲解具体概念）的日志级别 stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。#格式%(name)s：Logger的名字，并非用户名，详细查看%(levelno)s：数字形式的日志级别%(levelname)s：文本形式的日志级别%(pathname)s：调用日志输出函数的模块的完整路径名，可能没有%(filename)s：调用日志输出函数的模块的文件名%(module)s：调用日志输出函数的模块名%(funcName)s：调用日志输出函数的函数名%(lineno)d：调用日志输出函数的语句所在的代码行%(created)f：当前时间，用UNIX标准的表示时间的浮 点数表示%(relativeCreated)d：输出日志信息时的，自Logger创建以 来的毫秒数%(asctime)s：字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒%(thread)d：线程ID。可能没有%(threadName)s：线程名。可能没有%(process)d：进程ID。可能没有%(message)s：用户输出的消息logging.basicConfig() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#======介绍可在logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。format：指定handler使用的日志显示格式。datefmt：指定日期时间格式。level：设置rootlogger（后边会讲解具体概念）的日志级别stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。format参数中可能用到的格式化串：%(name)s Logger的名字%(levelno)s 数字形式的日志级别%(levelname)s 文本形式的日志级别%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有%(filename)s 调用日志输出函数的模块的文件名%(module)s 调用日志输出函数的模块名%(funcName)s 调用日志输出函数的函数名%(lineno)d 调用日志输出函数的语句所在的代码行%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒%(thread)d 线程ID。可能没有%(threadName)s 线程名。可能没有%(process)d 进程ID。可能没有%(message)s用户输出的消息#========使用import logginglogging.basicConfig(filename=&apos;access.log&apos;, format=&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;, level=10)logging.debug(&apos;调试debug&apos;)logging.info(&apos;消息info&apos;)logging.warning(&apos;警告warn&apos;)logging.error(&apos;错误error&apos;)logging.critical(&apos;严重critical&apos;)#========结果access.log内容:2017-07-28 20:32:17 PM - root - DEBUG -test: 调试debug2017-07-28 20:32:17 PM - root - INFO -test: 消息info2017-07-28 20:32:17 PM - root - WARNING -test: 警告warn2017-07-28 20:32:17 PM - root - ERROR -test: 错误error2017-07-28 20:32:17 PM - root - CRITICAL -test: 严重criticalpart2: 可以为logging模块指定模块级的配置,即所有logger的配置 logging模块的Formatter，Handler，Logger，Filter对象1234567#logger：产生日志的对象#Filter：过滤日志的对象#Handler：接收日志然后控制打印到不同的地方，FileHandler用来打印到文件中，StreamHandler用来打印到终端#Formatter对象：可以定制不同的日志格式对象，然后绑定给不同的Handler对象使用，以此来控制不同的Handler的日志格式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&apos;&apos;&apos;critical=50error =40warning =30info = 20debug =10&apos;&apos;&apos;import logging#1、logger对象：负责产生日志，然后交给Filter过滤，然后交给不同的Handler输出logger=logging.getLogger(__file__)#2、Filter对象：不常用，略#3、Handler对象：接收logger传来的日志，然后控制输出h1=logging.FileHandler(&apos;t1.log&apos;) #打印到文件h2=logging.FileHandler(&apos;t2.log&apos;) #打印到文件h3=logging.StreamHandler() #打印到终端#4、Formatter对象：日志格式formmater1=logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;,)formmater2=logging.Formatter(&apos;%(asctime)s : %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;,)formmater3=logging.Formatter(&apos;%(name)s %(message)s&apos;,)#5、为Handler对象绑定格式h1.setFormatter(formmater1)h2.setFormatter(formmater2)h3.setFormatter(formmater3)#6、将Handler添加给logger并设置日志级别logger.addHandler(h1)logger.addHandler(h2)logger.addHandler(h3)logger.setLevel(10)#7、测试logger.debug(&apos;debug&apos;)logger.info(&apos;info&apos;)logger.warning(&apos;warning&apos;)logger.error(&apos;error&apos;)logger.critical(&apos;critical&apos;) Logger与Handler的级别logger是第一级过滤，然后才能到handler，我们可以给logger和handler同时设置level，但是需要注意的是 1234567891011121314151617181920212223Logger is also the first to filter the message based on a level — if you set the logger to INFO, and all handlers to DEBUG, you still won&apos;t receive DEBUG messages on handlers — they&apos;ll be rejected by the logger itself. If you set logger to DEBUG, but all handlers to INFO, you won&apos;t receive any DEBUG messages either — because while the logger says &quot;ok, process this&quot;, the handlers reject it (DEBUG &lt; INFO).#验证import loggingform=logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;,)ch=logging.StreamHandler()ch.setFormatter(form)# ch.setLevel(10)ch.setLevel(20)l1=logging.getLogger(&apos;root&apos;)# l1.setLevel(20)l1.setLevel(10)l1.addHandler(ch)l1.debug(&apos;l1 debug&apos;)重要，重要，重要！！！ Logger的继承（了解）123456789101112131415161718192021222324252627282930import loggingformatter=logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;,)ch=logging.StreamHandler()ch.setFormatter(formatter)logger1=logging.getLogger(&apos;root&apos;)logger2=logging.getLogger(&apos;root.child1&apos;)logger3=logging.getLogger(&apos;root.child1.child2&apos;)logger1.addHandler(ch)logger2.addHandler(ch)logger3.addHandler(ch)logger1.setLevel(10)logger2.setLevel(10)logger3.setLevel(10)logger1.debug(&apos;log1 debug&apos;)logger2.debug(&apos;log2 debug&apos;)logger3.debug(&apos;log3 debug&apos;)&apos;&apos;&apos;2017-07-28 22:22:05 PM - root - DEBUG -test: log1 debug2017-07-28 22:22:05 PM - root.child1 - DEBUG -test: log2 debug2017-07-28 22:22:05 PM - root.child1 - DEBUG -test: log2 debug2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test: log3 debug2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test: log3 debug2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test: log3 debug&apos;&apos;&apos; 应用logging配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&quot;&quot;&quot;logging配置&quot;&quot;&quot;import osimport logging.config# 定义三种日志输出格式 开始standard_format = &apos;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&apos; \ &apos;[%(levelname)s][%(message)s]&apos; #其中name为getlogger指定的名字simple_format = &apos;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&apos;id_simple_format = &apos;[%(levelname)s][%(asctime)s] %(message)s&apos;# 定义日志输出格式 结束logfile_dir = os.path.dirname(os.path.abspath(__file__)) # log文件的目录logfile_name = &apos;all2.log&apos; # log文件名# 如果不存在定义的日志目录就创建一个if not os.path.isdir(logfile_dir): os.mkdir(logfile_dir)# log文件的全路径logfile_path = os.path.join(logfile_dir, logfile_name)# log配置字典LOGGING_DIC = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;formatters&apos;: &#123; &apos;standard&apos;: &#123; &apos;format&apos;: standard_format &#125;, &apos;simple&apos;: &#123; &apos;format&apos;: simple_format &#125;, &#125;, &apos;filters&apos;: &#123;&#125;, &apos;handlers&apos;: &#123; #打印到终端的日志 &apos;console&apos;: &#123; &apos;level&apos;: &apos;DEBUG&apos;, &apos;class&apos;: &apos;logging.StreamHandler&apos;, # 打印到屏幕 &apos;formatter&apos;: &apos;simple&apos; &#125;, #打印到文件的日志,收集info及以上的日志 &apos;default&apos;: &#123; &apos;level&apos;: &apos;DEBUG&apos;, &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;, # 保存到文件 &apos;formatter&apos;: &apos;standard&apos;, &apos;filename&apos;: logfile_path, # 日志文件 &apos;maxBytes&apos;: 1024*1024*5, # 日志大小 5M &apos;backupCount&apos;: 5, &apos;encoding&apos;: &apos;utf-8&apos;, # 日志文件的编码，再也不用担心中文log乱码了 &#125;, &#125;, &apos;loggers&apos;: &#123; #logging.getLogger(__name__)拿到的logger配置 &apos;&apos;: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;], # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕 &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, # 向上（更高level的logger）传递 &#125;, &#125;,&#125;def load_my_logging_cfg(): logging.config.dictConfig(LOGGING_DIC) # 导入上面定义的logging配置 logger = logging.getLogger(__name__) # 生成一个log实例 logger.info(&apos;It works!&apos;) # 记录该文件的运行状态if __name__ == &apos;__main__&apos;: load_my_logging_cfg() 使用123456789101112131415161718192021222324&quot;&quot;&quot;MyLogging Test&quot;&quot;&quot;import timeimport loggingimport my_logging # 导入自定义的logging配置logger = logging.getLogger(__name__) # 生成logger实例def demo(): logger.debug(&quot;start range... time:&#123;&#125;&quot;.format(time.time())) logger.info(&quot;中文测试开始。。。&quot;) for i in range(10): logger.debug(&quot;i:&#123;&#125;&quot;.format(i)) time.sleep(0.2) else: logger.debug(&quot;over range... time:&#123;&#125;&quot;.format(time.time())) logger.info(&quot;中文测试结束。。。&quot;)if __name__ == &quot;__main__&quot;: my_logging.load_my_logging_cfg() # 在你程序文件的入口加载自定义logging配置 demo() 关于如何拿到logger对象的详细解释12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849注意注意注意：#1、有了上述方式我们的好处是：所有与logging模块有关的配置都写到字典中就可以了，更加清晰，方便管理#2、我们需要解决的问题是： 1、从字典加载配置：logging.config.dictConfig(settings.LOGGING_DIC) 2、拿到logger对象来产生日志 logger对象都是配置到字典的loggers 键对应的子字典中的 按照我们对logging模块的理解，要想获取某个东西都是通过名字，也就是key来获取的 于是我们要获取不同的logger对象就是 logger=logging.getLogger(&apos;loggers子字典的key名&apos;) 但问题是：如果我们想要不同logger名的logger对象都共用一段配置，那么肯定不能在loggers子字典中定义n个key &apos;loggers&apos;: &#123; &apos;l1&apos;: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;], # &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, # 向上（更高level的logger）传递 &#125;, &apos;l2: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos; ], &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: False, # 向上（更高level的logger）传递 &#125;, &apos;l3&apos;: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;], # &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, # 向上（更高level的logger）传递 &#125;,&#125; #我们的解决方式是，定义一个空的key &apos;loggers&apos;: &#123; &apos;&apos;: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;], &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, &#125;,&#125;这样我们再取logger对象时logging.getLogger(__name__)，不同的文件__name__不同，这保证了打印日志时标识信息不同，但是拿着该名字去loggers里找key名时却发现找不到，于是默认使用key=&apos;&apos;的配置 另外一个django的配置，瞄一眼就可以，跟上面的一样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#logging_config.pyLOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;formatters&apos;: &#123; &apos;standard&apos;: &#123; &apos;format&apos;: &apos;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&apos; &apos;[%(levelname)s][%(message)s]&apos; &#125;, &apos;simple&apos;: &#123; &apos;format&apos;: &apos;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&apos; &#125;, &apos;collect&apos;: &#123; &apos;format&apos;: &apos;%(message)s&apos; &#125; &#125;, &apos;filters&apos;: &#123; &apos;require_debug_true&apos;: &#123; &apos;()&apos;: &apos;django.utils.log.RequireDebugTrue&apos;, &#125;, &#125;, &apos;handlers&apos;: &#123; #打印到终端的日志 &apos;console&apos;: &#123; &apos;level&apos;: &apos;DEBUG&apos;, &apos;filters&apos;: [&apos;require_debug_true&apos;], &apos;class&apos;: &apos;logging.StreamHandler&apos;, &apos;formatter&apos;: &apos;simple&apos; &#125;, #打印到文件的日志,收集info及以上的日志 &apos;default&apos;: &#123; &apos;level&apos;: &apos;INFO&apos;, &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;, # 保存到文件，自动切 &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_info.log&quot;), # 日志文件 &apos;maxBytes&apos;: 1024 * 1024 * 5, # 日志大小 5M &apos;backupCount&apos;: 3, &apos;formatter&apos;: &apos;standard&apos;, &apos;encoding&apos;: &apos;utf-8&apos;, &#125;, #打印到文件的日志:收集错误及以上的日志 &apos;error&apos;: &#123; &apos;level&apos;: &apos;ERROR&apos;, &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;, # 保存到文件，自动切 &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_err.log&quot;), # 日志文件 &apos;maxBytes&apos;: 1024 * 1024 * 5, # 日志大小 5M &apos;backupCount&apos;: 5, &apos;formatter&apos;: &apos;standard&apos;, &apos;encoding&apos;: &apos;utf-8&apos;, &#125;, #打印到文件的日志 &apos;collect&apos;: &#123; &apos;level&apos;: &apos;INFO&apos;, &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;, # 保存到文件，自动切 &apos;filename&apos;: os.path.join(BASE_LOG_DIR, &quot;xxx_collect.log&quot;), &apos;maxBytes&apos;: 1024 * 1024 * 5, # 日志大小 5M &apos;backupCount&apos;: 5, &apos;formatter&apos;: &apos;collect&apos;, &apos;encoding&apos;: &quot;utf-8&quot; &#125; &#125;, &apos;loggers&apos;: &#123; #logging.getLogger(__name__)拿到的logger配置 &apos;&apos;: &#123; &apos;handlers&apos;: [&apos;default&apos;, &apos;console&apos;, &apos;error&apos;], &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, &#125;, #logging.getLogger(&apos;collect&apos;)拿到的logger配置 &apos;collect&apos;: &#123; &apos;handlers&apos;: [&apos;console&apos;, &apos;collect&apos;], &apos;level&apos;: &apos;INFO&apos;, &#125; &#125;,&#125;# -----------# 用法:拿到俩个loggerlogger = logging.getLogger(__name__) #线上正常的日志collect_logger = logging.getLogger(&quot;collect&quot;) #领导说,需要为领导们单独定制领导们看的日志 文件自动截断12345678910111213141516171819202122import loggingfrom logging import handlerslogger = logging.getLogger(__name__)log_file = &quot;timelog.log&quot;#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=&quot;S&quot;,interval=5,backupCount=3)formatter = logging.Formatter(&apos;%(asctime)s %(module)s:%(lineno)d %(message)s&apos;)fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(&quot;test1&quot;)logger.warning(&quot;test12&quot;)logger.warning(&quot;test13&quot;)logger.warning(&quot;test14&quot;) other12345678910111213141516171819202122232425262728293031import logging #create loggerlogger = logging.getLogger(&apos;TEST-LOG&apos;)logger.setLevel(logging.DEBUG) # create console handler and set level to debugch = logging.StreamHandler()ch.setLevel(logging.DEBUG) # create file handler and set level to warningfh = logging.FileHandler(&quot;access.log&quot;)fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;) # add formatter to ch and fhch.setFormatter(formatter)fh.setFormatter(formatter) # add ch and fh to loggerlogger.addHandler(ch)logger.addHandler(fh) # &apos;application&apos; codelogger.debug(&apos;debug message&apos;)logger.info(&apos;info message&apos;)logger.warn(&apos;warn message&apos;)logger.error(&apos;error message&apos;)logger.critical(&apos;critical message&apos;)]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[gitlab-ci自动部署（二）]]></title>
    <url>%2Fposts%2Fa98a4c62.html</url>
    <content type="text"><![CDATA[下面来说说CI/CD是怎么实现的： 登录gitlab-runner机器切换runner普通用户 [root@localhost ~]# su - gitlab-runner 编写.gitlab-ci.yml文件随便创建一个目录，叫什么无所谓 [gitlab-runner@localhost ~]$ mkdir git 将gitlab上想要发布的项目克隆到这个目录里 [gitlab-runner@localhost git]$ git clone git@gitlab.xxx.com:xxx/xxx.git 因为我们的项目是大工程，里面带着很多子工程，所以就需要通过yml文件，将项目分离出去 比方说我们想发布bb项目，但是bb项目属于aa这个大项目的子项目，所以就进aa大工程目录下 在项目目录里面创建一个.gitlab-ci.yml文件，如下 [gitlab-runner@localhost ~]$ cat .gitlab-ci.yml12345678job 1: stage: test script: - git subtree push -q --prefix=bb git@gitlab.xx.com:bb1/bb.git dev only: - dev tags: - shell 这样就可以将bb项目分离出去，相当于创建了一个新的项目 进入bb目录，也编写.gitlab-ci.yml文件，这个就是我们需要编译的脚本，中间可以穿插maven、node和shell的一系列命令 [gitlab-runner@localhost bb]$ cat .gitlab-ci.yml12345678910job 1: stage: build script: - rm -rf /opt/M2_REPO/com/bb/* - mvn clean package -P test -Dmaven.test.skip - bash -x /opt/bb/shell/bb.sh only: - dev tags: - shell 编写完yml文件后都需要提交下 git add . git commit -m “add gitlab-ci.yml” git push origin dev 另外包括传包，启动等命令都可以在yml文件里面体现，这样只要dev分支有commit的改变了，gitlab-ci就会自动创建job来自动发布]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[gitlab-ci自动部署（一）]]></title>
    <url>%2Fposts%2F999ca0ba.html</url>
    <content type="text"><![CDATA[目前GitLab已经有了CI功能，即持续集成的功能。可以实现代码提交后自动测试、编译、发布、部署等自动化工作 下面是我总结的实现内容： 安装runner在root下执行 下载gitlab-runner wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/gitlab-runner-10.5.0-1.x86_64.rpm 安装 rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm 配置Runner默认情况，Runner是通过gitlab-runner的这个用户来执行一系列操作，其工作目录也是在gitlab-runner的用户目录下面。如果使用默认gitlab-runner用户操作一些文件时经常会遇到权限问题，就需要给gitlab-runner赋权。我们通过以下方式修改。 #在root下执行 #删除服务 gitlab-runner uninstall #添加服务 gitlab-runner install –working-directory /home/builds –user gitlab-ci #重启服务 gitlab-runner restart #查看状态 gitlab-runner status 输出：gitlab-runner: Service is running! #查看是否生效 ps -ef | grep gitlab-runner 注册Runner先打开GitLab上需要自动部署的项目界面，找到该项目的Settings –&gt; CI/CD –&gt; Runners settings 在gitlab上可以看到自己的token信息，用来注册runner #在root下执行gitlab-runner register (会出现注册信息，填url，token，runner的名字) 至此安装部分就完成了]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建shadowsock实现vpn翻墙]]></title>
    <url>%2Fposts%2F253bb9c3.html</url>
    <content type="text"><![CDATA[安装使用root用户登录，运行以下命令：123wget --no-check-certificate -O shadowsocks.sh https://cyh.abcdocker.com/vpn/shadowsocks.sh chmod +x shadowsocks.sh ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 安装完成后，脚本提示如下： 1234567 Congratulations, Shadowsocks-python server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_methodWelcome to visit:https://teddysun.com/342.htmlEnjoy it! 卸载方法使用root用户登录，运行以下命令： ./shadowsocks.sh uninstall 配置文件路径：/etc/shadowsocks.json 12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:your_server_port, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your_password&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;your_encryption_method&quot;, &quot;fast_open&quot;: false&#125; 多用户多端口配置文件配置文件路径：/etc/shadowsocks.json 123456789101112131415 &#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password0&quot;, &quot;9001&quot;:&quot;password1&quot;, &quot;9002&quot;:&quot;password2&quot;, &quot;9003&quot;:&quot;password3&quot;, &quot;9004&quot;:&quot;password4&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;your_encryption_method&quot;, &quot;fast_open&quot;: false&#125; 1234启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart状态：/etc/init.d/shadowsocks status]]></content>
      <categories>
        <category>vpn</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pptp]]></title>
    <url>%2Fposts%2F5dcda1e.html</url>
    <content type="text"><![CDATA[安装pptpd$ yum install pptpd 配置本地及远程IP地址$ vi /etc/pptpd.conf localip 192.168.100.1 remoteip 192.168.100.2-245 配置DNS$ vi /etc/ppp/options.pptpd ms-dns 223.5.5.5 ms-dns 223.6.6.6 修改MTU$ vi / etc / ppp / ip-up /sbin/ifconfig $ 1 mtu 1500 用户和密码配置$ vi /etc/ppp/chap-secrets client server secret IP address 注释掉 testin_user1 pptpd testin_user1 * 配置防火墙$ vi /etc/sysctl.conf net.ipv4.ip_forward = 1＃开启IP转发 $ iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o eth1 -j MASQUERADE＃允许外网连接 开启服务$ service pptpd start $ service iptables start]]></content>
      <categories>
        <category>vpn</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux下使用rsync最快删除海量文件的方法]]></title>
    <url>%2Fposts%2F39f911ed.html</url>
    <content type="text"><![CDATA[摘要在linux的web服务器维护过程当中，有些程序会使用本地file缓存或生成大量程序日志。当发布进行版本迭代时，由于上个版本的程序会保留一段时间，因此这些小文件会消耗大量的inode。这个时候，我们常用的删除命令rm -fr * 就不好用了，因为要等待的时间太长。所以必须要采取一些其他手段来删除这些大量的小文件。这个时候，我们可以使用rsync来实现快速删除大量文件。 安装rsync安装很简单，这里我们直接使用yum安装即可 1yum install -y rsync 创建一个空的文件夹1mkdir /tmp/null 用rsync删除目标目录1rsync --delete-before -a -H -v --progress --stats /tmp/null/ /data/web/app/xxx/cache/ 这样我们要删除的cache目录就会被清空了，删除的速度会非常快。 rsync实际上用的是替换原理，处理数十万个文件也是秒删。 参数123456–delete-before 接收者在传输之前进行删除操作–progress 在传输时显示传输过程-a 归档模式，表示以递归方式传输文件，并保持所有文件属性-H 保持硬连接的文件-v 详细输出模式–stats 给出某些文件的传输状态]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[redmine]]></title>
    <url>%2Fposts%2F9afc5d97.html</url>
    <content type="text"><![CDATA[版本： redmine 3.1.1官方文档地址： http://www.redmine.org.cn/category/install Redmine实战下列描述均以操作系统 Centos7 为例部署。 环境介绍OS IP HostName RoleCentOS7 x64 192.168.10.10 node1 Redmine恢复机器CentOS7 x64 10.10.1.17 localhost Redmine机器 准备工作关闭Iptables和SELinux[root@node1 ~]# systemctl stop firewalld[root@node1 ~]# systemctl disable firewalld[root@node1 ~]# setenforce 0[root@node1 ~]# sed -i ‘/^SELINUX=/{ s/enforcing/disabled/ }’ /etc/selinux/config 调整服务器时间[root@node1 ~]# yum -y install ntp[root@node1 ~]# ntpdate -u 202.120.2.101 安装配置 Redmine安装依赖环境[root@node1 ~]# yum install -y zlib-devel openssl-devel ImageMagick-devel wget curl-devel rubygems mod_fcgid 安装RVM[root@node1 ~]# gpg –keyserver hkp://keys.gnupg.net –recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3[root@node1 ~]# curl -L https://get.rvm.io | bash -s stable 载入RVM环境并获取需要的支持安装包[root@node1 ~]# source /etc/profile.d/rvm.sh[root@node1 ~]# rvm requirements 利用rvm安装 Ruby 2.2.3 并设为默认[root@node1 ~]# sed -i -E ‘s!https?://cache.ruby-lang.org/pub/ruby!https://ruby.taobao.org/mirrors/ruby!&#39; /usr/local/rvm/config/db[root@node1 ~]# rvm gemset create[root@node1 ~]# rvm install 2.2.3[root@node1 ~]# rvm use 2.2.3 –default 添加淘宝镜像[root@node1 ~]# gem sources –add https://gems.ruby-china.org/ –remove https://rubygems.org/[root@node1 ~]# gem sources -l CURRENT SOURCES https://gems.ruby-china.org 安装rails[root@node1 ~]# gem install rails -v=4.2 安装mysql和httpd[root@node1 ~]# yum install httpd httpd-devel -y [root@node1 ~]# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm[root@node1 ~]# rpm -ivh mysql-community-release-el7-5.noarch.rpm[root@node1 ~]# yum -y install mysql-community-server mysql-devel[root@node1 ~]# service mysqld restart[root@node1 ~]# mysql -u rootmysql&gt; create database redmine character set utf8;mysql&gt; create user ‘redmine‘@’localhost’ identified by ‘redmine’;mysql&gt; grant all privileges on redmine.* to ‘redmine‘@’localhost’; 安装redmine的apache支持，这样可以通过apache访问[root@node1 ~]# gem install passenger[root@node1 ~]# passenger-install-apache2-module [root@node1 ~]# vim /etc/httpd/conf.d/passenger.confLoadModule passenger_module /usr/local/rvm/gems/ruby-2.2.3/gems/passenger-5.0.30/buildout/apache2/mod_passenger.so PassengerRoot /usr/local/rvm/gems/ruby-2.2.3/gems/passenger-5.0.30 PassengerDefaultRuby /usr/local/rvm/gems/ruby-2.2.3/wrappers/ruby [root@node1 ~]# vim /etc/httpd/conf.d/redmine.conf ServerName www.a.com # !!! Be sure to point DocumentRoot to ‘public’! DocumentRoot /var/www/html/redmine/public ErrorLog logs/redmine_error_log &lt;Directory /var/www/html/redmine/public&gt; Options Indexes ExecCGI FollowSymLinks Order allow,deny Allow from all # This relaxes Apache security settings. AllowOverride all # MultiViews must be turned off. Options -MultiViews # Uncomment this if you’re on Apache &gt;= 2.4: #Require all granted 安装redmine[root@node1 ~]# cd /var/www/html[root@node1 ~]# wget http://www.redmine.org/releases/redmine-3.1.1.tar.gz[root@node1 ~]# tar -zxvf redmine-3.1.1.tar.gz[root@node1 ~]# mv redmine-3.1.1 redmine[root@node1 ~]# cd /var/www/html/redmine/ [root@node1 ~]# vim Gemfile # 修改sourcesource ‘https://rubygems.org&#39; （注释掉）source’https://ruby.taobao.org&#39; [root@node1 ~]# cp config/configuration.yml.example config/configuration.yml[root@node1 ~]# cp config/database.yml.example config/database.yml[root@node1 ~]# vim config/database.yml # 修改数据连接production: adapter: mysql2 database: redmine host: localhost username: redmine password: “redmine” encoding: utf8 [root@node1 redmine]# gem install bundler # 注意是在网站根目录下执行[root@node1 redmine]# gem install rack-cache -v ‘1.4.2’[root@node1 redmine]# bundle install 为Rails生成cookies密钥[root@node1 redmine]# rake generate_secret_token 初始化redmine数据库表名[root@node1 redmine]# RAILS_ENV=production rake db:migrate[root@node1 redmine]# RAILS_ENV=production rake redmine:load_default_data 启动[root@node1 ~]# cd /var/www/html/redmine[root@node1 redmine]# mkdir /var/www/html/logs[root@node1 redmine]# bundle exec rails server webrick -e production -b 0.0.0.0 &amp;&gt;&gt; /var/www/html/logs/redmine.log &amp;访问地址：http://IP:3000 备份[root@node1 ~]# mysqldump -u root redmine &gt; /root/redmine.sql 恢复停止redmine， 步骤：ps -ef | grep rails，找到redmine的进程号，然后kill掉 恢复数据库[root@node1 ~]# mysql -u redmine -p redmine &lt; /root/redmine.sql 把10.10.2.120上的/backup/redmine-back/redmine_file目录下的所有文件拷贝到192.168.100.10中的/var/www/html/redmine/files目录[root@node1 ~]# scp -r root@10.10.2.120:/backup/redmine-back/redmine_file/* /var/www/html/redmine/files[root@node1 ~]# chmod -R 755 /var/www/html/redmine/files 启动redmine[root@node1 redmine]# bundle exec rails server webrick -e production -b 0.0.0.0 &amp;&gt;&gt; /var/www/html/logs/redmine.log &amp; 调整配置配置邮件发送，空格缩进必须如下，不然redmine无法启动[root@node1 ~]# vim /var/www/html/redmine/config/configuration.ymldefault: email_delivery: delivery_method: :smtp smtp_settings: openssl_verify_mode: ‘none’ address: mail.testin.cn port: 587 domain: testin.cn authentication: :login user_name: “project@testin.cn“ password: “m12345678” 重启redmine即可]]></content>
      <categories>
        <category>版本管理工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos6.4安装kvm]]></title>
    <url>%2Fposts%2F2074d833.html</url>
    <content type="text"><![CDATA[首先检查您的CPU是否支持硬件虚拟化 egrep ‘(vmx|svm)’ –color=always /proc/cpuinfo 应该显示一些东西，例如： [root@server1 ~]# egrep ‘(vmx|svm)’ –color=always /proc/cpuinfoflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm cmp_legacy svm extapic cr8_legacy misalignsseflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow pni cx16 lahf_lm cmp_legacy svm extapic cr8_legacy misalignsse[root@server1 ~]# 现在我们导入软件包的GPG密钥： rpm–import /etc/pki/rpm-gpg/RPM-GPG-KEY* yum install kvm libvirt python-virtinst qemu-kvm /etc/init.d/libvirtd start virsh -c qemu:///system list 导入镜像文件 xterm-253-1.el6.x86_64.rpm 之后xmanager开始kvm就可以了]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
</search>
